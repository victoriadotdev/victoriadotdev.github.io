<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ci/cd on victoria.dev</title><link>https://victoria.dev/tags/ci/cd/</link><description>Recent content in ci/cd on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria Drake)</managingEditor><webMaster>hello@victoria.dev (Victoria Drake)</webMaster><atom:link href="https://victoria.dev/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>How to create a self-documenting Makefile</title><link>https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/</link><pubDate>Wed, 05 Aug 2020 08:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/</guid><description>My new favorite way to completely underuse a Makefile? Creating personalized, per-project repository workflow command aliases that you can check in.
Can a Makefile improve your DevOps and keep developers happy? How awesome would it be if a new developer working on your project didn&amp;rsquo;t start out by copying and pasting commands from your README? What if instead of:
pip3 install pipenv pipenv shell --python 3.8 pipenv install --dev npm install pre-commit install --install-hooks # look up how to install Framework X.</description></item><item><title>Go automate your GitHub profile README</title><link>https://victoria.dev/blog/go-automate-your-github-profile-readme/</link><pubDate>Sat, 25 Jul 2020 10:51:15 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/go-automate-your-github-profile-readme/</guid><description>GitHub&amp;rsquo;s new profile page README feature is having the wonderful effect of bringing some personality to the Myspace pages of the developer Internet. Though Markdown lends itself best to standard static text content, that&amp;rsquo;s not stopping creative folks from working to create a next-level README. You can include GIFs and images to add some motion and pizazz (they&amp;rsquo;re covered in GitHub Flavor Markdown), but I&amp;rsquo;m thinking of something a little more dynamic.</description></item><item><title>Look mom, I'm a GitHub Action Hero</title><link>https://victoria.dev/blog/look-mom-im-a-github-action-hero/</link><pubDate>Sat, 27 Jun 2020 09:06:33 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/look-mom-im-a-github-action-hero/</guid><description>GitHub recently interviewed me for their blog editorial entitled GitHub Action Hero: Victoria Drake. Here&amp;rsquo;s a behind-the-scenes peek at the original interview questions and my answers.
What is the name of your Action? Please include a link too. Among the several Actions I&amp;rsquo;ve built, I have two current favorites. One is hugo-remote, which lets you continuously deploy a Hugo static site from a private source repository to a public GitHub Pages repository.</description></item><item><title>Multithreaded Python: slithering through an I/O bottleneck</title><link>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</link><pubDate>Fri, 28 Feb 2020 09:31:02 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</guid><description>I recently developed a project that I called Hydra: a multithreaded link checker written in Python. Unlike many Python site crawlers I found while researching, Hydra uses only standard libraries, with no external dependencies like BeautifulSoup. It&amp;rsquo;s intended to be run as part of a CI/CD process, so part of its success depended on being fast.
Multiple threads in Python is a bit of a bitey subject (not sorry) in that the Python interpreter doesn&amp;rsquo;t actually let multiple threads execute at the same time.</description></item><item><title>Breaking bottlenecks üçæ</title><link>https://victoria.dev/blog/breaking-bottlenecks/</link><pubDate>Tue, 25 Feb 2020 12:50:29 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/breaking-bottlenecks/</guid><description>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &amp;ldquo;ums&amp;rdquo; that may have occurred. You can view the slides here.
I&amp;rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&amp;rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&amp;rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world.</description></item><item><title>Publishing GitHub event data with GitHub Actions and Pages</title><link>https://victoria.dev/blog/publishing-github-event-data-with-github-actions-and-pages/</link><pubDate>Mon, 04 Nov 2019 09:13:23 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/publishing-github-event-data-with-github-actions-and-pages/</guid><description>Teams who work on GitHub rely on event data to collaborate. The data recorded as issues, pull requests, and comments, become vital to understanding the project.
With the general availability of GitHub Actions, we have a chance to programmatically access and preserve GitHub event data in our repository. Making the data part of the repository itself is a way of preserving it outside of GitHub, and also gives us the ability to feature the data on a front-facing website, such as with GitHub Pages, through an automated process that&amp;rsquo;s part of our CI/CD pipeline.</description></item><item><title>A lightweight, tool-agnostic CI/CD flow with GitHub Actions</title><link>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</link><pubDate>Mon, 28 Oct 2019 08:28:52 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</guid><description>Agnostic tooling is the clever notion that you should be able to run your code in various environments. With many continuous integration and continuous development (CI/CD) apps available, agnostic tooling gives developers a big advantage: portability.
Of course, having your CI/CD work everywhere is a tall order. Popular CI apps for GitHub repositories alone use a multitude of configuration languages spanning Groovy, YAML, TOML, JSON, and more&amp;hellip; all with differing syntax, of course.</description></item><item><title>A portable Makefile for continuous delivery with Hugo and GitHub Pages</title><link>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</link><pubDate>Mon, 21 Oct 2019 09:09:06 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</guid><description>Fun fact: I first launched this GitHub Pages site 1,018 days ago.
Since then, we&amp;rsquo;ve grown together. From early cringe-worthy commit messages, through eighty-six versions of Hugo, and up until last week, a less-than-streamlined multi-app continuous integration and deployment (CI/CD) workflow.
If you know me at all, you know I love to automate things. I&amp;rsquo;ve been using a combination of AWS Lambda, Netlify, and Travis CI to automatically build and publish this site.</description></item><item><title>How to quickly batch resize, compress, and convert images with a Bash one-liner</title><link>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</link><pubDate>Mon, 14 Oct 2019 08:27:49 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</guid><description>Part of my Hugo site continuous deployment workflow is the processing of 210 images, at time of writing.
Here&amp;rsquo;s my one-liner:
find public/ -not -path &amp;#34;*/static/*&amp;#34; \( -name &amp;#39;*.png&amp;#39; -o -name &amp;#39;*.jpg&amp;#39; -o -name &amp;#39;*.jpeg&amp;#39; \) -print0 | xargs -0 -P8 -n2 mogrify -strip -thumbnail &amp;#39;1000&amp;gt;&amp;#39; -format jpg I use find to target only certain image file formats in certain directories. With mogrify, part of ImageMagick, I resize only the images that are larger than a certain dimension, compress them, and strip the metadata.</description></item><item><title>Two ways to deploy a public GitHub Pages site from a private Hugo repository</title><link>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</link><pubDate>Mon, 22 Apr 2019 10:05:15 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</guid><description>Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.
I&amp;rsquo;ve used Hugo to build my site for years, but until this past week I&amp;rsquo;d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place - and if you&amp;rsquo;re using GitHub Pages with the free version of GitHub, that place is public.</description></item><item><title>Batch renaming images, including image resolution, with awk</title><link>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</link><pubDate>Mon, 20 Nov 2017 13:59:30 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</guid><description>The most recent item on my list of &amp;ldquo;Geeky things I did that made me feel pretty awesome&amp;rdquo; is an hour&amp;rsquo;s adventure that culminated in this code:
$ file IMG* | awk &amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39; | while read fn fr; do echo $(rename -v &amp;#34;s/$fn/img_$fr/g&amp;#34; *); done IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg IMG_20170808_173450_971.</description></item></channel></rss>