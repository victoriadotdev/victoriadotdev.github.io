<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cybersecurity on victoria.dev</title><link>https://victoria.dev/tags/cybersecurity/</link><description>Recent content in Cybersecurity on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Mon, 09 Sep 2019 09:10:11 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/cybersecurity/index.xml" rel="self" type="application/rss+xml"/><item><title>Hackers are Googling your plain text passwords: preventing sensitive data exposure</title><link>https://victoria.dev/verbose/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</link><pubDate>Mon, 09 Sep 2019 09:10:11 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</guid><description>Why sensitive data controls need to be established long before you think you needÂ them, as demonstrated by Google dorking.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" width="640" height="454"/>
&lt;p&gt;Last week, I wrote about &lt;a href=&#34;https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/&#34;&gt;the importance of properly handling user input&lt;/a&gt; in our websites and applications. I alluded to an overarching security lesson that I hope to make explicit today: the security of our software, application, and customer data is built from the ground up, long before the product goes live.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&#34;&gt;OWASP Top 10&lt;/a&gt; is a comprehensive guide to web application security risks. It is relied upon by technology professionals, corporations, and those interested in cybersecurity or information security. The most recent publication lists Sensitive Data Exposure as the third most critical web application security risk. Here&amp;rsquo;s how the risk is described:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;Sensitive Data Exposure&amp;rdquo; is a sort of catch-all category for leaked data resulting from many sources, ranging from weak cryptographic algorithms to unenforced encryption. The simplest source of this security risk, however, takes far fewer syllables to describe: people.&lt;/p&gt;
&lt;p&gt;The phrase &amp;ldquo;an ounce of prevention is worth a pound of cure,&amp;rdquo; applies to medicine as well as secure software development. In the world of the latter, this is referred to as &amp;ldquo;pushing left,&amp;rdquo; a rather unintuitive term for establishing security best practices earlier, rather than later, in the software development life cycle (SDLC). Establishing procedures &amp;ldquo;to the left&amp;rdquo; of the SDLC can help ensure that the people involved in creating a software product are properly taking care of sensitive data from day one.&lt;/p&gt;
&lt;p&gt;Unfortunately, a good amount of security testing often seems to occur much farther to the right side of the SDLC; too late for some security issues, such as sensitive data leakage, to be prevented.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m one of the authors contributing to the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt; and recently expanded a section on search engine discovery reconnaissance, or what the kids these days call &amp;ldquo;Google dorking.&amp;rdquo; This is one method, and arguably the most accessible method, by which a security tester (or black hat hacker) could find exposed sensitive data on the Internet. Here&amp;rsquo;s an excerpt from that section (currently a work in progress on GitHub, to be released in v5):&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;search-operators&#34;&gt;Search Operators&lt;/h3&gt;
&lt;p&gt;A search operator is a special keyword that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of &lt;code&gt;operator:query&lt;/code&gt;. Here are some commonly supported search operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:&lt;/code&gt; will limit the search to the provided URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inurl:&lt;/code&gt; will only return results that include the keyword in the URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intitle:&lt;/code&gt; will only return results that have the keyword in the page title.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intext:&lt;/code&gt; or &lt;code&gt;inbody:&lt;/code&gt; will only search for the keyword in the body of pages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filetype:&lt;/code&gt; will match only a specific filetype, i.e. png, or php.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;site:owasp.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;google-hacking-or-dorking&#34;&gt;Google Hacking, or Dorking&lt;/h3&gt;
&lt;p&gt;Searching with operators can be a very effective discovery reconnaissance technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_hacking&#34;&gt;Google hacking&lt;/a&gt; or Google dorking, is also possible using other search engines, as long as the search operators are supported.&lt;/p&gt;
&lt;p&gt;A database of dorks, such as &lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;Google Hacking Database&lt;/a&gt;, is a useful resource that can help uncover specific information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regularly reviewing search engine results can be a fruitful task for security testers. However, when a search for &lt;code&gt;site:myapp.com passwords&lt;/code&gt; turns up no results, it may still be a little too early to break for lunch. Here are a couple other places a security tester might like to look for sensitive data exposed in the wild.&lt;/p&gt;
&lt;h2 id=&#34;pastebin&#34;&gt;Pastebin&lt;/h2&gt;
&lt;p&gt;The self-declared &amp;ldquo;#1 paste tool since 2002,&amp;rdquo; &lt;a href=&#34;https://pastebin.com&#34;&gt;Pastebin&lt;/a&gt; allows users to temporarily store any kind of text. It&amp;rsquo;s mostly used for sharing information with others, or retrieving your own &amp;ldquo;paste&amp;rdquo; on another machine, perhaps in another location. Pastebin makes it easy to share large amounts of complicated text, like error logs, source code, configuration files, tokens, api keys&amp;hellip; what&amp;rsquo;s that? Oh, yes, it&amp;rsquo;s public by default.&lt;/p&gt;
&lt;p&gt;Here are some screenshots of a little dorking I did for a public bug bounty program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_apikey.png#screenshot&#34; alt=&#34;A screenshot of exposed api key in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;API keys in plain view.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_pass.png#screenshot&#34; alt=&#34;A screenshot of exposed username and password in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Log-in details out in the open.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Thanks in part to the convenience of using Pastebin and similar websites, it would appear that some people fail to think twice before making sensitive data publicly available.&lt;/p&gt;
&lt;h3 id=&#34;but-why&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Granted, non-technical employees with access to the application may not have an understanding of which items should or should not be freely shared. Someone unfamiliar with what encrypted data is or what it looks like may not realize the difference between an encrypted string and an unencrypted token made up of many random letters and numbers. Even technical staff can miss things, make mistakes, or act carelessly after a hard day at work. It may be easy to call this a training problem and move on; however, none of these rationalizations address the root cause of the issue.&lt;/p&gt;
&lt;p&gt;When people turn to outside solutions for an issue they face, it&amp;rsquo;s usually because they haven&amp;rsquo;t been provided with an equally-appealing internal solution, or are unaware that one exists. Employees using pastes to share or move sensitive data do so because they don&amp;rsquo;t have an easier, more convenient, and secure internal solution to use instead.&lt;/p&gt;
&lt;h3 id=&#34;mitigation&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Everyone involved in the creation and maintenance of a web application should be briefed on a few basic things in regards to sensitive data protection:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what constitutes sensitive data,&lt;/li&gt;
&lt;li&gt;the difference between plain text and encrypted data, and&lt;/li&gt;
&lt;li&gt;how to properly transmit and store sensitive data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When it comes to third-party services, ensure people are aware that some transmission may not be encrypted, or may be publicly searchable. If there is no system currently in place for safely sharing and storing sensitive data internally, this is a good place to start. The security of application data is in the hands of everyone on the team, from administrative staff to C-level executives. Ensure people have the tools they need to work securely.&lt;/p&gt;
&lt;h2 id=&#34;public-repositories&#34;&gt;Public repositories&lt;/h2&gt;
&lt;p&gt;Developers are notorious for leaving sensitive information hanging out where it doesn&amp;rsquo;t belong (yes, I&amp;rsquo;ve done it too!). Without a strong push-left approach in place for handling tokens, secrets, and keys, these little gems can end up in full public view on sites like GitHub, GitLab, and Bitbucket (to name a few). &lt;a href=&#34;https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf&#34;&gt;A 2019 study&lt;/a&gt; found that thousands of new, unique secrets are leaked every day on GitHub alone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github_tok.png#screenshot&#34; alt=&#34;A screenshot of a Google search for tokens on GitHub&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub has implemented measures like &lt;a href=&#34;https://github.blog/2018-10-17-behind-the-scenes-of-github-token-scanning/&#34;&gt;token scanning&lt;/a&gt;, and GitLab 11.9 &lt;a href=&#34;https://about.gitlab.com/2019/03/22/gitlab-11-9-released/&#34;&gt;introduced secret detection&lt;/a&gt;. While these tools aim to reduce the chances that a secret might accidentally be committed, to put it bluntly, it&amp;rsquo;s really not their job. Secret scanning won&amp;rsquo;t stop developers from committing the data in the first place.&lt;/p&gt;
&lt;h3 id=&#34;but-why-1&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Without an obvious process in place for managing secrets, developers may tend too much towards their innate sense of just-get-it-done-ness. Sometimes this leads to the expedient but irresponsible practice of storing keys as unencrypted variables within the program, perhaps with the intention of it being temporary. Nonetheless, these variables inevitably fall from front of mind and end up in a commit.&lt;/p&gt;
&lt;h3 id=&#34;mitigation-1&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Having a strong push-left culture means ensuring that sensitive data is properly stored and can be securely retrieved long before anyone is ready to make a commit. Tools and strategies for doing so are readily available for those who seek them. Here are some examples of tools that can support a push-left approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a management tool to store and control access to keys and secrets, such as &lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;Amazon Key Management Service&lt;/a&gt; or Microsoft&amp;rsquo;s &lt;a href=&#34;https://azure.microsoft.com/en-us/services/key-vault/&#34;&gt;Azure Key Vault&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make use of encrypted environment variables in CI tools, such as &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#environment-variables&#34;&gt;Netlify&amp;rsquo;s environment variables&lt;/a&gt; or &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables&#34;&gt;virtual environments in GitHub Actions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Craft a robust &lt;code&gt;.gitignore&lt;/code&gt; file that everyone on the team can contribute to and use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also need not rely entirely on the public repository to catch those mistakes that may still slip through. It&amp;rsquo;s possible to set up Git pre-commit hooks that scan for committed secrets using &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;. There are some open-source programs available for this, such as &lt;a href=&#34;https://github.com/thoughtworks/talisman&#34;&gt;Talisman from ThoughtWorks&lt;/a&gt; and &lt;a href=&#34;https://github.com/awslabs/git-secrets&#34;&gt;git-secrets from AWS Labs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;pushing-left-to-prevent-sensitive-data-exposure&#34;&gt;Pushing left to prevent sensitive data exposure&lt;/h2&gt;
&lt;p&gt;A little perspective can go a long way in demonstrating why it&amp;rsquo;s important to begin managing sensitive data even before any sensitive data exists. By establishing security best practices on the left of the SDLC, we give our people the best chance to increase the odds that any future dorking on our software product looks more like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;no_results.png#screenshot&#34; alt=&#34;No results found in Google Search&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another great resource for checking up on the security of our data is Troy Hunt&amp;rsquo;s &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;Have I Been Pwned&lt;/a&gt;, a service that compares your data (such as your email) to data that has been leaked in previous data breaches.&lt;/p&gt;
&lt;p&gt;To learn about more ways we can be proactive with our application security, the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Proactive_Controls&#34;&gt;OWASP Proactive Controls&lt;/a&gt; publication is a great resource. There&amp;rsquo;s also more about creating a push-left approach to security in the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt;. If these topics interest you, I encourage you to read, learn, and contribute so more people will make it harder for sensitive data to be found.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>SQL injection and XSS: what white hat hackers know about trusting user input</title><link>https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</link><pubDate>Mon, 02 Sep 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</guid><description>A primer on SQL injection and cross site scripting, and how to handle user input in software development.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" width="640" height="374"/>
&lt;p&gt;Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: &lt;em&gt;What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?&lt;/em&gt; Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &amp;ldquo;Urgent&amp;rdquo; column: how will our product be secured?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&amp;rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is &lt;em&gt;you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &amp;ldquo;white hat&amp;rdquo; hacker, and sometimes just &amp;ldquo;hacker,&amp;rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &amp;ldquo;black hat&amp;rdquo; hacker, also called a &amp;ldquo;cracker,&amp;rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&amp;rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.&lt;/p&gt;
&lt;p&gt;When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&amp;rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Main_Page&#34;&gt;Open Web Application Security Project&lt;/a&gt; guides&lt;/li&gt;
&lt;li&gt;The Hacker101 playlist from &lt;a href=&#34;https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/&#34;&gt;HackerOne&amp;rsquo;s YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/web-hacking-101&#34;&gt;Web Hacking 101&lt;/a&gt; by Peter Yaworski&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brutelogic.com.br/blog/&#34;&gt;Brute Logic&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&#34;&gt;Computerphile&lt;/a&gt; YouTube channel&lt;/li&gt;
&lt;li&gt;Videos featuring Jason Haddix (&lt;a href=&#34;https://github.com/jhaddix/&#34;&gt;@jhaddix&lt;/a&gt;) and Tom Hudson (&lt;a href=&#34;https://github.com/tomnomnom/&#34;&gt;@tomnomnom&lt;/a&gt;) (two accomplished ethical hackers with different, but both effective, methodologies)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be familiar with the catchphrase, &amp;ldquo;sanitize your inputs!&amp;rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&amp;rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&amp;rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-attacks&#34;&gt;SQL injection attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great &lt;a href=&#34;https://www.youtube.com/watch?v=_jKylhJtPmI&#34;&gt;explain-like-I&amp;rsquo;m-five video on SQLi&lt;/a&gt;. You may already know of this attack from &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;xkcd&amp;rsquo;s Little Bobby Tables&lt;/a&gt;. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sqli.png#center&#34; alt=&#34;A monitor with an SQL Select command that gets all your base&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;You have no chance to survive make your time.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;You can test your own site to see if you&amp;rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&amp;rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39; OR 1=&#39;1&lt;/code&gt; evaluates to a constant true, and when successful, returns all rows in the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; AND 0=&#39;1&lt;/code&gt; evaluates to a constant false, and when successful, returns no rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ciNHn38EyRc&#34;&gt;This video demonstrates the above tests&lt;/a&gt;, and does a great job of showing how impactful an SQL injection attack can be.&lt;/p&gt;
&lt;p&gt;Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&amp;rsquo;t trust user input.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-mitigation&#34;&gt;SQL injection mitigation&lt;/h2&gt;
&lt;p&gt;In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.&lt;/p&gt;
&lt;p&gt;Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;Object-Relational Mapping&lt;/a&gt;, or ORM, with its use of &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/queries/&#34;&gt;QuerySets&lt;/a&gt;. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.&lt;/p&gt;
&lt;p&gt;Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepared statements with variable binding (or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&#34;&gt;parameterized queries&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures&#34;&gt;Stored procedures&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation&#34;&gt;Whitelisting&lt;/a&gt; or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input&#34;&gt;escaping&lt;/a&gt; user input.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.&lt;/p&gt;
&lt;p&gt;The battle, however, is only half won&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;cross-site-scripting-xss-attacks&#34;&gt;Cross Site Scripting (XSS) attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&amp;rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;Cross Site Scripting&lt;/a&gt; attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&amp;rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing. &lt;a href=&#34;https://blogs.apache.org/infra/entry/apache_org_04_09_2010&#34;&gt;This incident report from Apache in 2010&lt;/a&gt; is a good example of how XSS can be chained in a larger attack to take over accounts and machines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;xss.png&#34; alt=&#34;An HTML dance party with a little JS cutting in&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;The annual DOM dance-off receives an unexpected guest);&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34;&gt;Document Object Model&lt;/a&gt;) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.&lt;/p&gt;
&lt;h3 id=&#34;dom-based-xss&#34;&gt;DOM based XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/DOM_Based_XSS&#34;&gt;DOM based XSS&lt;/a&gt; occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in &lt;a href=&#34;https://www.owasp.org/index.php/Phishing&#34;&gt;phishing emails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called &lt;code&gt;xss-test.html&lt;/code&gt; (or whatever you like) with the following HTML and JavaScript code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My XSS Example&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello there!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;greeting&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This web page will display the title &amp;ldquo;Hello there!&amp;rdquo; unless it receives a &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_string&#34;&gt;URL parameter from a query string&lt;/a&gt; with a value for &lt;code&gt;name&lt;/code&gt;. To see the script work, open the page in a browser with an appended URL parameter, like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file:///path/to/file/xss-test.html?name=Victoria&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for &lt;code&gt;name&lt;/code&gt; and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the &lt;code&gt;name&lt;/code&gt; parameter to, say, &lt;code&gt;&amp;lt;img+src+onerror=alert(&amp;quot;pwned&amp;quot;)&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pwned.png#screenshot&#34; alt=&#34;A screenshot of the XSS page example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is just one example, largely based on one from &lt;a href=&#34;https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/&#34;&gt;Brute&amp;rsquo;s post&lt;/a&gt;, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.&lt;/p&gt;
&lt;h3 id=&#34;stored-and-reflected-xss&#34;&gt;Stored and reflected XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)&#34;&gt;Stored XSS&lt;/a&gt; occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &amp;ldquo;About Me&amp;rdquo; section. The script, improperly stored on the site&amp;rsquo;s server, would successfully execute at a later time when another user views the attacker&amp;rsquo;s profile.&lt;/p&gt;
&lt;p&gt;One of the most famous examples of this is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Samy_(computer_worm)&#34;&gt;Samy worm&lt;/a&gt; that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&amp;rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)&#34;&gt;Reflected XSS&lt;/a&gt; similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&amp;rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.&lt;/p&gt;
&lt;h2 id=&#34;xss-attack-mitigation&#34;&gt;XSS attack mitigation&lt;/h2&gt;
&lt;p&gt;In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.&lt;/p&gt;
&lt;h3 id=&#34;validating-form-fields&#34;&gt;Validating form fields&lt;/h3&gt;
&lt;p&gt;Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes&#34;&gt;Django&amp;rsquo;s built-in &lt;code&gt;Field&lt;/code&gt; classes&lt;/a&gt;, which provide fields that validate to some commonly used types and also specify sane defaults. Django&amp;rsquo;s &lt;code&gt;EmailField&lt;/code&gt;, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&amp;rsquo;t imitate the common format of an email address, then Django won&amp;rsquo;t consider the field valid and the form will not be submitted.&lt;/p&gt;
&lt;p&gt;If relying on a framework isn&amp;rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_conversion&#34;&gt;type conversion&lt;/a&gt;, for example, ensuring that a number is of type &lt;code&gt;int()&lt;/code&gt;; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully, we needn&amp;rsquo;t start from scratch. Open source resources are available to help, such as the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&#34;&gt;OWASP Validation Regex Repository&lt;/a&gt;, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find &lt;a href=&#34;https://github.com/search?q=validation+library&#34;&gt;plenty of these on GitHub&lt;/a&gt;. Additionally, the &lt;a href=&#34;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&#34;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt; has a couple suggestions for test payloads we can use to test our existing applications.&lt;/p&gt;
&lt;p&gt;While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.&lt;/p&gt;
&lt;h3 id=&#34;avoiding-direct-injection&#34;&gt;Avoiding direct injection&lt;/h3&gt;
&lt;p&gt;Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does data flow through our application?&lt;/li&gt;
&lt;li&gt;What does a user expect to happen when they interact with this input?&lt;/li&gt;
&lt;li&gt;Where on our page does data appear? Does it become embedded in a string or an attribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of &lt;a href=&#34;https://www.hacker101.com/&#34;&gt;Hacker101&lt;/a&gt;. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;test&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;+alert(1)+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;onmouserover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&amp;quot;onmouseover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using &lt;code&gt;innerText&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.&lt;/p&gt;
&lt;h2 id=&#34;pay-attention-to-your-inputs&#34;&gt;Pay attention to your inputs&lt;/h2&gt;
&lt;p&gt;Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&amp;rsquo;s like installing deadbolts on all the doors, but leaving a window open!&lt;/p&gt;
&lt;p&gt;By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&amp;rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&amp;rsquo;s flow, follow the data, and pay attention to our inputs.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to set up OpenVPN on AWS EC2 and fix DNS leaks on Ubuntu 18.04 LTS</title><link>https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</link><pubDate>Mon, 26 Aug 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</guid><description>A guide for setting up your own private VPN service, and understanding and fixing a DNS leak.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/1-subscribe_hu68a3a904d7b732bc9406197bded259ae_170219_640x0_resize_q75_box.jpg" width="640" height="428"/>
&lt;p&gt;While rolling your own Virtual Private Network (VPN) is far more complicated than choosing a VPN provider from someone&amp;rsquo;s &amp;ldquo;best VPN 2019&amp;rdquo; list, the more I learn about why someone should use a VPN at all, the less appealing the latter option becomes. Besides the dangers of trusting a fake VPN app or falling victim to a lookalike URL, even &lt;em&gt;legit&lt;/em&gt; VPN service providers have pressures and motivations that may not be aligned with the privacy you hope to be purchasing.&lt;/p&gt;
&lt;p&gt;Usually, the point of using a VPN is to gain a layer of privacy by disguising your location. If you aren&amp;rsquo;t currently using one, you can see what the Internet knows about where you are at &lt;a href=&#34;https://dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;. You&amp;rsquo;ll see a big hello, your IP address, and your location. If that&amp;rsquo;s a little unsettling, know that a VPN can help to shield your location and online activities from wandering eyes and opportunistic advertisers. The former might be a too-curious or even malicious public-WiFi-cafe-goer, but the latter, counterintuitively, might be your own household Internet Service Provider (ISP).&lt;/p&gt;
&lt;p&gt;Using a VPN means that the Internet can&amp;rsquo;t easily see your location, and your ISP can&amp;rsquo;t see your unencrypted web traffic (and neither can your curious coffee shop neighbor). Your ISP &lt;em&gt;can&lt;/em&gt; see the amount of data you&amp;rsquo;re sending, in its encrypted form, and that you&amp;rsquo;re sending it to your VPN server - but that&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;Unless you have a &lt;a href=&#34;https://dnsleaktest.com/what-is-a-dns-leak.html&#34;&gt;DNS leak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are still using your ISP&amp;rsquo;s DNS server, they are still able to see all the URLs the server is resolving for you. So they&amp;rsquo;ll know you asked for &lt;code&gt;lastminutebackwax.com&lt;/code&gt;, although they won&amp;rsquo;t be able to decrypt the data that was exchanged with the site. (Is it just me, or does that seem even worse, somehow?)&lt;/p&gt;
&lt;p&gt;Setting up your own instance and VPN service offers some peace of mind over trusting yet another company to do right with your data. Note that a VPN will &lt;em&gt;not&lt;/em&gt; give you complete online anonymity; there are many other ways your Internet presence can be tracked and your location discovered. However, if properly set up, without DNS leaks, you&amp;rsquo;ll have about as much Internet privacy as can be afforded without using &lt;a href=&#34;https://en.wikipedia.org/wiki/Tor_(anonymity_network)&#34;&gt;Tor&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-our-vpn&#34;&gt;Setting up our VPN&lt;/h1&gt;
&lt;p&gt;This post will cover how to set up the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE/&#34;&gt;OpenVPN Access Server&lt;/a&gt; product on AWS Marketplace, running on an &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2 instance&lt;/a&gt;. Then, we&amp;rsquo;ll look at how to fix a &lt;a href=&#34;https://gitlab.gnome.org/GNOME/NetworkManager-openvpn/issues/10&#34;&gt;known NetworkManager bug in Ubuntu 18.04 that might cause DNS leaks&lt;/a&gt;. The whole process should take about fifteen minutes, so grab a â and let&amp;rsquo;s do some adulting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: IDs and IP addresses shown for demonstration in this tutorial are invalid.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-launch-the-openvpn-access-server-on-aws-marketplace&#34;&gt;1. Launch the OpenVPN Access Server on AWS Marketplace&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt; is available on AWS Marketplace. The Bring Your Own License (BYOL) model doesn&amp;rsquo;t actually require a license for up to two connected devices; to connect more clients, you can get &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile/ref=srh_res_product_vendor?ie=UTF8&amp;amp;id=aac3a8a3-2823-483c-b5aa-60022894b89d&#34;&gt;bundled billing&lt;/a&gt; for five, ten, or twenty-five clients, or &lt;a href=&#34;https://openvpn.net/pricing/&#34;&gt;purchase a minimum of ten OpenVPN licenses a la carte&lt;/a&gt; for $15/device/year. For most of us, the two free connected devices will suffice; and if using an EC2 Micro instance, our set up will be &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS Free Tier eligible&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Start by clicking &amp;ldquo;Continue to Subscribe&amp;rdquo; for the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt;, which will bring you to a page that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1-subscribe.jpg#screenshot&#34; alt=&#34;Subscription details page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue to Configuration.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2-configure.jpg#screenshot&#34; alt=&#34;Configure this software page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the EC2 instance type in the right side bar (and consequently, the Monthly Estimate) isn&amp;rsquo;t the one we want - that&amp;rsquo;s okay, we can change it soon. Just ensure that the &amp;ldquo;Region&amp;rdquo; chosen is where we want the instance to be located. Generally, the closer it is to the physical location of your client (your laptop, in this case), the faster your VPN will be. Click &amp;ldquo;Continue to Launch.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3-launch.jpg#screenshot&#34; alt=&#34;Launch this software page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On this page, we&amp;rsquo;ll change three things:&lt;/p&gt;
&lt;h3 id=&#34;1-the-ec2-instance-type&#34;&gt;1. The EC2 Instance type&lt;/h3&gt;
&lt;p&gt;Different types of EC2 (Elastic Compute Cloud) instances will offer us different levels of computing power. If you plan to use your instance for something more than just this VPN, you may want to choose something with higher memory or storage capacity, depending on how you plan to use it. We can view each instance offering on the &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/&#34;&gt;Amazon EC2 Instance Types page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For simple VPN use, the &lt;code&gt;t2.nano&lt;/code&gt; or &lt;code&gt;t2.micro&lt;/code&gt; instances are likely sufficient. Only the Micro instance is Free Tier eligible.&lt;/p&gt;
&lt;h3 id=&#34;2-the-security-group-settings&#34;&gt;2. The Security Group settings&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&#34;&gt;Security Group&lt;/a&gt; is a profile, or collection of settings, that Amazon uses to control access to our instance. If you&amp;rsquo;ve set up other AWS products before, you may already have some groups with their own rules defined. We should be careful to understand the reasons for our Security Group settings, as these define how public or private our instance is, and consequently, who has access to it.&lt;/p&gt;
&lt;p&gt;If we click &amp;ldquo;Create New Based on Seller Settings,&amp;rdquo; the OpenVPN server defines some recommended settings for a default Security Group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4-security-group.jpg#screenshot&#34; alt=&#34;Security group settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The default recommended settings are all &lt;code&gt;0.0.0.0/0&lt;/code&gt; for TCP ports 22, 943, 443, and 945, and UDP port 1194. OpenVPN offers an &lt;a href=&#34;https://openvpn.net/vpn-server-resources/amazon-web-services-ec2-byol-appliance-quick-start-guide/#Instance_Launch_Options&#34;&gt;explanation of how the ports are used&lt;/a&gt; on their website. With the default settings, all these ports are left open to support various features of the OpenVPN server. We may wish to restrict access to these ports to a specific IP address or block of addresses (like that of your own ISP) to increase the security of our instance. However, if your IP address frequently changes (like when you travel and connect to a different WiFi network), restricting the ports may not be as helpful as we hope.&lt;/p&gt;
&lt;p&gt;In any case, our instance will require SSH keys to connect to, and the OpenVPN server will be password protected. Unless you have other specific security goals, it&amp;rsquo;s fine to accept the default settings for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give the Security Group a name and brief description, so we know what it&amp;rsquo;s for. Then click &amp;ldquo;Save.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;3-the-key-pair-settings&#34;&gt;3. The Key Pair settings&lt;/h3&gt;
&lt;p&gt;The aforementioned SSH keys are access credentials that we&amp;rsquo;ll use to connect to our instance. We can &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair&#34;&gt;create a key pair&lt;/a&gt; in this section, or you can choose a key pair you may already be using with AWS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5-keys.jpg#screenshot&#34; alt=&#34;Key Pair Settings link&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To create a new set of access credentials, click &amp;ldquo;Create a key pair in EC2&amp;rdquo; to open a new window. Then, click the &amp;ldquo;Create Key Pair&amp;rdquo; blue button. Once you give your key pair a name, it will be created and the private key will automatically download to your machine. It&amp;rsquo;s a file ending with the extension &lt;code&gt;.pem&lt;/code&gt;. Store this key in a secure place on your computer. We&amp;rsquo;ll need to refer to it when we connect to our new EC2 instance.&lt;/p&gt;
&lt;p&gt;We can return to the previous window to select the key pair we just created. If it doesn&amp;rsquo;t show up, hit the little &amp;ldquo;refresh&amp;rdquo; icon next to the drop-down. Once it&amp;rsquo;s selected, hit the shiny yellow &amp;ldquo;Launch&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;We should see a message like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;6-launched.jpg#screenshot&#34; alt=&#34;Launch success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great stuff! Now that our instance exists, let&amp;rsquo;s make sure we can access it and start up our VPN. For a shortcut to the next step, click on the &amp;ldquo;EC2 Console&amp;rdquo; link in the success message.&lt;/p&gt;
&lt;h2 id=&#34;2-associate-an-elastic-ip&#34;&gt;2. Associate an Elastic IP&lt;/h2&gt;
&lt;p&gt;Amazon&amp;rsquo;s &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&#34;&gt;Elastic IP Addresses&lt;/a&gt; provides us with a public IPv4 address controlled by our account, unlike the public IP address tied to our EC2 instance. It&amp;rsquo;s considered a best practice to create one and associate it with our VPN instance. If anything should go wrong with our instance, or if we want to use a new instance for our VPN in the future, the Elastic IP can be disassociated from the current instance and reassociated with our new one. This makes the transition seamless for our connected clients. Think of the Elastic IP like a web domain address that we register - we can point it at whatever we choose.&lt;/p&gt;
&lt;p&gt;We can create a new Elastic IP address on the &lt;a href=&#34;https://console.aws.amazon.com/ec2/&#34;&gt;Amazon EC2 Console&lt;/a&gt;. If you clicked the link from the success message above, we&amp;rsquo;re already there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;7-ec2.jpg#screenshot&#34; alt=&#34;EC2 console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you have more than one instance, take note of the Instance ID of the one we&amp;rsquo;ve just launched.&lt;/p&gt;
&lt;p&gt;In the left sidebar under &amp;ldquo;Network &amp;amp; Security,&amp;rdquo; choose &amp;ldquo;Elastic IPs.&amp;rdquo; Then click the blue &amp;ldquo;Allocate new address&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;8-elasticip.jpg#screenshot&#34; alt=&#34;Allocate new address page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Choose &amp;ldquo;Amazon Pool,&amp;rdquo; then click &amp;ldquo;Allocate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;9-elasticip.jpg#screenshot&#34; alt=&#34;Allocate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! We can click &amp;ldquo;Close&amp;rdquo; to return to the Elastic IP console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;10-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have an Elastic IP, let&amp;rsquo;s associate it with our instance. Select the IP address, then click &amp;ldquo;Actions,&amp;rdquo; and choose &amp;ldquo;Associate address.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;11-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP with instance&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ensure the &amp;ldquo;Instance&amp;rdquo; option is selected, then click the drop-down menu. We should see our EC2 instance ID there. Select it, then click &amp;ldquo;Associate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;12-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! Now that we&amp;rsquo;ll be able to access our VPN instance, let&amp;rsquo;s get our VPN service up and running.&lt;/p&gt;
&lt;h2 id=&#34;3-initialize-openvpn-on-the-ec2-server&#34;&gt;3. Initialize OpenVPN on the EC2 server&lt;/h2&gt;
&lt;p&gt;First, we&amp;rsquo;ll need to connect to the EC2 instance via our terminal. We&amp;rsquo;ll use the private key we created earlier.&lt;/p&gt;
&lt;p&gt;Open a new terminal window and navigate to the directory containing the private key &lt;code&gt;.pem&lt;/code&gt; file. We&amp;rsquo;ll need to set its permissions with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo chmod &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; &amp;lt;name&amp;gt;.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to substitute &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; with the name of your key.&lt;/p&gt;
&lt;p&gt;This sets the file permissions to &lt;code&gt;-r--------&lt;/code&gt; so that it can only be read by the user (you). It may help to protect the private key from read and write operations by other users, but more pertinently, will prevent AWS from throwing an error when we try to connect to our instance.&lt;/p&gt;
&lt;p&gt;We can now do just that by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -i &amp;lt;name&amp;gt;.pem openvpnas@&amp;lt;elastic ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user &lt;code&gt;openvpnas&lt;/code&gt; is set up by the OpenVPN Access Server to allow us to connect to our instance. Replace &lt;code&gt;&amp;lt;elastic ip&amp;gt;&lt;/code&gt; with the Elastic IP address we just associated.&lt;/p&gt;
&lt;p&gt;We may get a message saying that the authenticity of our host can&amp;rsquo;t be established. As long as we&amp;rsquo;ve typed the Elastic IP correctly, we can go ahead and answer &amp;ldquo;yes&amp;rdquo; to the prompt.&lt;/p&gt;
&lt;p&gt;Upon the initial connection to the OpenVPN instance, a set up wizard called &amp;ldquo;Initial Configuration Tool&amp;rdquo; should automatically run. (If, for some reason, it doesn&amp;rsquo;t, or you panic-mashed a button, we can restart it with &lt;code&gt;sudo ovpn-init âec2&lt;/code&gt;.) We&amp;rsquo;ll be asked to accept the agreement, then the wizard will help to walk us through some configuration settings for our VPN server.&lt;/p&gt;
&lt;p&gt;You may generally accept the default settings, however, there are a couple questions you may like to answer knowledgeably. They are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Should client traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; Answering &amp;ldquo;yes&amp;rdquo; to this option can prevent &lt;a href=&#34;https://en.wikipedia.org/wiki/Split_tunneling&#34;&gt;split tunneling&lt;/a&gt;, a situation in which you may bypass the VPN when connected to WiFi networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should client DNS traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; This setting can help prevent DNS leaks by specifying that DNS requests should be handled by the VPN. If you answer &amp;ldquo;yes&amp;rdquo; to the previous question, it will be enabled regardless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When asked for our &amp;ldquo;OpenVPN-AS license key&amp;rdquo;, we can leave it blank to use the VPN with up to two clients. If you&amp;rsquo;ve purchased a key, enter it here.&lt;/p&gt;
&lt;p&gt;Once the configuration wizard finishes running, we should see the message &amp;ldquo;Initial Configuration Complete!&amp;rdquo; Before we move on, we should set a password for our server&amp;rsquo;s administration account. To do this, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo passwd openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enter your chosen password twice. Now we&amp;rsquo;re ready to get connected!&lt;/p&gt;
&lt;p&gt;To close the ssh connection, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-connect-the-client-to-the-vpn&#34;&gt;4. Connect the client to the VPN&lt;/h2&gt;
&lt;p&gt;To connect our client (in this case, our laptop) to the VPN and start reaping the benefits, we&amp;rsquo;ll need to do two things; first, obtain our connection profile; second, install the &lt;code&gt;openvpn&lt;/code&gt; daemon.&lt;/p&gt;
&lt;h3 id=&#34;1-get-your-ovpn-connection-profile&#34;&gt;1. Get your &lt;code&gt;.ovpn&lt;/code&gt; connection profile&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll need to download a connection profile for ourselves; this is like a personal configuration file with information, including keys, that the VPN server will need to allow our connection. We can do this by logging in with the password we just set at our Elastic IP address, port 943. This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://&amp;lt;elastic ip&amp;gt;:943/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;https&lt;/code&gt; part is important; without it, the instance won&amp;rsquo;t send any data.&lt;/p&gt;
&lt;p&gt;When we go to this URL, we may see a page warning us that this site&amp;rsquo;s certificate issuer is unknown or invalid. As long as we&amp;rsquo;ve typed our Elastic IP correctly, it&amp;rsquo;s safe to proceed. If you&amp;rsquo;re using Firefox, click &amp;ldquo;Advanced,&amp;rdquo; and then &amp;ldquo;Accept the Risk and Continue.&amp;rdquo; In Chrome, click &amp;ldquo;Advanced,&amp;rdquo; then &amp;ldquo;Proceed to &amp;hellip;&amp;rdquo; the elastic IP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;13-warning.jpg#screenshot&#34; alt=&#34;Security warning page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Log in with the username &lt;code&gt;openvpn&lt;/code&gt; and the password we just set. We&amp;rsquo;ll now be presented with a link to download our user-locked connection profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;14-profile.jpg#screenshot&#34; alt=&#34;Connection profile download page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we click the link, a file named &lt;code&gt;client.ovpn&lt;/code&gt; will download.&lt;/p&gt;
&lt;h3 id=&#34;2-install-and-start-openvpn-on-your-ubuntu-18-04-client&#34;&gt;2. Install and start &lt;code&gt;openvpn&lt;/code&gt; on your Ubuntu 18.04 client&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;openvpn&lt;/code&gt; daemon will allow our client to connect to our VPN server. It can be installed through the default Ubuntu repositories. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for OpenVPN to automatically start when we boot up our computer, we&amp;rsquo;ll need to rename and move the connection profile file. I suggest using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;symlink&lt;/a&gt; to accomplish this, as it leaves our original file more easily accessible for editing, and allows us to store it in any directory we choose. We can create a symlink by running this command in the directory where our file is located:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ln -s client.ovpn /etc/openvpn/&amp;lt;name&amp;gt;.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a symbolic link for the connection profile in the appropriate folder for &lt;code&gt;systemd&lt;/code&gt; to find it. The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be anything. When the Linux kernel has booted, &lt;code&gt;systemd&lt;/code&gt; is used to initialize the services and daemons that the user has set up to run; one of these will now be OpenVPN. Renaming the file with the extension &lt;code&gt;.conf&lt;/code&gt; will let the &lt;code&gt;openvpn&lt;/code&gt; daemon know to use it as our connection file.&lt;/p&gt;
&lt;p&gt;For now, we can manually start and connect to OpenVPN by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo openvpn --config client.ovpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll be asked for a username and password, which will be the same credentials we used before. Once the service finishes starting up, we&amp;rsquo;ll see &amp;ldquo;Initialization Sequence Complete.&amp;rdquo; If we now visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;, we should see the Elastic IP and the location of our EC2 server. Yay!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re on a later version of Ubuntu, you may check for DNS leaks by clicking on one of the &amp;ldquo;test&amp;rdquo; buttons. If all the ISPs shown are Amazon and none are your own service provider&amp;rsquo;s, congratulations! No leaks! You can move on to &lt;a href=&#34;#3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;Step 3 in the second section&lt;/a&gt; below, after which, you&amp;rsquo;ll be finished.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using Ubuntu 18.04 LTS, however, we&amp;rsquo;re not yet done.&lt;/p&gt;
&lt;h1 id=&#34;what-a-dns-leak-looks-like&#34;&gt;What a DNS leak looks like&lt;/h1&gt;
&lt;p&gt;To see what a DNS leak looks like, click on one of the &amp;ldquo;test&amp;rdquo; buttons on the &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test page&lt;/a&gt;. When we do, we&amp;rsquo;ll see not only our Amazon.com IP addresses, but also our own ISP and location.&lt;/p&gt;
&lt;p&gt;We can also see the leak by running &lt;code&gt;systemd-resolve --status&lt;/code&gt; in our terminal. Our results will contain two lines under different interfaces that both have entries for DNS Servers. It&amp;rsquo;ll look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Link &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tun0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: DNS
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.0.2
DNS Domain: ~.
Link &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;wlp4s0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: none
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1
DNS Domain: ~.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://unix.stackexchange.com/questions/434916/how-to-fix-openvpn-dns-leak&#34;&gt;DNS leak problem in Ubuntu 18.04&lt;/a&gt; stems from Ubuntu&amp;rsquo;s DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt;, failing to properly handle our OpenVPN configuration. In order to try and be a good, efficient DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt; will send DNS lookup requests in parallel to each interface that has a DNS server configuration, and then utilizes the fastest response. In our case, we only want to use our VPN&amp;rsquo;s DNS servers. Sorry, &lt;code&gt;systemd-resolved&lt;/code&gt;. You tried.&lt;/p&gt;
&lt;h1 id=&#34;how-to-fix-openvpn-dns-leak-on-ubuntu-18-04&#34;&gt;How to fix OpenVPN DNS leak on Ubuntu 18.04&lt;/h1&gt;
&lt;p&gt;Luckily, there is a fix that we can implement. We&amp;rsquo;ll need to install a few helpers from the Ubuntu repositories, update our configuration file, then set up OpenVPN using NetworkManager. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;1-install-some-helpers&#34;&gt;1. Install some helpers&lt;/h2&gt;
&lt;p&gt;To properly integrate OpenVPN with &lt;code&gt;systemd-resolved&lt;/code&gt;, we&amp;rsquo;ll need a bit more help. In a terminal, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install -y openvpn-systemd-resolved network-manager-openvpn network-manager-openvpn-gnome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install a helper script that integrates OpenVPN and &lt;code&gt;systemd-resolved&lt;/code&gt;, a NetworkManager plugin for OpenVPN, and its GUI counterpart for GNOME desktop environment.&lt;/p&gt;
&lt;h2 id=&#34;2-add-dns-implementation-to-your-connection-profile&#34;&gt;2. Add DNS implementation to your connection profile&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need to edit the connection profile file we downloaded earlier. Since it&amp;rsquo;s symbolically linked, we can accomplish this by changing the &lt;code&gt;.ovpn&lt;/code&gt; file, wherever it&amp;rsquo;s stored. Run &lt;code&gt;vim &amp;lt;name&amp;gt;.ovpn&lt;/code&gt; to open it in Vim, then add the following lines at the bottom. Explanation in the comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Allow OpenVPN to call user-defined scripts&lt;/span&gt;
script-security &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Tell systemd-resolved to send all DNS queries over the VPN&lt;/span&gt;
dhcp-option DOMAIN-ROUTE .
&lt;span class=&#34;c1&#34;&gt;# Use the update-systemd-resolved script when TUN/TAP device is opened,&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and also run the script on restarts and before the TUN/TAP device is closed&lt;/span&gt;
up /etc/openvpn/update-systemd-resolved
up-restart
down /etc/openvpn/update-systemd-resolved
down-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full list of OpenVPN options, see &lt;a href=&#34;https://openvpn.net/community-resources/reference-manual-for-openvpn-2-1/&#34;&gt;OpenVPN Scripting and Environment Variables&lt;/a&gt;. You may also like &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;&gt;more information about TUN/TAP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;3. Set up OpenVPN as NetworkManager system connection&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the GUI to set up our VPN with NetworkManager. Open up Network Settings, which should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;15-networksettings.png#screenshot&#34; alt=&#34;Network Settings window on Ubuntu 18.04&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then click the &amp;ldquo;+&amp;rdquo; button. On the window that pops up, counterintuitively, choose &amp;ldquo;Import from file&amp;hellip;&amp;rdquo; instead of the OpenVPN option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;16-importvpn.jpg#screenshot&#34; alt=&#34;Add VPN window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Navigate to, and then select, your &lt;code&gt;.ovpn&lt;/code&gt; file. We should now see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;17-vpnsettings.png#screenshot&#34; alt=&#34;The filled VPN connection settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Add your username and password for the server (&lt;code&gt;openvpn&lt;/code&gt; and the password we set in &lt;a href=&#34;#3-initialize-openvpn-on-the-ec2-server&#34;&gt;the first section&amp;rsquo;s Step 3&lt;/a&gt;), and your user key password (the same one again, if you&amp;rsquo;ve followed this tutorial), then click the &amp;ldquo;Add&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id=&#34;4-edit-your-openvpn-networkmanager-configuration&#34;&gt;4. Edit your OpenVPN NetworkManager configuration&lt;/h2&gt;
&lt;p&gt;Nearly there! Now that we&amp;rsquo;ve added the VPN as a NetworkManager connection, we&amp;rsquo;ll need to make a quick change to it. We can see a list of NetworkManager connections by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls -la /etc/NetworkManager/system-connections/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one for our VPN is probably called &lt;code&gt;openvpn&lt;/code&gt;, so let&amp;rsquo;s edit it by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo vim /etc/NetworkManager/system-connections/openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;code&gt;[ipv4]&lt;/code&gt;, we&amp;rsquo;ll need to add the line &lt;code&gt;dns-priority=-42&lt;/code&gt;. It should end up looking like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;18-connsettings.jpg#screenshot&#34; alt=&#34;Connection settings for ipv4&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Setting a negative number is a workaround that prioritizes this DNS server. The actual number is arbitrary (&lt;code&gt;-1&lt;/code&gt; should also work) but I like 42. Â¯\_(ã)_/Â¯&lt;/p&gt;
&lt;h2 id=&#34;5-restart-connect-profit&#34;&gt;5. Restart, connect, profit!!!&lt;/h2&gt;
&lt;p&gt;In a terminal, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo service network-manager restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the Network Settings, click the magic button that turns on the VPN:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;19-vpnon.jpg#screenshot&#34; alt=&#34;Network Settings window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt; and click on &amp;ldquo;Extended test&amp;rdquo; to verify the fix. If everything&amp;rsquo;s working properly, we should now see a list containing only our VPN ISP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;20-noleaks.png#screenshot&#34; alt=&#34;Successful DNS leak test results&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;rsquo;re done! Congratulations on rolling your very own VPN server and stopping DNS leaks with OpenVPN. Enjoy surfing in (relative) privacy. Now your only worry at the local coffeeshop is who&amp;rsquo;s watching you surf from the seat behind you.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/1-subscribe_hu68a3a904d7b732bc9406197bded259ae_170219_640x0_resize_q75_box.jpg" type="image/jpg"/></item></channel></rss>