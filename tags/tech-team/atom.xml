<feed xmlns="http://www.w3.org/2005/Atom"><title>tech team on victoria.dev</title><link href="https://victoria.dev/tags/tech-team/feed.xml" rel="self"/><link href="https://victoria.dev/tags/tech-team/"/><updated>2021-05-24T00:00:00+00:00</updated><id>https://victoria.dev/tags/tech-team/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">A GitHub guide for non-technical leaders</title><link href="https://victoria.dev/blog/a-github-guide-for-non-technical-leaders/"/><id>https://victoria.dev/blog/a-github-guide-for-non-technical-leaders/</id><author><name>Victoria Drake</name></author><published>2021-05-24T00:00:00+00:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>As I write this, the front page of GitHub.com declares in big bold letters that this is &ldquo;Where the world builds software.&rdquo; This is true. In technology companies today, the creation of your product is largely happening where your developers spend time. It&rsquo;s where big and small product decisions are made every day &ndash; the kind of decisions that, wittingly or not, will decide the future of your company.</p>
<p>I&rsquo;m writing this guide for a very specific person &ndash; possibly you, or someone you know. I&rsquo;ll explain how a non-technical business leader can find information and take part in the decisions and questions that happen only on GitHub. You don&rsquo;t need to know how to use Git. You just need a few minutes to follow along, and a desire to be a resource and servant leader for your teams. Let&rsquo;s do it!</p>
<p>If you haven&rsquo;t signed up yet, click below to read the very first steps. Once you&rsquo;re logged in, read on to join in!</p>
<details>
<summary>The very first steps</summary>
<p>GitHub comes in two different flavors: GitHub Enterprise, or GitHub.com. If your team uses GitHub.com, you can <a href="https://github.com/join">sign up here</a> using your work email.</p>
<p>With GitHub Enterprise, signing up depends on your individual company&rsquo;s configuration. For example, you may be set up to log in with SAML single sign-on (such as through your GSuite credentials). Get in touch with the folks administering Enterprise in order to get signed up or logged in.</p>
<p>For the rest of this guide, it doesn&rsquo;t matter if you&rsquo;re using GitHub Enterprise or GitHub.com &ndash; they&rsquo;re largely the same. Just ensure you get connected to your company&rsquo;s Organization or Team, if there is one. Someone with administrative privileges needs to invite you using the email you signed up with.</p>
</details>
<h2 id="where-the-magic-happens">Where the magic happens</h2>
<p>On GitHub, work is typically grouped by projects or products into what&rsquo;s called <strong>repositories</strong>. Your team or company may have just one of these that they regularly use (they might call it a &ldquo;monorepo&rdquo;) or several repositories that represent different technical components of a single product.</p>
<p>Once you log in, you&rsquo;ll be on the <strong>Recent activity</strong> page. You can search for the name of the repository you want to visit in the search bar at the top left. If your company&rsquo;s repositories are private, you may need to be invited by an administrator in order to view it.</p>
<p><img src="search.png" alt="Example search"></p>
<p>When you view a repository, it looks like this. I&rsquo;ve pointed out some of the important bits.</p>
<p><img src="repo.png" alt="Screenshot of the OWASP Web Security Testing Guide repository"></p>
<p>In any repository, there are two main areas where decisions usually take place. These are in <strong>Issues</strong> and <strong>Pull Requests</strong>, and you&rsquo;ll mainly focus your attention here. Click on the <strong>Issues</strong> tab to see these.</p>
<p>You&rsquo;ll be presented with a list of Issues, which you can think of as individual topics. This format is essentially a discussion board. Clicking on any of the Issue titles will take you to its thread.</p>
<p><img src="issues.png" alt="Issues page screenshot"></p>
<p>Here&rsquo;s where the magic happens! Folks on your team use Issues to discuss all kinds of topics. These may be a very technical and esoteric cost-benefit analysis, or a fundamental customer-facing design decision. A quick read of the first message in the thread is likely to reveal whether it&rsquo;s a decision that could use your help.</p>
<p>Issues are a starting point for work. Here, team members make decisions about the type and scope of a change they plan to make.</p>
<p>When someone has their changes ready, they&rsquo;ll open a Pull Request so that other team members can preview and give input on those changes before they become part of the repository. Click the <strong>Pull Request</strong> tab at the top to view these.</p>
<p>You&rsquo;re presented with a very similar view on this page &ndash; yes, it&rsquo;s another discussion board! You can click on any Pull Request to view its thread as well.</p>
<p>Pull Requests have some additional tabs that team members use for code reviews. All the conversation will show up in the <strong>Conversation</strong> tab.</p>
<p><img src="pr.png" alt="Screenshot of Pull Request"></p>
<h2 id="sorting-out-whats-relevant">Sorting out what&rsquo;s relevant</h2>
<p>A lot of discussion happens in Issues and Pull Request threads, and not all of it may be relevant for you to look at. Thankfully, GitHub has some excellent collaboration tools that can help your team direct your attention to where it&rsquo;s most needed. These are <a href="https://github.blog/2011-03-23-mention-somebody-they-re-notified/">@mentions</a> and labels.</p>
<h3 id="ask-to-be-mentioned">Ask to be @mentioned</h3>
<p>These work the same way on GitHub as they do on Twitter. When someone @mentions you, you&rsquo;ll receive a notification via email, or you&rsquo;ll see it in your <a href="https://github.com/notifications">Notification Center</a> when you&rsquo;re logged in. This depends on your notification settings, which you should adjust to your liking. If you only want to be notified when someone @mentions you or replies to you, you should uncheck everything on the <a href="https://github.com/settings/notifications">Notification Settings page</a> except for your preferred options under <strong>Participating</strong>.</p>
<p><img src="participating.png" alt="Notification Settings for @mentions"></p>
<p>Now when someone references you in a discussion on GitHub, you&rsquo;ll be notified and you&rsquo;ll have the chance to respond!</p>
<h3 id="using-labels">Using labels</h3>
<p>Another less direct way to see where you can effectively contribute is to ask your team to use labels. You may recall seeing these in the right sidebar of Issue and Pull Request threads:</p>
<p><img src="labels.png" alt="Screenshot of labels in the right sidebar"></p>
<p>You can create different labels to categorize a discussion, and you can apply as many labels to a discussion as you like. In order to have your team draw your attention to threads that might benefit from your input or guidance, ask folks to use a label to point these out. This could be the <code>question</code> label, or any new label of your choosing.</p>
<p>Clicking on a label in the sidebar will take you to a page that shows all the Issues or Pull Requests with that label. The URL will look something like:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">https://github.com/&lt;organization name&gt;/&lt;repository name&gt;/labels/question
</code></pre></div><p>You can also bookmark this page to easily check it on a regular schedule. This is a great, low-friction way for your team to indicate areas that could use your input.</p>
<h2 id="collaborating-on-files">Collaborating on files</h2>
<p>Similar to tracking changes in Google Docs or Word documents, you can edit documents in GitHub in a way that lets your team see the changes you&rsquo;ve made. This is a fantastic method for collaborating with your team where they work, and avoids the hassle of emailing attachments around.</p>
<p>Text files in repositories have extensions such as <code>.md</code> for Markdown, or <code>.txt</code> for plain text. The majority of documentation on GitHub is in Markdown format. Clicking on any file in the repository file list will open it on the GitHub website. At the top right of the document, look for these buttons:</p>
<p><img src="doc.png" alt="Document actions"></p>
<p>Clicking on the pencil icon will let you edit the file right there in your web browser. You may not see anything special as you&rsquo;re typing, but once you commit (like saving) your file, all your changes are tracked with Git! For a step-by-step guide to editing, see <a href="https://docs.github.com/en/github/managing-files-in-a-repository/managing-files-on-github/editing-files-in-your-repository">Editing files in your repository</a>.</p>
<p>Here are some helpful <a href="https://docs.github.com/en/github/writing-on-github">articles for formatting text with Markdown on GitHub</a>.</p>
<h2 id="proactive-participation">Proactive participation</h2>
<p>GitHub is well-structured as a collaboration platform. That&rsquo;s why people of all professions use it not just for software development, but also for networking, getting jobs and sponsorships, and even for hosting simple no-code websites. My own company uses GitHub for everything from collaborating on company documentation to automated Change Control Board processes for FedRAMP.</p>
<p>At your leisure, I encourage you to chase your curiosity and explore. Don&rsquo;t be shy about asking questions, or asking technical folks on your team to explain something if you think it will enable you to be a bigger help to them. With so much of the world building software on GitHub, there&rsquo;s a lot you can contribute when you&rsquo;re where the work happens.</p>
]]></content></entry><entry><title type="html">Do I raise or return errors in Python?</title><link href="https://victoria.dev/blog/do-i-raise-or-return-errors-in-python/"/><id>https://victoria.dev/blog/do-i-raise-or-return-errors-in-python/</id><author><name>Victoria Drake</name></author><published>2021-02-09T05:34:48-05:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>I hear this question a lot: &ldquo;Do I raise or return this error in Python?&rdquo;</p>
<p>This is probably because the right answer will depend on your situation and the goals of your application logic. Either choice can help you ensure your Python code doesn&rsquo;t fail silently, saving you and your teammates from having to hunt down deeply entrenched errors.</p>
<p>Here&rsquo;s the difference between <code>raise</code> and <code>return</code> when handling failures in Python, and how to ensure your code doesn&rsquo;t fail silently.</p>
<h2 id="when-to-raise">When to raise</h2>
<blockquote>
<p>The <code>raise</code> statement allows the programmer to force a specific exception to occur. (<a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions">8.4 Raising Exceptions</a>)</p>
</blockquote>
<p>Use <code>raise</code> when you know you want a specific behavior, such as:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&#34;Wanted strawberry, got grape.&#34;</span><span class="p">)</span>
</code></pre></div><p>Raising an exception terminates the flow of your program, allowing the exception to bubble up the call stack. In the above example, this would let you explicitly handle <code>TypeError</code> later. If <code>TypeError</code> goes unhandled, code execution stops and you&rsquo;ll get an <em>unhandled exception</em> message.</p>
<p>Raise is useful in cases where you want to define a certain behavior to occur. For example, you may choose to disallow certain words in a text field:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="s2">&#34;raisins&#34;</span> <span class="ow">in</span> <span class="n">text_field</span><span class="p">:</span>
    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;That word is not allowed here&#34;</span><span class="p">)</span>
</code></pre></div><p>Raise takes an instance of an exception, or a derivative of the <a href="https://docs.python.org/3/library/exceptions.html#Exception">Exception class</a>. Here are all of <a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">Python&rsquo;s built-in exceptions</a>.</p>
<p>Raise can help you avoid writing functions that fail silently. For example, this code will not raise an exception if <code>JAM</code> doesn&rsquo;t exist:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>


<span class="k">def</span> <span class="nf">sandwich_or_bust</span><span class="p">(</span><span class="n">bread</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">jam</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;JAM&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bread</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">jam</span><span class="p">)</span> <span class="o">+</span> <span class="n">bread</span>


<span class="n">s</span> <span class="o">=</span> <span class="n">sandwich_or_bust</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\U0001F35E</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="c1"># Prints &#34;🍞None🍞&#34; which is not very tasty.</span>
</code></pre></div><p>To cause the <code>sandwich_or_bust()</code> function to actually bust, add a <code>raise</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>


<span class="k">def</span> <span class="nf">sandwich_or_bust</span><span class="p">(</span><span class="n">bread</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">jam</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;JAM&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">jam</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;There is no jam. Sad bread.&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bread</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">jam</span><span class="p">)</span> <span class="o">+</span> <span class="n">bread</span>


<span class="n">s</span> <span class="o">=</span> <span class="n">sandwich_or_bust</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\U0001F35E</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="c1"># ValueError: There is no jam. Sad bread.</span>
</code></pre></div><p>Any time your code interacts with an external variable, module, or service, there is a possibility of failure. You can use <code>raise</code> in an <code>if</code> statement to help ensure those failures aren&rsquo;t silent.</p>
<h3 id="raise-in-try-and-except">Raise in <code>try</code> and <code>except</code></h3>
<p>To handle a possible failure by taking an action if there is one, use a <code>try</code> &hellip; <code>except</code> statement.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">sandwich_or_bust</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\U0001F35E</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
    <span class="n">buy_more_jam</span><span class="p">()</span>
    <span class="k">raise</span>
</code></pre></div><p>This lets you <code>buy_more_jam()</code> before re-raising the exception. If you want to propagate a caught exception, use <code>raise</code> without arguments to avoid possible loss of the stack trace.</p>
<p>If you don&rsquo;t know that the exception will be a <code>ValueError</code>, you can also use a bare <code>except:</code> or catch any derivative of the <code>Exception</code> class with <code>except Exception:</code>. Whenever possible, it&rsquo;s better to raise and handle exceptions explicitly.</p>
<p>Use <code>else</code> for code to execute if the <code>try</code> does not raise an exception. For example:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">sandwich_or_bust</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\U0001F35E</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
    <span class="n">buy_more_jam</span><span class="p">()</span>
    <span class="k">raise</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Congratulations on your sandwich.&#34;</span><span class="p">)</span>
</code></pre></div><p>You could also place the print line within the <code>try</code> block, however, this is less explicit.</p>
<h2 id="when-to-return">When to return</h2>
<p>When you use <code>return</code> in Python, you&rsquo;re giving back a value. A function returns to the location it was called from.</p>
<p>While it&rsquo;s more idiomatic to <code>raise</code> errors in Python, there may be occasions where you find <code>return</code> to be more applicable.</p>
<p>For example, if your Python code is interacting with other components that do not handle exception classes, you may want to return a message instead. Here&rsquo;s an example using a <code>try</code> &hellip; <code>except</code> statement:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Union</span>


<span class="k">def</span> <span class="nf">share_sandwich</span><span class="p">(</span><span class="n">sandwich</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Union</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="ne">Exception</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">bad_math</span> <span class="o">=</span> <span class="n">sandwich</span> <span class="o">/</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">bad_math</span>
    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">e</span>


<span class="n">s</span> <span class="o">=</span> <span class="n">share_sandwich</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="c1"># Prints &#34;division by zero&#34;</span>
</code></pre></div><p>Note that when you return an <code>Exception</code> class object, you&rsquo;ll get a representation of its associated value, usually the first item in its list of arguments. In the example above, this is the string explanation of the exception. In some cases, it may be a tuple with other information about the exception.</p>
<p>You may also use <code>return</code> to give a specific error object, such as with <a href="https://docs.djangoproject.com/en/3.1/ref/request-response/#httpresponse-subclasses"><code>HttpResponseNotFound</code> in Django</a>. For example, you may want to return a <code>404</code> instead of a <code>403</code> for security reasons:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="nb">object</span><span class="o">.</span><span class="n">owner</span> <span class="o">!=</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">HttpResponseNotFound</span>
</code></pre></div><p>Using <code>return</code> can help you write appropriately noisy code when your function is expected to give back a certain value, and when interacting with outside elements.</p>
<h2 id="make-your-errors-noisy">Make your errors noisy</h2>
<p>Silent failures create some of the most frustrating bugs to find and fix. You can help create a pleasant development experience for yourself and your team by using <code>raise</code> and <code>return</code> to handle errors in Python.</p>
]]></content></entry><entry><title type="html">What tech leaders do before going on vacation</title><link href="https://victoria.dev/blog/what-tech-leaders-do-before-going-on-vacation/"/><id>https://victoria.dev/blog/what-tech-leaders-do-before-going-on-vacation/</id><author><name>Victoria Drake</name></author><published>2021-02-01T04:02:54-06:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>As a technical person who leads a technical team, I know firsthand that it can be easy to get lost in finishing up your own work before a vacation. It takes a bit of dedicated attention to ensure you don&rsquo;t neglect the day-to-day tasks that don’t vanish while you’re away.</p>
<p>Here’s a pre-PTO checklist to make sure you’ve taken care of those responsibilities before you take off for a much-deserved vacation.</p>
<h2 id="does-everyone-know-whos-supposed-to-do-what">Does everyone know who&rsquo;s supposed to do what?</h2>
<p>A lot of information lives in your head alone, despite valiant efforts to <a href="/blog/how-to-write-good-documentation/">document all the things</a>. That’s the nature of the work. Instead of attempting to disseminate everything you’re thinking through, focus on the work your team will do while you’re away.</p>
<p>Hopefully, you already have a <a href="/blog/priority/">centralized list of priorities</a>. Ensure it’s up to date, and that all the tasks that could conceivably be done during your time off have been assigned a caretaker.</p>
<h2 id="are-there-any-decisions-waiting-on-me">Are there any decisions waiting on me?</h2>
<p>Review notes, discussion boards, and ask your team directly if anyone is waiting on an answer from you. If you’re able to make a decision before your vacation, do so. If not, delegate the decision to someone else with a clear explanation of your overall goals and any applicable parameters.</p>
<h2 id="dont-neglect-internal-auto-responders">Don’t neglect internal auto-responders</h2>
<p>Set up auto-responders for communications from the public, as well as from your team! While a response from your public email may say that you’re out of the office and when you expect to be back, an internal auto-responder is an opportunity to provide even more value.</p>
<p>It could take the form of an email response for your internal inbox, but a post on your team’s message board or chat channel also works. Let people know where to look for information they might need, who to turn to if they need help while you’re away, and where to find your <a href="/blog/priority/">centralized priority list</a> so they can decide what to work on next.</p>
<h2 id="tidy-up-loose-ends">Tidy up loose ends</h2>
<p>Finally, close out work that depends on you and that no one else can do. If it’s work you can delegate with some written guidance attached, you might choose this route instead of attempting to finish it yourself in a hurry.</p>
<p>If you hand off any work, ensure that you communicate clear instructions as well as any deadlines.</p>
<h2 id="set-expectations-and-follow-them">Set expectations and follow them</h2>
<p>Your vacation is precious time to recoup, relax, and make room for those creative moments that only visit a quiet mind. Ensure you set expectations with your team for how often you might check in, if at all.</p>
<p>If you do decide to log in while you&rsquo;re away, be sure to protect your privacy and your company data with a <a href="/blog/vpn/">privacy-focused VPN</a> on all your devices.</p>
<h2 id="responsible-vacation-planning-for-technology-leaders">Responsible vacation planning for technology leaders</h2>
<p>I hope you benefit from the ideas in this post. Here&rsquo;s an easy way to put them into practice right now: grab this post as a <a href="https://gum.co/pre-pto">pre-PTO Notion checklist template</a> and instantly gain conscientious leadership powers!</p>
<script src="https://gumroad.com/js/gumroad.js"></script>
<p><a class="gumroad-button" href="https://gum.co/IVxBm?wanted=true" target="_blank">Get checklist as a Notion template</a></p>
<p>Don&rsquo;t leave your team members hanging while you&rsquo;re away! If you have other ideas for good things to do before your vacation, <a href="/contact">I&rsquo;d love to hear about it</a>.</p>
]]></content></entry><entry><title type="html">How to write good documentation</title><link href="https://victoria.dev/blog/how-to-write-good-documentation/"/><id>https://victoria.dev/blog/how-to-write-good-documentation/</id><author><name>Victoria Drake</name></author><published>2020-12-14T04:53:10-05:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>If you&rsquo;ve ever half-written a software project before taking a few days off, this is the article you&rsquo;ll discover you needed when you reopen that IDE.</p>
<p><img src="friday-monday.png" alt="Your project on Friday (a finished puzzle) vs Monday (a pile of puzzle pieces) comic"></p>
<p>In the technology teams I lead, we make a constant effort to document all the things. Documentation lives alongside the code as an equal player. This helps ensure that no one needs to make assumptions about how something works, or is calling lengthy meetings to gain working knowledge of a feature. Good documentation saves us a lot of time and hassle.</p>
<p>That said, and contrary to popular belief, the most valuable software documentation is not primarily written for other people. As I said in this well-received tweet:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The secret to good documentation is to write it while you&#39;re writing the code. You are your first audience. Explain what you&#39;re doing to yourself. Future you will thank you!</p><p>&mdash; Victoria Drake <a href="https://twitter.com/victoriadotdev/status/1331262801797652483?ref_src=twsrc%5Etfw">November 24, 2020</a></p></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>With holidays around the corner, it&rsquo;d be prudent to prepare for the possibility of some eggnog-induced programming paralysis. (Pecan pie and Python make a great combination.)</p>
<p>Here are three concrete steps you can take to write good documentation before it&rsquo;s too late.</p>
<h2 id="1-start-with-accurate-notes">1. Start with accurate notes</h2>
<p>As you work out ideas in code, ensure you don’t soon forget important details by starting with accurate notes. While you will want to explain things to yourself in long-form later, short-form notes will suffice to capture details without interrupting your coding session flow.</p>
<p>Keep a document open alongside your code and write down things like commands, decisions, and sources you use. This can include:</p>
<ul>
<li>Terminal commands you typed in</li>
<li>Why you chose a particular method over another</li>
<li>Links you visited for help or <em>cough</em>copy-paste<em>cough</em> inspiration</li>
<li>The order in which you did things</li>
</ul>
<p>Don’t worry about full sentences at this point. Just ensure you accurately capture context, relevant code snippets, and helpful URLs. It can also be helpful to turn on any auto-save option available.</p>
<h2 id="2-explain-decisions-in-long-form">2. Explain decisions in long form</h2>
<p>The ideal time to tackle this step is when you take a break from coding, but before you completely go out to lunch on whatever it is you’re working on at the moment. You want to ensure that context, ideas, and decisions are all still fresh in your mind when you explain them to yourself.</p>
<p>Go over the short-form notes you took and start expanding them into conversational writing. Be your own rubber duck. Describe what you’re doing as if you were teaching it to someone else. You might cover topics such as:</p>
<ul>
<li>Quirky-looking decisions: &ldquo;I would normally do it this way, but I chose to do something different because&hellip;&rdquo;</li>
<li>Challenges you ran into and how you overcame them</li>
<li>Architectural decisions that support your project goals</li>
</ul>
<p>Stick to the main points. Long-form writing doesn’t mean you’ll be paid by the word! Just use full sentences, and write as if explaining your project to a colleague. You’re explaining to future you, after all.</p>
<h2 id="3-dont-neglect-prerequisite-knowledge">3. Don&rsquo;t neglect prerequisite knowledge</h2>
<p>This step is best done after a long lunch break, or even the next day (but probably not two). Re-read your document and fill in any blanks that become apparent after putting some distance between yourself and the project.</p>
<p>Take extra care to fill in or at least link to prerequisite knowledge, especially if you frequently use different languages or tools. Even an action as small as pasting in a link to the API documentation you used can save hours of future searching.</p>
<p>Write down or link to READMEs, installation steps, and relevant support issues. For frequently performed command-line actions, you can use a <a href="/blog/how-to-create-a-self-documenting-makefile/">self-documenting Makefile</a> to avoid having to <code>man</code> common tasks each time you come back to a project.</p>
<p>It’s easy to forget supporting details after even just a short break from your project. Capture anything you found helpful this time around.</p>
<h2 id="document-all-the-things">Document all the things</h2>
<p>The next time you catch yourself thinking, “I’m sure I’ll remember this part, no need to write it down,” just recall this emoji: 🤦‍♀️</p>
<p>Software projects are made up of a lot more than just their code. To best set up your future self for success, document all the things! Whether it’s a process you’ve established, Infrastructure as Code, or a fleeting future roadmap idea — write it down! Future you will thank you for it.</p>
<p>If you enjoyed this post, there&rsquo;s a lot more where that came from! I write about computing, cybersecurity, and leading great technical teams. <a href="/">You can subscribe</a> to see new articles first.</p>
]]></content></entry><entry><title type="html">Make your team more productive by literally doing one thing</title><link href="https://victoria.dev/blog/make-your-team-more-productive-by-literally-doing-one-thing/"/><id>https://victoria.dev/blog/make-your-team-more-productive-by-literally-doing-one-thing/</id><author><name>Victoria Drake</name></author><published>2020-12-07T15:01:25-06:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>In the tech teams I lead, &ldquo;priority&rdquo; has no plural form.</p>
<p>Whether you&rsquo;re leading a team of people or leading yourself, it&rsquo;s important to take account of all the important things that need doing in your organization. This does not mean that everything can be equally important.</p>
<p>Logically, everything can&rsquo;t be. Tasks are typically interdependent, and there&rsquo;s always one task on which another depends. Tasks can be time-sensitive. Certain tasks might block a logical path towards a goal.</p>
<p>It&rsquo;s the duty of a leader to make hard calls and decide which tasks are most important out of everything that needs doing. This necessitates comparing one to another, which is much easier to do with a centralized to-do list.</p>
<p>Here&rsquo;s how this one simple change to your perspective on to-do lists can help to build happier and more productive teams.</p>
<h2 id="keep-a-central-prioritized-to-do-list">Keep a central prioritized to-do list</h2>
<p><img src="prioritize.png" alt="A cartoon of a stick figure swinging on a rope ro plant a post-it note"></p>
<p>Avoid working in silos. A single centralized list can make it easier for you and your team members to see what&rsquo;s being worked on. With all tasks out in the open, it&rsquo;s easier for people to spot opportunities for helping each other out and where they can contribute.</p>
<p>Encouraging a culture of openness can help people feel more comfortable asking questions, asking for help, and proposing ideas and improvements. Tracking work in the open also means that no one is left wondering what status a task is currently in.</p>
<p>For team leaders, a single list makes it easier to compare and prioritize tasks. This benefits team members by providing a completely unambiguous and transparent accounting of what needs doing next. Whichever task is most important, for the whole organization, is on top.</p>
<h2 id="priorities-with-autonomy">Priorities with autonomy</h2>
<p>A single priority doesn&rsquo;t necessarily pigeonhole someone into doing a task they don&rsquo;t feel cut out for. Each member of your team has different strengths, skill sets, and diverse ways of thinking. You can take full advantage of this by encouraging autonomy in task selection.</p>
<p><img src="task-selection.png" alt="A cartoon of a stick figure climbing a ladder to reach a post-it note"></p>
<p>Have people choose whichever task is nearest to the top that they&rsquo;d like to tackle. They might pick the highest priority task that&rsquo;s in their wheelhouse, or experiment with a higher one that&rsquo;s in a domain they&rsquo;d like to improve their skills at.</p>
<p>Embrace opportunities for cross-training. If tasks high up on the list fall in a category that only one or a few people on your team are experts in, have your experts partner up with another team member who&rsquo;s taking on the task. By pooling your resources to cross-train across domains, you multiply the capabilities of each team member and your team as a result.</p>
<p>When a task is especially time-sensitive, have several team members swarm on it and distribute the work according to their interests or strengths.</p>
<h2 id="make-yourself-redundant">Make yourself redundant</h2>
<p>Working off a single prioritized to-do list works best when your team members can take on tasks as independently as possible. This is especially important in remote teams where people work asynchronously.</p>
<p>If you&rsquo;re a leader and find that your team members frequently ask you what they should do next, you could be making your team dependent on you. Ask yourself if you&rsquo;re unnecessarily gatekeeping information that would let your team be more autonomous.</p>
<p>A team that overly depends on their leader is not an efficient one. Individual people, such as yourself, don&rsquo;t scale. Don&rsquo;t become a bottleneck to your team&rsquo;s productivity. A successful leader should be able to take several days off on short notice without productivity grinding to a halt.</p>
<p><img src="add-resources.png" alt="A cartoon of a stick figure carrying books to a wall of post-it notes"></p>
<p>To support your team&rsquo;s ability to work without you, make your team, product, and company goals <em>painfully</em> available. Put them where people hang out &ndash; your team&rsquo;s message board, chat channel, or document repository, for example. No one should be at a loss when asked what the team wants to achieve next, and why.</p>
<p>Make any applicable resources, style guides, product documents, or links to external documentation painfully available as well. If your team makes a decision about how something should be done, write it down. Don&rsquo;t rely on yours or anyone else&rsquo;s meat brain to remember an important decision, nor make yourself the only resource for recalling it.</p>
<p>Make yourself redundant when it comes to day-to-day work. Doing so empowers your team members to do work without you, think through solutions on their own, and propose paths of action that you probably wouldn&rsquo;t have thought of yourself.</p>
<h2 id="build-happier-and-more-productive-teams">Build happier and more productive teams</h2>
<p>From first-hand experience as both a team member and leader, I&rsquo;ve seen how encouraging a culture of openness, cross-training, and autonomy makes for happier team members and more productive teams. A single prioritized to-do list, coupled with available documentation and resources, opens the gates to let your technical team be maximally productive.</p>
<p>By removing bottlenecks, you allow people to make more decisions on their own and take ownership of their work. That&rsquo;s a technical team I&rsquo;d be proud to lead.</p>
]]></content></entry><entry><title type="html">Increase developer confidence with a great Django test suite</title><link href="https://victoria.dev/blog/increase-developer-confidence-with-a-great-django-test-suite/"/><id>https://victoria.dev/blog/increase-developer-confidence-with-a-great-django-test-suite/</id><author><name>Victoria Drake</name></author><published>2020-10-01T05:50:37-04:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>If you regard writing tests as a lame checkbox task, nothing could be farther from the truth. Done correctly, tests are one of your application&rsquo;s most valuable assets.</p>
<p>The Django framework in particular offers your team the opportunity to create an efficient testing practice, based on the Python standard library <code>unittest</code>. Proper tests in Django are fast to write, faster to run, and can offer you a seamless continuous integration solution for taking the pulse of your developing application.</p>
<p>With comprehensive tests, developers have higher confidence when pushing changes. I&rsquo;ve seen firsthand in my own teams that good tests can boost development velocity as a direct result of a better developer experience.</p>
<p>In this article, I&rsquo;ll share my own experiences in building useful tests for Django applications, from the basics to the best possible execution. If you&rsquo;re using Django or building with it in your organization, you might like to read the rest of my <a href="/series/django/">Django series</a>.</p>
<h2 id="what-to-test">What to test</h2>
<p>Tests are extremely important. Far beyond simply letting you know if a function works, tests can form the basis of your team&rsquo;s understanding of how your application is <em>intended</em> to work.</p>
<p>Here&rsquo;s the main goal: if you hit your head and forgot everything about how your application works tomorrow, you should be able to regain most of your understanding by reading and running the tests you write today.</p>
<p>Here are some questions that may be helpful to ask as you decide what to test:</p>
<ul>
<li>What is our customer supposed to be able to do?</li>
<li>What is our customer <em>not</em> supposed to be able to do?</li>
<li>What should this method, view, or logical flow achieve?</li>
<li>When, how, or where is this feature supposed to execute?</li>
</ul>
<p>Tests that make sense for your application can help build developer confidence. With these sensible safeguards in place, developers make improvements more readily, and feel confident introducing innovative solutions to product needs. The result is an application that comes together faster, and features that are shipped often and with confidence.</p>
<p><img src="pbj-tests.png" alt="A cartoon for peanut butter and jelly sandwich tests"></p>
<h2 id="where-to-put-tests">Where to put tests</h2>
<p>If you only have a few tests, you may organize your test files similarly to <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#startapp">Django&rsquo;s default app template</a> by putting them all in a file called <code>tests.py</code>. This straightforward approach is best for smaller applications.</p>
<p>As your application grows, you may like to split your tests into different files, or test modules. One method is to use a directory to organize your files, such as <code>projectroot/app/tests/</code>. The name of each test file within that directory should begin with <code>test</code>, for example, <code>test_models.py</code>.</p>
<p>Besides being aptly named, Django will find these files using <a href="https://docs.python.org/3/library/unittest.html#unittest-test-discovery">built-in test discovery</a> based on the <code>unittest</code> module. All files in your application with names that begin with <code>test</code> will be collected into a test suite.</p>
<p>This convenient test discovery allows you to place test files anywhere that makes sense for your application. As long as they&rsquo;re correctly named, Django&rsquo;s test utility can find and run them.</p>
<h2 id="how-to-document-a-test">How to document a test</h2>
<p>Use <a href="https://www.python.org/dev/peps/pep-0257/">docstrings</a> to explain what a test is intended to verify at a high level. For example:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_create_user</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Creating a new user object should also create an associated profile object&#34;&#34;&#34;</span>
    <span class="c1"># ...</span>
</code></pre></div><p>These docstrings help you quickly understand what a test is supposed to be doing. Besides navigating the codebase, this helps to make it obvious when a test doesn&rsquo;t verify what the docstring says it should.</p>
<p>Docstrings are also shown when the tests are being run, which can be helpful for logging and debugging.</p>
<h2 id="what-a-test-needs-to-work">What a test needs to work</h2>
<p>Django tests can be quickly set up using data created in the <a href="https://docs.djangoproject.com/en/3.1/topics/testing/tools/#django.test.TestCase.setUpTestData"><code>setUpTestData()</code> method</a>. You can use various approaches to create your test data, such as utilizing external files, or even hard-coding silly phrases or the names of your staff. Personally, I much prefer to use a fake-data-generation library, such as <a href="https://github.com/joke2k/faker/"><code>faker</code></a>.</p>
<p>The proper set up of arbitrary testing data can help you ensure that you&rsquo;re testing your application functionality instead of accidentally testing test data. Because generators like <code>faker</code> add some degree of unexpectedness to your inputs, it can be more representative of real-world use.</p>
<p>Here is an example set up for a test:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="nn">faker</span> <span class="kn">import</span> <span class="n">Faker</span>

<span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">MyModel</span><span class="p">,</span> <span class="n">AnotherModel</span>

<span class="n">fake</span> <span class="o">=</span> <span class="n">Faker</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">MyModelTest</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUpTestData</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Quickly set up data for the whole TestCase&#34;&#34;&#34;</span>
        <span class="bp">cls</span><span class="o">.</span><span class="n">user_first</span> <span class="o">=</span> <span class="n">fake</span><span class="o">.</span><span class="n">first_name</span><span class="p">()</span>
        <span class="bp">cls</span><span class="o">.</span><span class="n">user_last</span> <span class="o">=</span> <span class="n">fake</span><span class="o">.</span><span class="n">last_name</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">test_create_models</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Creating a MyModel object should also create AnotherModel object&#34;&#34;&#34;</span>
        <span class="c1"># In test methods, use the variables created above</span>
        <span class="n">test_object</span> <span class="o">=</span> <span class="n">MyModel</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
            <span class="n">first_name</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">user_first</span><span class="p">,</span>
            <span class="n">last_name</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">user_last</span><span class="p">,</span>
            <span class="c1"># ...</span>
        <span class="p">)</span>
        <span class="n">another_model</span> <span class="o">=</span> <span class="n">AnotherModel</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">my_model</span><span class="o">=</span><span class="n">test_object</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">another_model</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">user_first</span><span class="p">)</span>
        <span class="c1"># ...</span>
</code></pre></div><p>Tests pass or fail based on the outcome of the assertion methods. You can use <a href="https://docs.python.org/3/library/unittest.html#assert-methods">Python&rsquo;s <code>unittest</code> methods</a>, and <a href="https://docs.djangoproject.com/en/3.1/topics/testing/tools/#assertions">Django&rsquo;s assertion methods</a>.</p>
<p>For further guidance on writing tests, see <a href="https://docs.djangoproject.com/en/3.1/topics/testing/">Testing in Django</a>.</p>
<h2 id="best-possible-execution-for-running-your-tests">Best possible execution for running your tests</h2>
<p>Django&rsquo;s test suite is manually run with:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">./manage.py <span class="nb">test</span>
</code></pre></div><p>I rarely run my Django tests this way.</p>
<p>The best, or most efficient, testing practice is one that occurs without you or your developers ever thinking, &ldquo;I need to run the tests first.&rdquo; The beauty of Django&rsquo;s near-effortless test suite set up is that it can be seamlessly run as a part of regular developer activities. This could be in a pre-commit hook, or in a continuous integration or deployment workflow.</p>
<p>I&rsquo;ve previously written about how to use pre-commit hooks to <a href="/blog/technical-ergonomics-for-the-efficient-developer/">improve your developer ergonomics</a> and save your team some brainpower. Django&rsquo;s speedy tests can be run this way, and they become especially efficient if you can <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#cmdoption-test-parallel">run tests in parallel</a>.</p>
<p>Tests that run as part of a CI/CD workflow, for example, <a href="/blog/django-project-best-practices-to-keep-your-developers-happy/#continuous-testing-with-github-actions">on pull requests with GitHub Actions</a>, require no regular effort from your developers to remember to run tests at all. I&rsquo;m not sure how plainly I can put it &ndash; this one&rsquo;s literally a no-brainer.</p>
<h2 id="testing-your-way-to-a-great-django-application">Testing your way to a great Django application</h2>
<p>Tests are extremely important, and underappreciated. They can catch logical errors in your application. They can help explain and validate how concepts and features of your product actually function. Best of all, tests can boost developer confidence and development velocity as a result.</p>
<p>The best tests are ones that are relevant, help to explain and define your application, and are run continuously without a second thought. I hope I&rsquo;ve now shown you how testing in Django can help you to achieve these goals for your team!</p>
]]></content></entry><entry><title type="html">Django project best practices to keep your developers happy</title><link href="https://victoria.dev/blog/django-project-best-practices-to-keep-your-developers-happy/"/><id>https://victoria.dev/blog/django-project-best-practices-to-keep-your-developers-happy/</id><author><name>Victoria Drake</name></author><published>2020-09-22T04:55:19-04:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>Do you want your team to <em>enjoy</em> your development workflow? Do you think building software should be <em>fun and existentially fulfilling?</em> If so, <em>this is the post</em> for you!</p>
<p>I&rsquo;ve been developing with Django for years, and I&rsquo;ve never been happier with my Django project set up than I am right now. Here&rsquo;s how I&rsquo;m making a day of developing with Django the most relaxing and enjoyable development experience possible for myself and my engineering team.</p>
<h2 id="a-custom-cli-tool-for-your-django-project">A custom CLI tool for your Django project</h2>
<p>Instead of typing:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">python3 -m venv env
<span class="nb">source</span> env/bin/activate
pip install -r requirements.txt
python3 manage.py makemigrations
python3 manage.py migrate
python3 manage.py collectstatic
python3 manage.py runserver
</code></pre></div><p>Wouldn&rsquo;t it be much nicer to type:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">make start
</code></pre></div><p>&hellip;and have all that happen for you? I think so!</p>
<p>We can do that with a self-documenting Makefile! Here&rsquo;s one I frequently use when developing my Django applications, like <a href="https://applybyapi.com/">ApplyByAPI.com</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="nv">VENV</span> <span class="o">:=</span> env
<span class="nv">BIN</span> <span class="o">:=</span> <span class="k">$(</span>VENV<span class="k">)</span>/bin
<span class="nv">PYTHON</span> <span class="o">:=</span> <span class="k">$(</span>BIN<span class="k">)</span>/python
<span class="nv">SHELL</span> <span class="o">:=</span> /bin/bash

<span class="err">include</span> <span class="err">.env</span>

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">help</span>
<span class="nf">help</span><span class="o">:</span> <span class="c">## Show this help
</span><span class="c"></span>    @egrep -h <span class="s1">&#39;\s##\s&#39;</span> <span class="k">$(</span>MAKEFILE_LIST<span class="k">)</span> <span class="p">|</span> awk <span class="s1">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">venv</span>
<span class="nf">venv</span><span class="o">:</span> <span class="c">## Make a new virtual environment
</span><span class="c"></span>    python3 -m venv <span class="k">$(</span>VENV<span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="k">$(</span>BIN<span class="k">)</span>/activate

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">install</span>
<span class="nf">install</span><span class="o">:</span> <span class="n">venv</span> <span class="c">## Make venv and install requirements
</span><span class="c"></span>    <span class="k">$(</span>BIN<span class="k">)</span>/pip install --upgrade -r requirements.txt

<span class="nf">freeze</span><span class="o">:</span> <span class="c">## Pin current dependencies
</span><span class="c"></span>    <span class="k">$(</span>BIN<span class="k">)</span>/pip freeze &gt; requirements.txt

<span class="nf">migrate</span><span class="o">:</span> <span class="c">## Make and run migrations
</span><span class="c"></span>    <span class="k">$(</span>PYTHON<span class="k">)</span> manage.py makemigrations
    <span class="k">$(</span>PYTHON<span class="k">)</span> manage.py migrate

<span class="nf">db-up</span><span class="o">:</span> <span class="c">## Pull and start the Docker Postgres container in the background
</span><span class="c"></span>    docker pull postgres
    docker-compose up -d

<span class="nf">db-shell</span><span class="o">:</span> <span class="c">## Access the Postgres Docker database interactively with psql. Pass in DBNAME=&lt;name&gt;.
</span><span class="c"></span>    docker <span class="nb">exec</span> -it container_name psql -d <span class="k">$(</span>DBNAME<span class="k">)</span>

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">test</span>
<span class="nf">test</span><span class="o">:</span> <span class="c">## Run tests
</span><span class="c"></span>    <span class="k">$(</span>PYTHON<span class="k">)</span> manage.py <span class="nb">test</span> application --verbosity<span class="o">=</span><span class="m">0</span> --parallel --failfast

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">run</span>
<span class="nf">run</span><span class="o">:</span> <span class="c">## Run the Django server
</span><span class="c"></span>    <span class="k">$(</span>PYTHON<span class="k">)</span> manage.py runserver

<span class="nf">start</span><span class="o">:</span> <span class="n">install</span> <span class="n">migrate</span> <span class="n">run</span> <span class="c">## Install requirements, apply migrations, then start development server
</span></code></pre></div><p>You&rsquo;ll notice the presence of the line <code>include .env</code> above. This ensures <code>make</code> has access to environment variables stored in a file called <code>.env</code>. This allows Make to utilize these variables in its commands, for example, the name of my virtual environment, or to pass in <code>$(DBNAME)</code> to <code>psql</code>.</p>
<p>What&rsquo;s with that weird &ldquo;<code>##</code>&rdquo; comment syntax? A Makefile like this gives you a handy suite of command-line aliases you can check in to your Django project. It&rsquo;s very useful so long as you&rsquo;re able to remember what all those aliases are.</p>
<p>The <code>help</code> command above, which runs by default, prints a helpful list of available commands when you run <code>make</code> or <code>make help</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">help                 Show this help
venv                 Make a new virtual environment
install              Make venv and install requirements
migrate              Make and run migrations
db-up                Pull and start the Docker Postgres container in the background
db-shell             Access the Postgres Docker database interactively with psql
test                 Run tests
run                  Run the Django server
start                Install requirements, apply migrations, then start development server
</code></pre></div><p>All the usual Django commands are covered, and we&rsquo;ve got a <code>test</code> command that runs our tests with the options we prefer. Brilliant.</p>
<p>You can read my full <a href="/blog/how-to-create-a-self-documenting-makefile/">post about self-documenting Makefiles here</a>, which also includes an example Makefile using <code>pipenv</code>.</p>
<h2 id="save-your-brainpower-with-pre-commit-hooks">Save your brainpower with pre-commit hooks</h2>
<p>I previously wrote about some <a href="/blog/technical-ergonomics-for-the-efficient-developer/">technical ergonomics</a> that can make it a lot easier for teams to develop great software.</p>
<p>One area that&rsquo;s a no-brainer is using pre-commit hooks to lint code prior to checking it in. This helps to ensure the quality of the code your developers check in, but most importantly, ensures that no one on your team is spending time trying to remember if it should be single or double quotes or where to put a line break.</p>
<p>The confusingly-named <a href="https://pre-commit.com/">pre-commit framework</a> is an otherwise fantastic way to keep hooks (which are not included in cloned repositories) consistent across local environments.</p>
<p>Here is my configuration file, <code>.pre-commit-config.yaml</code>, for my Django projects:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">fail_fast</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="nt">repos</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/pre-commit/pre-commit-hooks</span><span class="w">
</span><span class="w">    </span><span class="nt">rev</span><span class="p">:</span><span class="w"> </span><span class="l">v3.1.0</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">detect-aws-credentials</span><span class="w">
</span><span class="w">  </span>- <span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/psf/black</span><span class="w">
</span><span class="w">    </span><span class="nt">rev</span><span class="p">:</span><span class="w"> </span><span class="m">19.</span><span class="l">3b0</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">black</span><span class="w">
</span><span class="w">  </span>- <span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/asottile/blacken-docs</span><span class="w">
</span><span class="w">    </span><span class="nt">rev</span><span class="p">:</span><span class="w"> </span><span class="l">v1.7.0</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">blacken-docs</span><span class="w">
</span><span class="w">        </span><span class="nt">additional_dependencies</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">black==19.3b0]</span><span class="w">
</span><span class="w">  </span>- <span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">local</span><span class="w">
</span><span class="w">    </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">markdownlint</span><span class="w">
</span><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">markdownlint</span><span class="w">
</span><span class="w">        </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Lint Markdown files&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">entry</span><span class="p">:</span><span class="w"> </span><span class="l">markdownlint &#39;**/*.md&#39; --fix --ignore node_modules --config &#34;./.markdownlint.json&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">language</span><span class="p">:</span><span class="w"> </span><span class="l">node</span><span class="w">
</span><span class="w">        </span><span class="nt">types</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">markdown]</span><span class="w">
</span></code></pre></div><p>These hooks check for accidental secret commits, format Python files using <a href="https://github.com/psf/black">Black</a>, format Python snippets in Markdown files using <a href="https://github.com/asottile/blacken-docs"><code>blacken-docs</code></a>, and <a href="https://github.com/igorshubovych/markdownlint-cli">lint Markdown files</a> as well. To install them, just type <code>pre-commit install</code>.</p>
<p>There are likely even more useful hooks available for your particular use case: see <a href="https://pre-commit.com/hooks.html">supported hooks</a> to explore.</p>
<h2 id="useful-gitignores">Useful gitignores</h2>
<p>An underappreciated way to improve your team&rsquo;s daily development experience is to make sure your project uses a well-rounded <code>.gitignore</code> file. It can help prevent files containing secrets from being committed, and can additionally save developers hours of tedium by ensuring you&rsquo;re never sifting through a <code>git diff</code> of generated files.</p>
<p>To efficiently create a <a href="https://www.toptal.com/developers/gitignore/api/python,django">gitignore for Python and Django projects</a>, Toptal&rsquo;s <a href="https://gitignore.io">gitignore.io</a> can be a nice resource for generating a robust <code>.gitignore</code> file.</p>
<p>I still recommend examining the generated results yourself to ensure that ignored files suit your use case, and that nothing you want ignored is commented out.</p>
<h2 id="continuous-testing-with-github-actions">Continuous testing with GitHub Actions</h2>
<p>If your team works on GitHub, setting up a testing process with Actions is low-hanging fruit.</p>
<p>Tests that run in a consistent environment on every pull request can help eliminate &ldquo;works on my machine&rdquo; conundrums, as well as ensure no one&rsquo;s sitting around waiting for a test to run locally.</p>
<p>A hosted CI environment like GitHub Actions can also help when running integration tests that require using managed services resources. You can use <a href="https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets">encrypted secrets in a repository</a> to grant the Actions runner access to resources in a testing environment, without worrying about creating testing resources and access keys for each of your developers to use.</p>
<p>I&rsquo;ve written on many occasions about setting up Actions workflows, including <a href="/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/">using one to run your Makefile</a>, and <a href="/blog/publishing-github-event-data-with-github-actions-and-pages/">how to integrate GitHub event data</a>. GitHub even <a href="https://github.blog/2020-06-26-github-action-hero-victoria-drake/">interviewed me about Actions</a> once.</p>
<p>For Django projects, here&rsquo;s a GitHub Actions workflow that runs tests with a consistent Python version whenever someone opens a pull request in the repository.</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Run Django tests</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="l">pull_request</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">test</span><span class="p">:</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up Python</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-python@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">python-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install dependencies</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">make install</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Run tests</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">make test</span><span class="w">
</span></code></pre></div><p>For the installation and test commands, I&rsquo;ve simply utilized the <a href="#a-custom-cli-tool-for-your-django-project">Makefile</a> that&rsquo;s been checked in to the repository. A benefit of using your Makefile commands in your CI test workflows is that you only need to keep them updated in one place &ndash; your Makefile! No more &ldquo;why is this working locally but not in CI??!?&rdquo; headaches.</p>
<p>If you want to step up your security game, you can add <a href="https://github.com/victoriadrake/django-security-check">Django Security Check</a> as an Action too.</p>
<h2 id="set-up-your-django-project-for-success">Set up your Django project for success</h2>
<p>Want to help keep your development team happy? Set them up for success with these best practices for Django development. Remember, an ounce of brainpower is worth a pound of software!</p>
]]></content></entry><entry><title type="html">How GitHub Codespaces increases productivity and lowers barriers</title><link href="https://victoria.dev/blog/how-github-codespaces-increases-productivity-and-lowers-barriers/"/><id>https://victoria.dev/blog/how-github-codespaces-increases-productivity-and-lowers-barriers/</id><author><name>Victoria Drake</name></author><published>2020-08-15T16:08:08-04:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>The most recent integration between Visual Studio Code and GitHub can help make development accessible and welcoming: Codespaces in GitHub!</p>
<p>Now in beta, <a href="https://docs.github.com/en/github/developing-online-with-codespaces/about-codespaces">GitHub Codespaces</a> provide an online, in-the-browser IDE powered by Visual Studio Code. This lets you use this full-featured IDE, complete with extensions, terminal, Git commands, and all the settings you&rsquo;re accustomed to, on any machine. You can now bring your development workflow anywhere using a tablet or other browser-based device.</p>
<p>Codespaces is great news for open source contributors, too. <a href="https://docs.github.com/en/github/developing-online-with-codespaces/configuring-codespaces-for-your-project">Adding a codespace configuration</a> to your project is a great way to invite new folks to easily start contributing.</p>
<p>A new open source contributor or new hire at your organization can quickly fire up a codespace and get hacking on a <code>good first issue</code> with no local environment set up or installations necessary!</p>
<p><img src="open-with-codespaces-button.png" alt="Starting a new codespace"></p>
<p>We&rsquo;ve added codespace configuration settings over at the <a href="https://github.com/OWASP/wstg">OWASP Web Security Testing Guide (WSTG)</a>. Want to take it for a spin? See our <a href="https://github.com/OWASP/wstg/issues">open issues</a>.</p>
<h2 id="configuring-codespaces">Configuring Codespaces</h2>
<p>You can use Visual Studio Code&rsquo;s <code>.devcontainer</code> folder to configure a development container for your repository as well.</p>
<p>Many <a href="https://github.com/microsoft/vscode-dev-containers/tree/master/containers">pre-built containers are available</a> &ndash; just copy the <code>.devcontainer</code> you need to your repository root. If your repository doesn&rsquo;t have one, a <a href="https://github.com/microsoft/vscode-dev-containers/tree/master/containers/codespaces-linux">default base Linux image</a> will be used.</p>
<p>Here&rsquo;s a reason to remove <code>.vscode</code> from your <code>.gitignore</code> file. Any new codespaces created in your repository will now respect settings found at <code>.vscode/settings.json</code>. This means that your online IDE can have the same Workspace configuration as you have on your local machine. Isn&rsquo;t that useful!</p>
<h2 id="making-codespaces-personal">Making Codespaces personal</h2>
<p>For next-level <a href="https://docs.github.com/en/github/developing-online-with-codespaces/personalizing-codespaces-for-your-account">dotfiles personalization</a>, consider committing relevant files from your local <code>dotfiles</code> folder as a public GitHub repository at <code>yourusername/dotfiles</code>.</p>
<p>When you create a new codespace, this brings in your configurations, such as shell aliases and preferences, by creating symlinks to dotfiles in your codespace <code>$HOME</code>. This personalizes all the codespaces you create in your account.</p>
<p>Need some inspiration? Browse <a href="https://github.com/victoriadrake/dotfiles">my dotfiles repository on GitHub</a>.</p>
<p><a href="https://docs.github.com/en/github/developing-online-with-codespaces/developing-in-a-codespace">Developing in a codespace</a> is a familiar experience for Visual Studio Code users, right down to running an application locally.</p>
<p>Thanks to <a href="https://docs.github.com/en/github/developing-online-with-codespaces/developing-in-a-codespace">port forwarding</a>, when I run an application in a codespace terminal, clicking on the resulting <code>localhost</code> URL takes me to the appropriate port as output from my codespace.</p>
<p>When I&rsquo;m working on this website in my codespace, for example, I run <code>hugo serve</code> then click the provided <code>localhost:1313</code> link to see a preview of my changes in another browser tab.</p>
<p>Want to stay in sync between devices? There&rsquo;s an extension for that. You can <a href="https://docs.github.com/en/github/developing-online-with-codespaces/connecting-to-your-codespace-from-visual-studio-code">connect to your codespace from Visual Studio Code</a> on your local machine so you can always pick up right where you left off.</p>
<h2 id="develop-anywhere">Develop anywhere</h2>
<p>Codespaces is a super exciting addition to my GitHub workflow. It allows me to access my full development process pretty much anywhere, using devices like my iPad.</p>
<p>It&rsquo;ll also make it easier for new open source contributors or new hires at your organization to hit the ground running with a set-up IDE. If you have access to the limited beta, I invite you to spin up a codespace and try <a href="https://github.com/OWASP/wstg/issues">contributing to the WSTG</a>, or to <a href="https://github.com/victoriadrake?tab=repositories">an issue on one of my open source projects</a>.</p>
<p>I&rsquo;m looking forward to general availability and seeing what the open source community will dream up for GitHub Codespaces next!</p>
<p>And yes &ndash; codespaces support <a href="https://github.com/victoriadrake/kabukicho-vscode">your favorite Visual Studio Code theme</a>. 😈</p>
<figure class="screenshot"><img src="codespace.png"
         alt="A screenshot of my codespace"/><figcaption>
            <p>Screenshot of a codespace with the Kabukichō theme for Visual Studio Code</p>
        </figcaption>
</figure>

]]></content></entry><entry><title type="html">How to create a self-documenting Makefile</title><link href="https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/"/><id>https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/</id><author><name>Victoria Drake</name></author><published>2020-08-05T08:55:19-04:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>My new favorite way to completely underuse a Makefile? Creating personalized, per-project repository workflow command aliases that you can check in.</p>
<p>Can a Makefile improve your DevOps and keep developers happy? How awesome would it be if a new developer working on your project didn&rsquo;t start out by copying and pasting commands from your README? What if instead of:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">pip3 install pipenv
pipenv shell --python 3.8
pipenv install --dev
npm install
pre-commit install --install-hooks
<span class="c1"># look up how to install Framework X...</span>
<span class="c1"># copy and paste from README...</span>
npm run serve
</code></pre></div><p>&hellip; you could just type:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">make start
</code></pre></div><p>&hellip;and then start working?</p>
<h2 id="making-a-difference">Making a difference</h2>
<p>I use <code>make</code> every day to take the tedium out of common development activities like updating programs, installing dependencies, and testing. To do all this with a Makefile (GNU make), we use <a href="https://www.gnu.org/software/make/manual/make.html#Rules">Makefile rules</a> and <a href="https://www.gnu.org/software/make/manual/make.html#Recipes">recipes</a>. Similar parallels exist for POSIX flavor make, like <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html#tag_20_76_13_04">Target Rules</a>; here&rsquo;s a <a href="https://nullprogram.com/blog/2017/08/20/">great article</a> on POSIX-compatible Makefiles.</p>
<p>Here&rsquo;s some examples of things we can <code>make</code> easier (sorry):</p>
<div class="highlight"><pre class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="nf">update</span><span class="o">:</span> <span class="c">## Do apt upgrade and autoremove
</span><span class="c"></span>    sudo apt update <span class="o">&amp;&amp;</span> sudo apt upgrade -y
    sudo apt autoremove -y

<span class="nf">env</span><span class="o">:</span>
    pip3 install pipenv
    pipenv shell --python 3.8

<span class="nf">install</span><span class="o">:</span> <span class="c">## Install or update dependencies
</span><span class="c"></span>    pipenv install --dev
    npm install
    pre-commit install --install-hooks

<span class="nf">serve</span><span class="o">:</span> <span class="c">## Run the local development server
</span><span class="c"></span>    hugo serve --enableGitInfo --disableFastRender --environment development

<span class="nf">initial</span><span class="o">:</span> <span class="n">update</span> <span class="n">env</span> <span class="n">install</span> <span class="n">serve</span> <span class="c">## Install tools and start development server
</span></code></pre></div><p>Now we have some command-line aliases that you can check in! Great idea! If you&rsquo;re wondering what&rsquo;s up with that weird <code>##</code> comment syntax, it gets better.</p>
<h2 id="a-self-documenting-makefile">A self-documenting Makefile</h2>
<p>Aliases are great, if you remember what they all are and what they do without constantly typing <code>cat Makefile</code>. Naturally, you need a <code>help</code> command:</p>
<div class="highlight"><pre class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">help</span>
<span class="nf">help</span><span class="o">:</span> <span class="c">## Show this help
</span><span class="c"></span>    @egrep -h <span class="s1">&#39;\s##\s&#39;</span> <span class="k">$(</span>MAKEFILE_LIST<span class="k">)</span> <span class="p">|</span> sort <span class="p">|</span> awk <span class="s1">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</code></pre></div><p>With a little command-line magic, this <code>egrep</code> command takes the output of <code>MAKEFILE_LIST</code>, sorts it, and uses <code>awk</code> to find strings that follow the <code>##</code> pattern. It then prints a helpful formatted version of the comments.</p>
<p>We&rsquo;ll put it at the top of the file so it&rsquo;s the default target. Now to see all our handy shortcuts and what they do, we just run <code>make</code>, or <code>make help</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">help                 Show this help
initial              Install tools and start development server
install              Install or update dependencies
serve                Run the local development server
update               Do apt upgrade and autoremove
</code></pre></div><p>Now we have our very own personalized and project-specific CLI tool!</p>
<p>The possibilities for improving your DevOps flow with a self-documenting Makefile are almost endless. You can use one to simplify any workflow and produce some very happy developers.</p>
<p>Please enjoy the (live!) Makefile I use to manage and develop this Hugo site. I hope it inspires you!</p>
<details>
<summary>My Hugo site Makefile</summary>
<div class="highlight"><pre class="chroma"><code class="language-Makefile" data-lang="Makefile">
<span class="nv">SHELL</span> <span class="o">:=</span> /bin/bash
<span class="nf">.POSIX</span><span class="o">:</span>
<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">help</span> <span class="n">env</span> <span class="n">install</span> <span class="n">upgrade</span>-<span class="n">hugo</span> <span class="n">serve</span> <span class="n">build</span> <span class="n">start</span> <span class="n">initial</span>

<span class="nf">help</span><span class="o">:</span> <span class="c">## Show this help
</span><span class="c"></span>	@egrep -h <span class="s1">&#39;\s##\s&#39;</span> <span class="k">$(</span>MAKEFILE_LIST<span class="k">)</span> <span class="p">|</span> sort <span class="p">|</span> awk <span class="s1">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>

<span class="nf">env</span><span class="o">:</span>
	pip3 install pipenv

<span class="nf">shell</span><span class="o">:</span> <span class="c">## Enter the virtual environment
</span><span class="c"></span>	pipenv shell

<span class="nf">install</span><span class="o">:</span> <span class="c">## Install or update dependencies
</span><span class="c"></span>	pipenv install --dev
	npm install
	npm install -g markdownlint-cli
	pre-commit install --install-hooks

<span class="nv">HUGO_VERSION</span><span class="o">:=</span><span class="k">$(</span>shell curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest <span class="p">|</span> grep <span class="s1">&#39;tag_name&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;&#34;&#39;</span> -f <span class="m">4</span> <span class="p">|</span> cut -c 2-<span class="k">)</span>

<span class="nf">upgrade-hugo</span><span class="o">:</span> <span class="c">## Get the latest Hugo
</span><span class="c"></span>	mkdir tmp/ <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>	<span class="nb">cd</span> tmp/ <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>	curl -sSL https://github.com/gohugoio/hugo/releases/download/v<span class="k">$(</span>HUGO_VERSION<span class="k">)</span>/hugo_extended_<span class="k">$(</span>HUGO_VERSION<span class="k">)</span>_Linux-64bit.tar.gz <span class="p">|</span> tar -xvzf- <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>	sudo mv hugo /usr/local/bin/ <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>	<span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>	rm -rf tmp/
	hugo version

<span class="nf">serve</span><span class="o">:</span> <span class="c">## Run the local development server
</span><span class="c"></span>	hugo serve --enableGitInfo --disableFastRender --environment development

<span class="nf">future</span><span class="o">:</span> <span class="c">## Run the local development server in the future
</span><span class="c"></span>	hugo serve --enableGitInfo --buildFuture --disableFastRender --environment development

<span class="nf">build</span><span class="o">:</span> <span class="c">## Lock dependencies and build site
</span><span class="c"></span>	pipenv lock
	hugo --minify --cleanDestination

<span class="nf">start</span><span class="o">:</span> <span class="n">upgrade</span>-<span class="n">hugo</span> <span class="n">serve</span> <span class="c">## Update Hugo and start development server
</span><span class="c"></span>
<span class="nf">initial</span><span class="o">:</span> <span class="n">env</span> <span class="n">install</span> <span class="n">upgrade</span>-<span class="n">hugo</span> <span class="n">serve</span> <span class="c">## Install tools and start development server
</span><span class="c"></span>


</code></pre></div></details>
]]></content></entry><entry><title type="html">Secure web forms for the front-end developer</title><link href="https://victoria.dev/blog/secure-web-forms-for-the-front-end-developer/"/><id>https://victoria.dev/blog/secure-web-forms-for-the-front-end-developer/</id><author><name>Victoria Drake</name></author><published>2019-12-11T08:27:31-04:00</published><updated>2021-07-05T13:44:28+00:00</updated><content type="html"><![CDATA[<p>While cybersecurity is often thought of in terms of databases and architecture, much of a strong security posture relies on elements in the domain of the front-end developer. For certain potentially devastating vulnerabilities like <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection">SQL injection</a> and <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">Cross-Site Scripting (XSS)</a>, a well-considered user interface is the first line of defense.</p>
<p>Here are a few areas of focus for front-end developers who want to help fight the good fight.</p>
<h2 id="control-user-input">Control user input</h2>
<p>A whole whack of <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">crazy things</a> can happen when developers build a form that fails to control user input. To combat vulnerabilities like injection, it&rsquo;s important to validate or sanitize user input.</p>
<p>Input can be validated by constraining it to known values, such as by using <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Semantic_input_types">semantic input types</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes">validation-related attributes</a> in forms. Frameworks like <a href="https://www.djangoproject.com/">Django</a> also help by providing <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types">field types</a> for this purpose. Sanitizing data can be done by removing or replacing contextually-dangerous characters, such as by using a whitelist or escaping the input data.</p>
<p>While it may not be intuitive, even data that a user submits to their own area on a site should be validated. One of the fastest viruses to proliferate was the <a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)">Samy worm</a> on MySpace (yes, I&rsquo;m old), thanks to code that Samy Kamkar was able to inject into his own profile page. Don&rsquo;t directly return any input to your site without thorough validation or santization.</p>
<p>For some further guidance on battling injection attacks, see the <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Injection_Prevention_Cheat_Sheet.md">OWASP Injection Prevention Cheat Sheet</a>.</p>
<h2 id="beware-hidden-fields">Beware hidden fields</h2>
<p>Adding <code>type=&quot;hidden&quot;</code> is an enticingly convenient way to hide sensitive data in pages and forms, but unfortunately not an effective one. With tools like <a href="https://www.zaproxy.org/">ZapProxy</a> and even inspection tools in plain ol' web browsers, users can easily click to reveal tasty bits of invisible information. Hiding checkboxes can be a neat hack for creating CSS-only switches, but hidden fields do little to contribute to security.</p>
<h2 id="carefully-consider-autofill-fields">Carefully consider autofill fields</h2>
<p>When a user chooses to give you their <a href="https://en.wikipedia.org/wiki/Personal_data">Personally Identifiable Information</a> (PII), it should be a conscious choice. Autofill form fields can be convenient - for both users and attackers. <a href="https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/">Exploits using hidden fields can harvest PII</a> previously captured by an autocomplete field.</p>
<p>Many users aren&rsquo;t even aware what information their browser&rsquo;s autofill has stored up. Use these fields sparingly, and disable autofilled forms for particularly sensitive data.</p>
<p>It&rsquo;s important to also weigh your risk profile against its trade-offs. If your project must be <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</a> compliant, disabling autocomplete can break your input for different modalities. For more, see <a href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html">1.3.5: Identify Input Purpose in WCAG 2.1</a>.</p>
<h2 id="keep-errors-generic">Keep errors generic</h2>
<p>While it may seem helpful to let users know whether a piece of data exists, it&rsquo;s also very helpful to attackers. When dealing with accounts, emails, and PII, it&rsquo;s most secure to err (🥁) on the side of less. Instead of returning &ldquo;Your password for this account is incorrect,&rdquo; try the more ambiguous feedback &ldquo;Incorrect login information,&rdquo; and avoid revealing whether the username or email is in the system.</p>
<p>In order to be more helpful, provide a prominent way to contact a human in case an error should arise. Avoid revealing information that isn&rsquo;t necessary. If nothing else, for heaven&rsquo;s sake, don&rsquo;t suggest data that&rsquo;s a close match to the user input.</p>
<h2 id="be-a-bad-guy">Be a bad guy</h2>
<p>When considering security, it&rsquo;s helpful to take a step back, observe the information on display, and ask yourself how a malicious attacker would be able to utilize it. Play devil&rsquo;s advocate. If a bad guy saw this page, what new information would they gain? Does the view show any PII?</p>
<p>Ask yourself if everything on the page is actually necessary for a genuine user. If not, redact or remove it. Less is safer.</p>
<h2 id="security-starts-at-the-front-door">Security starts at the front door</h2>
<p>These days, there&rsquo;s a lot more overlap between coding on the front end and the back end. To create a well-rounded and secure application, it helps to have a general understanding of ways attackers can get their foot in the front door.</p>
]]></content></entry><entry><title type="html">Git commit practices your future self will thank you for</title><link href="https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/"/><id>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</id><author><name>Victoria Drake</name></author><published>2018-08-06T08:54:56-04:00</published><updated>2021-07-05T13:44:27+00:00</updated><content type="html"><![CDATA[<p>A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?</p>
<p>Here&rsquo;s how you can create and maintain a clean and orderly Git commit history using <a href="#write-great-git-commit-messages-with-a-template">message templates</a>, <a href="#one-change-per-commit-how-to-squash-git-commits">learning how to squash commits</a>, <a href="#git-stash">using git stash</a>, and <a href="#tag-release-versions-using-annotated-git-tags">creating annotated commit tags</a>.</p>
<h2 id="what-it-means-to-commit-responsibly">What it means to commit responsibly</h2>
<p>Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today. Being responsible can mean a lot of things to different people, so I enlisted some of <a href="https://mastodon.technology/@victoria/">mastodon.technology</a> and <a href="https://dev.to/victoria/what-does-it-mean-to-commit-responsibly-22mi">dev.to</a> to help round out my list. From those (really great) threads, I distilled these main points:</p>
<blockquote>
<p><strong>Committing responsibly</strong></p>
<ol>
<li>Provide and/or use tests to avoid committing bugs or broken builds</li>
<li>Write clean code that meets style specifications</li>
<li>Use descriptive commit messages that reference related discussion</li>
<li>Make only one change per commit and avoid including unrelated changes</li>
</ol>
</blockquote>
<p>Some of the above is achieved through maintaining a short feedback loop that helps you improve your code quality while staying accountable to yourself. <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">I wrote another article</a> that discusses this in detail, especially the part about <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/#block-out-time-for-code-review">code review</a>. Other items on this list have to do specifically with making commits in Git. There are some features of Git that can benefit us in these areas, as can harnessing tools like Vim. I&rsquo;ll cover those topics here.</p>
<p>If the majority of your Git commits so far have been created with something like <code>git commit -m &quot;Bug fixes&quot;</code> then this is the article for you!</p>
<h2 id="write-great-git-commit-messages-with-a-template">Write great Git commit messages with a template</h2>
<p>I think <a href="https://github.com/torvalds/subsurface-for-dirk/commit/b6590150d68df528efd40c889ba6eea476b39873">Linus</a> would be very happy if we didn&rsquo;t use <code>git commit -m &quot;Fix bug&quot;</code> in a public repository ever again. As very well put in <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this classic post</a> and <a href="https://chris.beams.io/posts/git-commit/">the seven rules of a great Git commit message</a>:</p>
<blockquote>
<p>A properly formed Git commit subject line should always be able to complete the following sentence:</p>
<p>If applied, this commit will <em>your subject line here</em></p>
</blockquote>
<p><a href="http://who-t.blogspot.com/2009/12/on-commit-messages.html">This other classic post</a> also discusses three questions that the body of the commit message should answer:</p>
<blockquote>
<p>Why is it necessary?
How does it address the issue?
What effects does the patch have?</p>
</blockquote>
<p>This can be a lot to remember to cover, but there&rsquo;s a slick way to have these prompts at hand right when you need it. You can set up a commit message template by using the <code>commit.template</code> <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">configuration value</a>.</p>
<p>To set it, configure Git to use a template file (for example, <code>.gitmessage</code> in your home directory), then create the template file with Vim:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git config --global commit.template ~/.gitmessage
vim ~/.gitmessage
</code></pre></div><p>When we run <code>git commit</code> without the <code>-m</code> message flag, the editor will open with our helpful template ready to go. Here&rsquo;s my commit message template:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">## If applied, this commit will...
## [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]


## Why is it necessary? (Bug fix, feature, improvements?)
-
## How does the change address the issue?
-
## What side effects does this change have?
-
</code></pre></div><p>I&rsquo;m a fan of this format because commented lines are not included in the final message. I can simply fill in the blank lines with text and bullet points under the prompts, and it comes out looking something like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">Fix #16 missing CSS variables
- Fix for unstyled elements
- Add background color, height for code blocks
- Only affects highlight class
</code></pre></div><h3 id="reference-related-discussion">Reference related discussion</h3>
<p>Issue trackers in <a href="https://help.github.com/articles/closing-issues-using-keywords/">GitHub</a> and <a href="https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html">Bitbucket</a> both recognize the keywords <code>close</code>, <code>fix</code>, and <code>resolve</code> followed immediately by the issue or pull request number. These keywords conveniently help us close the referenced issue or pull request, and this helps maintain a clear trail of changes. <a href="https://docs.gitlab.com/ee/user/project/issues/crosslinking_issues.html">GitLab</a>, and issue trackers like <a href="https://confluence.atlassian.com/jirasoftwarecloud/referencing-issues-in-your-development-work-777002789.html">Jira</a> offer similar functionalities.</p>
<h3 id="use-helpful-vim-settings-for-git-commit-messages">Use helpful Vim settings for git commit messages</h3>
<p>By adding a few lines to our Vim configuration, we can make writing great git commit messages easy. We can add these lines to <code>~/.vimrc</code> to turn on syntax highlighting in general, and spell check and text wrapping for commit messages in particular:</p>
<div class="highlight"><pre class="chroma"><code class="language-vimrc" data-lang="vimrc"><span class="c">&#34; Filetype detection, plugins, and indent rules</span><span class="err">
</span><span class="err"></span><span class="nx">filetype</span> <span class="nx">plugin</span> <span class="nx">indent</span> <span class="nx">on</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Syntax highlighting</span><span class="err">
</span><span class="err"></span><span class="nx">syntax</span> <span class="nx">on</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Spell check and line wrap just for git commit messages</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">Filetype</span> <span class="nx">gitcommit</span> <span class="nx">setlocal</span> <span class="nx">spell</span> <span class="nx">textwidth</span><span class="p">=</span><span class="m">72</span><span class="err">
</span></code></pre></div><p>If you&rsquo;re curious, you can find my full <code>~/.vimrc</code> in my <a href="https://github.com/victoriadrake/dotfiles">dotfiles</a>.</p>
<p>Other editors have settings that can help us out as well. I came across <a href="https://dev.to/shreyasminocha/how-i-do-my-git-commits-34d">these for Sublime Text 3</a> and <a href="https://github.com/Microsoft/vscode-docs/blob/master/docs/getstarted/tips-and-tricks.md#language-specific-settings">language specific settings for VS Code</a>.</p>
<h2 id="one-change-per-commit-how-to-squash-git-commits">One change per commit: how to squash Git commits</h2>
<figure><img src="git-commit-squash.png"
         alt="A doodle of squash"/><figcaption>
            <p>Still life Git</p>
        </figcaption>
</figure>

<p>Let&rsquo;s get one thing out of the way first: rewriting Git history just for the sake of having a pretty tree, especially with public repositories, is generally not advisable. It&rsquo;s kind of like going back in time, where changes you make to your version of the project cause it to look completely different from a version that someone else forked from a point in history that you&rsquo;ve now erased - I mean, haven&rsquo;t you seen <em>Back to the Future Part II</em>? (If you&rsquo;d rather maintain that only one <em>Back to the Future</em> movie was ever made, thus sparing your future self from having to watch the sequels, I get it.)</p>
<p>Here&rsquo;s the main point. If you&rsquo;ve pushed messy commits to a public repository, I say go right ahead and leave them be, instead of complicating things further. (We all learn from our embarrassments, especially the public ones - I&rsquo;m looking at you, past-Vicky.) If your messy commits currently only exist on your local version, great! We can tidy them up into one clean, well-described commit that we&rsquo;ll be proud to push, and no one will be the wiser.</p>
<p>There are a couple different ways to squash commits, and choosing the appropriate one depends on what we need to achieve.</p>
<p>The following examples are illustrated using <code>git log --graph</code>, with some options for brevity. We can set a handy alias to see this log format in our terminal with:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git config --global alias.plog <span class="s2">&#34;log --graph --pretty=format:&#39;%h -%d %s %n&#39; --abbrev-commit --date=relative --branches&#34;</span>
</code></pre></div><p>Then we just do <code>git plog</code> to see the pretty log.</p>
<h3 id="method-1-one-commit-to-rule-the-master-branch">Method #1: one commit to rule the master branch</h3>
<p>This is appropriate when:</p>
<ul>
<li>We&rsquo;re committing directly to master</li>
<li>We don&rsquo;t intend to open a pull request to merge a feature</li>
<li>We don&rsquo;t want to preserve history of branches or changes we haven&rsquo;t yet pushed</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">*   3e8fd79 - (HEAD -&gt; master) Fix a thing
|
*   4f0d387 - Tweak something
|
*   0a6b8b3 - Merge branch &#39;new-article&#39;
|\
| * 33b5509 - (new-article) Update article again again
| |
| * 1782e63 - Update article again
| |
| * 3c5b6a8 - Update article
| |
* | f790737 - (master) Tweak unrelated article
|/
|
* 65af7e7 Add social media link
|
* 0e3fa32 (origin/master, origin/HEAD) Update theme
</code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 7f9a127 - (HEAD -&gt; master) Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</code></pre></div><p>Here&rsquo;s how to do it - hold on to your hoverboards, it&rsquo;s super complicated:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git reset --soft origin/master
git commit
</code></pre></div><p>Yup that&rsquo;s all. We can delete the unwanted branch with <code>git branch -D new-article</code>.</p>
<h3 id="method-2-not-_that_-much">Method #2: not <em>that</em> much</h3>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash the last <em>x</em> commits but not <em>all</em> commits since <code>origin/master</code></li>
<li>We want to open a pull request to merge a branch</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 13a070f - (HEAD -&gt; new-article) Finish new article
|
* 78e728a - Edit article draft
|
* d62603c - Add example
|
* 1aeb20e - Update draft
|
* 5a8442a - Add new article draft
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 90da69a - (HEAD -&gt; new-article) Add new article
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</code></pre></div><p>To squash the last five commits on branch <code>new-article</code> into one, we use:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git reset --soft HEAD~5
git commit -m <span class="s2">&#34;New message for the combined commit&#34;</span>
</code></pre></div><p>Where <code>--soft</code> leaves our files untouched and staged, and <code>5</code> can be thought of as &ldquo;the number of previous commits I want to combine.&rdquo;</p>
<p>We can then do <code>git merge master</code> and create our pull request.</p>
<h3 id="method-3-getting-picky">Method #3: getting picky</h3>
<p>Say we had a really confusing afternoon and our Git tree looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* dc89918 - (HEAD -&gt; master) Add link
|
* 9b6780f - Update image asset
|
* 6379956 - Fix CSS bug
|
*   16ee1f3 - Merge master into branch
|\
| |
| * ccec365 - Update list page
| |
* | 033dee7 - Fix typo
| |
* | 90da69a - Add new article
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</code></pre></div><p>We want to retain some of this history, but clean up the commits. We also want to change the messages for some of the commits. To achieve this, we&rsquo;ll use <code>git rebase</code>.</p>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash only some commits</li>
<li>We want to edit previous commit messages</li>
<li>We want to delete or reorder specific commits</li>
</ul>
<p>Git <code>rebase</code> is a powerful tool, and handy once we&rsquo;ve got the hang of it. To change all the commits since <code>origin/master</code>, we do:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git rebase -i origin/master
</code></pre></div><p>Or, we can do:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git rebase -i 0e3fa32
</code></pre></div><p>Where the commit hash is the last commit we want to retain as-is.</p>
<p>The <code>-i</code> option lets us run the interactive rebase tool, which launches our editor with, essentially, a script for us to modify. We&rsquo;ll see a list of our commits in reverse order to the git log, with the oldest at the top:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">pick 90da69a Add new article
pick 033dee7 Fix typo
pick ccec365 Update list page
pick 6379956 Fix CSS bug
pick 9b6780f Update image asset
pick dc89918 Add link

# Rebase 0e3fa32..dc89918 onto 0e3fa32 (6 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &#34;squash&#34;, but discard this commit&#39;s log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
#
~
</code></pre></div><p>The comments give us a handy guide as to what we&rsquo;re able to do. For now, let&rsquo;s squash the commits with small changes into the more significant commits. In our editor, we change the script to look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">pick 90da69a Add new article
squash 033dee7 Fix typo
pick ccec365 Update list page
squash 6379956 Fix CSS bug
squash 9b6780f Update image asset
squash dc89918 Add link
</code></pre></div><p>Once we save the changes, the interactive tool continues to run. It will execute our instructions in sequence. In this case, we see the editor again with the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text"># This is a combination of 2 commits.
# This is the 1st commit message:

Add new article

# This is the commit message #2:

Fix typo

# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
#
# interactive rebase in progress; onto 0e3fa32
# Last commands done (2 commands done):
#    pick 90da69a Add new article
#    squash 033dee7 Fix typo
# Next commands to do (4 remaining commands):
#    pick ccec365 Update list page
#    squash 6379956 Fix CSS bug
# You are currently rebasing branch &#39;master&#39; on &#39;0e3fa32&#39;.
#
# Changes to be committed:
#       modified:   ...
#
~
</code></pre></div><p>Here&rsquo;s our chance to create a new commit message for this first squash, if we want to. Once we save it, the interactive tool will go on to the next instructions. Unless&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">[detached HEAD 3cbad01] Add new article
 1 file changed, 129 insertions(+), 19 deletions(-)
Auto-merging content/dir/file.md
CONFLICT (content): Merge conflict in content/dir/file.md
error: could not apply ccec365... Update list page

Resolve all conflicts manually, mark them as resolved with
&#34;git add/rm &lt;conflicted_files&gt;&#34;, then run &#34;git rebase --continue&#34;.
You can instead skip this commit: run &#34;git rebase --skip&#34;.
To abort and get back to the state before &#34;git rebase&#34;, run &#34;git rebase --abort&#34;.

Could not apply ccec365... Update list page
</code></pre></div><p>Again, the tool offers some very helpful instructions. Once we fix the merge conflict, we can resume the process with <code>git rebase --continue</code>. Our interactive rebase picks up where it left off.</p>
<p>Once all the squashing is done, our Git tree looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 3564b8c - (HEAD -&gt; master) Update list page
|
* 3cbad01 - Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</code></pre></div><p>Phew, much better.</p>
<h2 id="git-stash">Git stash</h2>
<p>If we&rsquo;re in the middle of some work and it&rsquo;s not a good time to commit, but we need to switch branches, <a href="https://git-scm.com/book/en/v1/Git-Tools-Stashing">stashing</a> can be a good option. Stashing lets us save our unfinished work without needing to create a half-assed commit. It&rsquo;s like that pile of paper on your desk representing all the stuff you&rsquo;ve been in the middle of doing since two weeks ago. Yup, that one.</p>
<p>It&rsquo;s as easy as typing <code>git stash</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">Saved working directory and index state WIP on master: 3564b8c Update list page
</code></pre></div><p>The dirty work we&rsquo;re in the midst of is safely tucked away, and our working directory is clean - just as it was after our last commit. To see what&rsquo;s in our stash stack, we do <code>git stash list</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">stash@{0}: WIP on master: 3564b8c Update list page
stash@{1}: WIP on master: 90da69a Add new article
stash@{2}: WIP on cleanup: 0e3fa32 Update theme
</code></pre></div><p>To restore our work in progress, we use <code>git stash apply</code>. Git will try and apply our most recent stashed work. To apply an older stash, we use <code>git stash apply stash@{1}</code> where <code>1</code> is the stash to apply. If changes since stashing our work prevent the stash from reapplying cleanly, Git will give us a merge conflict to resolve.</p>
<p>Applying a stash doesn&rsquo;t remove it from our list. To remove a stash from our stack, we do <code>git stash drop stash@{0}</code> where <code>0</code> is the one we want to remove.</p>
<p>We can also use <code>git stash pop</code> to apply the most recent stash and then immediately remove it from the stack.</p>
<h2 id="tag-release-versions-using-annotated-git-tags">Tag release versions using annotated Git tags</h2>
<p>In the spirit of having a beautiful, clean Git history, there&rsquo;s one more thing we can do to help make our commit log inspire infinite joy in its viewers. If you&rsquo;ve never heard of <code>git tag</code>, your master branch history might look like this&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 0377782 - Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - Add main content (#6)
</code></pre></div><p>Wouldn&rsquo;t it be nice if it looked like this instead?</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">* 0377782 - (tag: v2.1.0) Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - (tag: v2.0.0) Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - (tag: v1.1.0) Add main content (#6)
</code></pre></div><p>We can tag Git commits with anything, but tags are especially helpful for semantic versioning of releases. Sites like <a href="https://help.github.com/articles/creating-releases/">GitHub</a> and <a href="https://docs.gitlab.com/ee/user/project/releases/">GitLab</a> have pages for repositories that list tags, letting viewers of our project browse the release versions. This can be helpful for public projects to differentiate major releases, updates with bug fixes, or beta versions.</p>
<p>There are two types of Git tags: lightweight and annotated. For adding a version tag to commits, we use annotated Git tags.</p>
<p>The <a href="https://git-scm.com/docs/git-tag">Git tag documentation</a> explains it this way:</p>
<blockquote>
<p>Tag objects (created with -a, -s, or -u) are called &ldquo;annotated&rdquo; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &ldquo;lightweight&rdquo; tag is simply a name for an object (usually a commit object).</p>
<p>Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.</p>
</blockquote>
<p>We can think of lightweight tags as bookmarks, and annotated tags as signed releases.</p>
<p>For public repositories, annotated tags allow us to:</p>
<ul>
<li>See who tagged the commit, which may differ from the commit author</li>
<li>See all the tags with <code>git describe</code></li>
<li>Avoid conflicting tag names</li>
</ul>
<p>To create an annotated Git tag and attach it to our current (last) commit, we do:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git tag -a v1.2.0 -m <span class="s2">&#34;Clever release title&#34;</span>
</code></pre></div><p>This tags the commit on our local repository. To push all annotated tags to the remote, we do:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git push --follow-tags
</code></pre></div><p>We can also set our Git configuration to push our annotated tags by default:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git config --global push.followTags <span class="nb">true</span>
</code></pre></div><p>If we then want to skip pushing tags this time, we pass <code>--no-follow-tags</code>.</p>
<h2 id="practice-responsible-commits">Practice responsible commits</h2>
<p>A little time invested in getting familiar with these tools and practices can make your commits even more useful and well-crafted. With a little practice, these processes will become second nature. You can make it even easier by creating a personal commit checklist on paper to keep handy while you work - or if that isn&rsquo;t fun enough, <a href="/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/">make it an interactive pre-commit hook.</a></p>
<p>Creating clean, useful, and responsible Git commits says a lot about you. Especially in remote work, Git commits may be a primary way that people interact with you over projects. With a little practice and effort, you can make your commit habits an even better reflection of your best work - work that is evidently created with care and pride.</p>
<p>If you enjoyed this post, there&rsquo;s a lot more where it came from! I write about computing, cybersecurity, and leading great technical teams. <a href="https://victoria.dev">Subscribe on victoria.dev</a> to see new articles first, and check out the ones below!</p>
]]></content></entry></feed>