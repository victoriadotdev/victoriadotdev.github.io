<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Infosec on victoria.dev</title><link>https://victoria.dev/tags/infosec/</link><description>Recent content in Infosec on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Mon, 26 Aug 2019 09:01:23 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/infosec/index.xml" rel="self" type="application/rss+xml"/><item><title>How to set up OpenVPN on AWS EC2 and fix DNS leaks on Ubuntu 18.04 LTS</title><link>https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</link><pubDate>Mon, 26 Aug 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</guid><description>A guide for setting up your own private VPN service, and understanding and fixing a DNS leak.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/1-subscribe_hu68a3a904d7b732bc9406197bded259ae_170219_640x0_resize_q75_box.jpg" width="640" height="428"/>
&lt;p&gt;While rolling your own Virtual Private Network (VPN) is far more complicated than choosing a VPN provider from someone&amp;rsquo;s &amp;ldquo;best VPN 2019&amp;rdquo; list, the more I learn about why someone should use a VPN at all, the less appealing the latter option becomes. Besides the dangers of trusting a fake VPN app or falling victim to a lookalike URL, even &lt;em&gt;legit&lt;/em&gt; VPN service providers have pressures and motivations that may not be aligned with the privacy you hope to be purchasing.&lt;/p&gt;
&lt;p&gt;Usually, the point of using a VPN is to gain a layer of privacy by disguising your location. If you aren&amp;rsquo;t currently using one, you can see what the Internet knows about where you are at &lt;a href=&#34;https://dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;. You&amp;rsquo;ll see a big hello, your IP address, and your location. If that&amp;rsquo;s a little unsettling, know that a VPN can help to shield your location and online activities from wandering eyes and opportunistic advertisers. The former might be a too-curious or even malicious public-WiFi-cafe-goer, but the latter, counterintuitively, might be your own household Internet Service Provider (ISP).&lt;/p&gt;
&lt;p&gt;Using a VPN means that the Internet can&amp;rsquo;t easily see your location, and your ISP can&amp;rsquo;t see your unencrypted web traffic (and neither can your curious coffee shop neighbor). Your ISP &lt;em&gt;can&lt;/em&gt; see the amount of data you&amp;rsquo;re sending, in its encrypted form, and that you&amp;rsquo;re sending it to your VPN server - but that&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;Unless you have a &lt;a href=&#34;https://dnsleaktest.com/what-is-a-dns-leak.html&#34;&gt;DNS leak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are still using your ISP&amp;rsquo;s DNS server, they are still able to see all the URLs the server is resolving for you. So they&amp;rsquo;ll know you asked for &lt;code&gt;lastminutebackwax.com&lt;/code&gt;, although they won&amp;rsquo;t be able to decrypt the data that was exchanged with the site. (Is it just me, or does that seem even worse, somehow?)&lt;/p&gt;
&lt;p&gt;Setting up your own instance and VPN service offers some peace of mind over trusting yet another company to do right with your data. Note that a VPN will &lt;em&gt;not&lt;/em&gt; give you complete online anonymity; there are many other ways your Internet presence can be tracked and your location discovered. However, if properly set up, without DNS leaks, you&amp;rsquo;ll have about as much Internet privacy as can be afforded without using &lt;a href=&#34;https://en.wikipedia.org/wiki/Tor_(anonymity_network)&#34;&gt;Tor&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-our-vpn&#34;&gt;Setting up our VPN&lt;/h1&gt;
&lt;p&gt;This post will cover how to set up the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE/&#34;&gt;OpenVPN Access Server&lt;/a&gt; product on AWS Marketplace, running on an &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2 instance&lt;/a&gt;. Then, we&amp;rsquo;ll look at how to fix a &lt;a href=&#34;https://gitlab.gnome.org/GNOME/NetworkManager-openvpn/issues/10&#34;&gt;known NetworkManager bug in Ubuntu 18.04 that might cause DNS leaks&lt;/a&gt;. The whole process should take about fifteen minutes, so grab a â˜• and let&amp;rsquo;s do some adulting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: IDs and IP addresses shown for demonstration in this tutorial are invalid.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-launch-the-openvpn-access-server-on-aws-marketplace&#34;&gt;1. Launch the OpenVPN Access Server on AWS Marketplace&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt; is available on AWS Marketplace. The Bring Your Own License (BYOL) model doesn&amp;rsquo;t actually require a license for up to two connected devices; to connect more clients, you can get &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile/ref=srh_res_product_vendor?ie=UTF8&amp;amp;id=aac3a8a3-2823-483c-b5aa-60022894b89d&#34;&gt;bundled billing&lt;/a&gt; for five, ten, or twenty-five clients, or &lt;a href=&#34;https://openvpn.net/pricing/&#34;&gt;purchase a minimum of ten OpenVPN licenses a la carte&lt;/a&gt; for $15/device/year. For most of us, the two free connected devices will suffice; and if using an EC2 Micro instance, our set up will be &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS Free Tier eligible&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Start by clicking &amp;ldquo;Continue to Subscribe&amp;rdquo; for the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt;, which will bring you to a page that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1-subscribe.jpg#screenshot&#34; alt=&#34;Subscription details page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue to Configuration.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2-configure.jpg#screenshot&#34; alt=&#34;Configure this software page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the EC2 instance type in the right side bar (and consequently, the Monthly Estimate) isn&amp;rsquo;t the one we want - that&amp;rsquo;s okay, we can change it soon. Just ensure that the &amp;ldquo;Region&amp;rdquo; chosen is where we want the instance to be located. Generally, the closer it is to the physical location of your client (your laptop, in this case), the faster your VPN will be. Click &amp;ldquo;Continue to Launch.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3-launch.jpg#screenshot&#34; alt=&#34;Launch this software page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On this page, we&amp;rsquo;ll change three things:&lt;/p&gt;
&lt;h3 id=&#34;1-the-ec2-instance-type&#34;&gt;1. The EC2 Instance type&lt;/h3&gt;
&lt;p&gt;Different types of EC2 (Elastic Compute Cloud) instances will offer us different levels of computing power. If you plan to use your instance for something more than just this VPN, you may want to choose something with higher memory or storage capacity, depending on how you plan to use it. We can view each instance offering on the &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/&#34;&gt;Amazon EC2 Instance Types page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For simple VPN use, the &lt;code&gt;t2.nano&lt;/code&gt; or &lt;code&gt;t2.micro&lt;/code&gt; instances are likely sufficient. Only the Micro instance is Free Tier eligible.&lt;/p&gt;
&lt;h3 id=&#34;2-the-security-group-settings&#34;&gt;2. The Security Group settings&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&#34;&gt;Security Group&lt;/a&gt; is a profile, or collection of settings, that Amazon uses to control access to our instance. If you&amp;rsquo;ve set up other AWS products before, you may already have some groups with their own rules defined. We should be careful to understand the reasons for our Security Group settings, as these define how public or private our instance is, and consequently, who has access to it.&lt;/p&gt;
&lt;p&gt;If we click &amp;ldquo;Create New Based on Seller Settings,&amp;rdquo; the OpenVPN server defines some recommended settings for a default Security Group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4-security-group.jpg#screenshot&#34; alt=&#34;Security group settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The default recommended settings are all &lt;code&gt;0.0.0.0/0&lt;/code&gt; for TCP ports 22, 943, 443, and 945, and UDP port 1194. OpenVPN offers an &lt;a href=&#34;https://openvpn.net/vpn-server-resources/amazon-web-services-ec2-byol-appliance-quick-start-guide/#Instance_Launch_Options&#34;&gt;explanation of how the ports are used&lt;/a&gt; on their website. With the default settings, all these ports are left open to support various features of the OpenVPN server. We may wish to restrict access to these ports to a specific IP address or block of addresses (like that of your own ISP) to increase the security of our instance. However, if your IP address frequently changes (like when you travel and connect to a different WiFi network), restricting the ports may not be as helpful as we hope.&lt;/p&gt;
&lt;p&gt;In any case, our instance will require SSH keys to connect to, and the OpenVPN server will be password protected. Unless you have other specific security goals, it&amp;rsquo;s fine to accept the default settings for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give the Security Group a name and brief description, so we know what it&amp;rsquo;s for. Then click &amp;ldquo;Save.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;3-the-key-pair-settings&#34;&gt;3. The Key Pair settings&lt;/h3&gt;
&lt;p&gt;The aforementioned SSH keys are access credentials that we&amp;rsquo;ll use to connect to our instance. We can &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair&#34;&gt;create a key pair&lt;/a&gt; in this section, or you can choose a key pair you may already be using with AWS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5-keys.jpg#screenshot&#34; alt=&#34;Key Pair Settings link&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To create a new set of access credentials, click &amp;ldquo;Create a key pair in EC2&amp;rdquo; to open a new window. Then, click the &amp;ldquo;Create Key Pair&amp;rdquo; blue button. Once you give your key pair a name, it will be created and the private key will automatically download to your machine. It&amp;rsquo;s a file ending with the extension &lt;code&gt;.pem&lt;/code&gt;. Store this key in a secure place on your computer. We&amp;rsquo;ll need to refer to it when we connect to our new EC2 instance.&lt;/p&gt;
&lt;p&gt;We can return to the previous window to select the key pair we just created. If it doesn&amp;rsquo;t show up, hit the little &amp;ldquo;refresh&amp;rdquo; icon next to the drop-down. Once it&amp;rsquo;s selected, hit the shiny yellow &amp;ldquo;Launch&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;We should see a message like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;6-launched.jpg#screenshot&#34; alt=&#34;Launch success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great stuff! Now that our instance exists, let&amp;rsquo;s make sure we can access it and start up our VPN. For a shortcut to the next step, click on the &amp;ldquo;EC2 Console&amp;rdquo; link in the success message.&lt;/p&gt;
&lt;h2 id=&#34;2-associate-an-elastic-ip&#34;&gt;2. Associate an Elastic IP&lt;/h2&gt;
&lt;p&gt;Amazon&amp;rsquo;s &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&#34;&gt;Elastic IP Addresses&lt;/a&gt; provides us with a public IPv4 address controlled by our account, unlike the public IP address tied to our EC2 instance. It&amp;rsquo;s considered a best practice to create one and associate it with our VPN instance. If anything should go wrong with our instance, or if we want to use a new instance for our VPN in the future, the Elastic IP can be disassociated from the current instance and reassociated with our new one. This makes the transition seamless for our connected clients. Think of the Elastic IP like a web domain address that we register - we can point it at whatever we choose.&lt;/p&gt;
&lt;p&gt;We can create a new Elastic IP address on the &lt;a href=&#34;https://console.aws.amazon.com/ec2/&#34;&gt;Amazon EC2 Console&lt;/a&gt;. If you clicked the link from the success message above, we&amp;rsquo;re already there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;7-ec2.jpg#screenshot&#34; alt=&#34;EC2 console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you have more than one instance, take note of the Instance ID of the one we&amp;rsquo;ve just launched.&lt;/p&gt;
&lt;p&gt;In the left sidebar under &amp;ldquo;Network &amp;amp; Security,&amp;rdquo; choose &amp;ldquo;Elastic IPs.&amp;rdquo; Then click the blue &amp;ldquo;Allocate new address&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;8-elasticip.jpg#screenshot&#34; alt=&#34;Allocate new address page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Choose &amp;ldquo;Amazon Pool,&amp;rdquo; then click &amp;ldquo;Allocate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;9-elasticip.jpg#screenshot&#34; alt=&#34;Allocate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! We can click &amp;ldquo;Close&amp;rdquo; to return to the Elastic IP console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;10-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have an Elastic IP, let&amp;rsquo;s associate it with our instance. Select the IP address, then click &amp;ldquo;Actions,&amp;rdquo; and choose &amp;ldquo;Associate address.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;11-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP with instance&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ensure the &amp;ldquo;Instance&amp;rdquo; option is selected, then click the drop-down menu. We should see our EC2 instance ID there. Select it, then click &amp;ldquo;Associate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;12-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! Now that we&amp;rsquo;ll be able to access our VPN instance, let&amp;rsquo;s get our VPN service up and running.&lt;/p&gt;
&lt;h2 id=&#34;3-initialize-openvpn-on-the-ec2-server&#34;&gt;3. Initialize OpenVPN on the EC2 server&lt;/h2&gt;
&lt;p&gt;First, we&amp;rsquo;ll need to connect to the EC2 instance via our terminal. We&amp;rsquo;ll use the private key we created earlier.&lt;/p&gt;
&lt;p&gt;Open a new terminal window and navigate to the directory containing the private key &lt;code&gt;.pem&lt;/code&gt; file. We&amp;rsquo;ll need to set its permissions with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo chmod &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; &amp;lt;name&amp;gt;.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to substitute &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; with the name of your key.&lt;/p&gt;
&lt;p&gt;This sets the file permissions to &lt;code&gt;-r--------&lt;/code&gt; so that it can only be read by the user (you). It may help to protect the private key from read and write operations by other users, but more pertinently, will prevent AWS from throwing an error when we try to connect to our instance.&lt;/p&gt;
&lt;p&gt;We can now do just that by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -i &amp;lt;name&amp;gt;.pem openvpnas@&amp;lt;elastic ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user &lt;code&gt;openvpnas&lt;/code&gt; is set up by the OpenVPN Access Server to allow us to connect to our instance. Replace &lt;code&gt;&amp;lt;elastic ip&amp;gt;&lt;/code&gt; with the Elastic IP address we just associated.&lt;/p&gt;
&lt;p&gt;We may get a message saying that the authenticity of our host can&amp;rsquo;t be established. As long as we&amp;rsquo;ve typed the Elastic IP correctly, we can go ahead and answer &amp;ldquo;yes&amp;rdquo; to the prompt.&lt;/p&gt;
&lt;p&gt;Upon the initial connection to the OpenVPN instance, a set up wizard called &amp;ldquo;Initial Configuration Tool&amp;rdquo; should automatically run. (If, for some reason, it doesn&amp;rsquo;t, or you panic-mashed a button, we can restart it with &lt;code&gt;sudo ovpn-init â€“ec2&lt;/code&gt;.) We&amp;rsquo;ll be asked to accept the agreement, then the wizard will help to walk us through some configuration settings for our VPN server.&lt;/p&gt;
&lt;p&gt;You may generally accept the default settings, however, there are a couple questions you may like to answer knowledgeably. They are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Should client traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; Answering &amp;ldquo;yes&amp;rdquo; to this option can prevent &lt;a href=&#34;https://en.wikipedia.org/wiki/Split_tunneling&#34;&gt;split tunneling&lt;/a&gt;, a situation in which you may bypass the VPN when connected to WiFi networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should client DNS traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; This setting can help prevent DNS leaks by specifying that DNS requests should be handled by the VPN. If you answer &amp;ldquo;yes&amp;rdquo; to the previous question, it will be enabled regardless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When asked for our &amp;ldquo;OpenVPN-AS license key&amp;rdquo;, we can leave it blank to use the VPN with up to two clients. If you&amp;rsquo;ve purchased a key, enter it here.&lt;/p&gt;
&lt;p&gt;Once the configuration wizard finishes running, we should see the message &amp;ldquo;Initial Configuration Complete!&amp;rdquo; Before we move on, we should set a password for our server&amp;rsquo;s administration account. To do this, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo passwd openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enter your chosen password twice. Now we&amp;rsquo;re ready to get connected!&lt;/p&gt;
&lt;p&gt;To close the ssh connection, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-connect-the-client-to-the-vpn&#34;&gt;4. Connect the client to the VPN&lt;/h2&gt;
&lt;p&gt;To connect our client (in this case, our laptop) to the VPN and start reaping the benefits, we&amp;rsquo;ll need to do two things; first, obtain our connection profile; second, install the &lt;code&gt;openvpn&lt;/code&gt; daemon.&lt;/p&gt;
&lt;h3 id=&#34;1-get-your-ovpn-connection-profile&#34;&gt;1. Get your &lt;code&gt;.ovpn&lt;/code&gt; connection profile&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll need to download a connection profile for ourselves; this is like a personal configuration file with information, including keys, that the VPN server will need to allow our connection. We can do this by logging in with the password we just set at our Elastic IP address, port 943. This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://&amp;lt;elastic ip&amp;gt;:943/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;https&lt;/code&gt; part is important; without it, the instance won&amp;rsquo;t send any data.&lt;/p&gt;
&lt;p&gt;When we go to this URL, we may see a page warning us that this site&amp;rsquo;s certificate issuer is unknown or invalid. As long as we&amp;rsquo;ve typed our Elastic IP correctly, it&amp;rsquo;s safe to proceed. If you&amp;rsquo;re using Firefox, click &amp;ldquo;Advanced,&amp;rdquo; and then &amp;ldquo;Accept the Risk and Continue.&amp;rdquo; In Chrome, click &amp;ldquo;Advanced,&amp;rdquo; then &amp;ldquo;Proceed to &amp;hellip;&amp;rdquo; the elastic IP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;13-warning.jpg#screenshot&#34; alt=&#34;Security warning page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Log in with the username &lt;code&gt;openvpn&lt;/code&gt; and the password we just set. We&amp;rsquo;ll now be presented with a link to download our user-locked connection profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;14-profile.jpg#screenshot&#34; alt=&#34;Connection profile download page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we click the link, a file named &lt;code&gt;client.ovpn&lt;/code&gt; will download.&lt;/p&gt;
&lt;h3 id=&#34;2-install-and-start-openvpn-on-your-ubuntu-18-04-client&#34;&gt;2. Install and start &lt;code&gt;openvpn&lt;/code&gt; on your Ubuntu 18.04 client&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;openvpn&lt;/code&gt; daemon will allow our client to connect to our VPN server. It can be installed through the default Ubuntu repositories. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for OpenVPN to automatically start when we boot up our computer, we&amp;rsquo;ll need to rename and move the connection profile file. I suggest using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;symlink&lt;/a&gt; to accomplish this, as it leaves our original file more easily accessible for editing, and allows us to store it in any directory we choose. We can create a symlink by running this command in the directory where our file is located:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ln -s client.ovpn /etc/openvpn/&amp;lt;name&amp;gt;.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a symbolic link for the connection profile in the appropriate folder for &lt;code&gt;systemd&lt;/code&gt; to find it. The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be anything. When the Linux kernel has booted, &lt;code&gt;systemd&lt;/code&gt; is used to initialize the services and daemons that the user has set up to run; one of these will now be OpenVPN. Renaming the file with the extension &lt;code&gt;.conf&lt;/code&gt; will let the &lt;code&gt;openvpn&lt;/code&gt; daemon know to use it as our connection file.&lt;/p&gt;
&lt;p&gt;For now, we can manually start and connect to OpenVPN by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo openvpn --config client.ovpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll be asked for a username and password, which will be the same credentials we used before. Once the service finishes starting up, we&amp;rsquo;ll see &amp;ldquo;Initialization Sequence Complete.&amp;rdquo; If we now visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;, we should see the Elastic IP and the location of our EC2 server. Yay!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re on a later version of Ubuntu, you may check for DNS leaks by clicking on one of the &amp;ldquo;test&amp;rdquo; buttons. If all the ISPs shown are Amazon and none are your own service provider&amp;rsquo;s, congratulations! No leaks! You can move on to &lt;a href=&#34;#3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;Step 3 in the second section&lt;/a&gt; below, after which, you&amp;rsquo;ll be finished.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using Ubuntu 18.04 LTS, however, we&amp;rsquo;re not yet done.&lt;/p&gt;
&lt;h1 id=&#34;what-a-dns-leak-looks-like&#34;&gt;What a DNS leak looks like&lt;/h1&gt;
&lt;p&gt;To see what a DNS leak looks like, click on one of the &amp;ldquo;test&amp;rdquo; buttons on the &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test page&lt;/a&gt;. When we do, we&amp;rsquo;ll see not only our Amazon.com IP addresses, but also our own ISP and location.&lt;/p&gt;
&lt;p&gt;We can also see the leak by running &lt;code&gt;systemd-resolve --status&lt;/code&gt; in our terminal. Our results will contain two lines under different interfaces that both have entries for DNS Servers. It&amp;rsquo;ll look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Link &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tun0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: DNS
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.0.2
DNS Domain: ~.
Link &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;wlp4s0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: none
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1
DNS Domain: ~.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://unix.stackexchange.com/questions/434916/how-to-fix-openvpn-dns-leak&#34;&gt;DNS leak problem in Ubuntu 18.04&lt;/a&gt; stems from Ubuntu&amp;rsquo;s DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt;, failing to properly handle our OpenVPN configuration. In order to try and be a good, efficient DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt; will send DNS lookup requests in parallel to each interface that has a DNS server configuration, and then utilizes the fastest response. In our case, we only want to use our VPN&amp;rsquo;s DNS servers. Sorry, &lt;code&gt;systemd-resolved&lt;/code&gt;. You tried.&lt;/p&gt;
&lt;h1 id=&#34;how-to-fix-openvpn-dns-leak-on-ubuntu-18-04&#34;&gt;How to fix OpenVPN DNS leak on Ubuntu 18.04&lt;/h1&gt;
&lt;p&gt;Luckily, there is a fix that we can implement. We&amp;rsquo;ll need to install a few helpers from the Ubuntu repositories, update our configuration file, then set up OpenVPN using NetworkManager. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;1-install-some-helpers&#34;&gt;1. Install some helpers&lt;/h2&gt;
&lt;p&gt;To properly integrate OpenVPN with &lt;code&gt;systemd-resolved&lt;/code&gt;, we&amp;rsquo;ll need a bit more help. In a terminal, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install -y openvpn-systemd-resolved network-manager-openvpn network-manager-openvpn-gnome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install a helper script that integrates OpenVPN and &lt;code&gt;systemd-resolved&lt;/code&gt;, a NetworkManager plugin for OpenVPN, and its GUI counterpart for GNOME desktop environment.&lt;/p&gt;
&lt;h2 id=&#34;2-add-dns-implementation-to-your-connection-profile&#34;&gt;2. Add DNS implementation to your connection profile&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need to edit the connection profile file we downloaded earlier. Since it&amp;rsquo;s symbolically linked, we can accomplish this by changing the &lt;code&gt;.ovpn&lt;/code&gt; file, wherever it&amp;rsquo;s stored. Run &lt;code&gt;vim &amp;lt;name&amp;gt;.ovpn&lt;/code&gt; to open it in Vim, then add the following lines at the bottom. Explanation in the comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Allow OpenVPN to call user-defined scripts&lt;/span&gt;
script-security &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Tell systemd-resolved to send all DNS queries over the VPN&lt;/span&gt;
dhcp-option DOMAIN-ROUTE .
&lt;span class=&#34;c1&#34;&gt;# Use the update-systemd-resolved script when TUN/TAP device is opened,&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and also run the script on restarts and before the TUN/TAP device is closed&lt;/span&gt;
up /etc/openvpn/update-systemd-resolved
up-restart
down /etc/openvpn/update-systemd-resolved
down-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full list of OpenVPN options, see &lt;a href=&#34;https://openvpn.net/community-resources/reference-manual-for-openvpn-2-1/&#34;&gt;OpenVPN Scripting and Environment Variables&lt;/a&gt;. You may also like &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;&gt;more information about TUN/TAP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;3. Set up OpenVPN as NetworkManager system connection&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the GUI to set up our VPN with NetworkManager. Open up Network Settings, which should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;15-networksettings.png#screenshot&#34; alt=&#34;Network Settings window on Ubuntu 18.04&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then click the &amp;ldquo;+&amp;rdquo; button. On the window that pops up, counterintuitively, choose &amp;ldquo;Import from file&amp;hellip;&amp;rdquo; instead of the OpenVPN option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;16-importvpn.jpg#screenshot&#34; alt=&#34;Add VPN window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Navigate to, and then select, your &lt;code&gt;.ovpn&lt;/code&gt; file. We should now see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;17-vpnsettings.png#screenshot&#34; alt=&#34;The filled VPN connection settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Add your username and password for the server (&lt;code&gt;openvpn&lt;/code&gt; and the password we set in &lt;a href=&#34;#3-initialize-openvpn-on-the-ec2-server&#34;&gt;the first section&amp;rsquo;s Step 3&lt;/a&gt;), and your user key password (the same one again, if you&amp;rsquo;ve followed this tutorial), then click the &amp;ldquo;Add&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id=&#34;4-edit-your-openvpn-networkmanager-configuration&#34;&gt;4. Edit your OpenVPN NetworkManager configuration&lt;/h2&gt;
&lt;p&gt;Nearly there! Now that we&amp;rsquo;ve added the VPN as a NetworkManager connection, we&amp;rsquo;ll need to make a quick change to it. We can see a list of NetworkManager connections by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls -la /etc/NetworkManager/system-connections/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one for our VPN is probably called &lt;code&gt;openvpn&lt;/code&gt;, so let&amp;rsquo;s edit it by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo vim /etc/NetworkManager/system-connections/openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;code&gt;[ipv4]&lt;/code&gt;, we&amp;rsquo;ll need to add the line &lt;code&gt;dns-priority=-42&lt;/code&gt;. It should end up looking like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;18-connsettings.jpg#screenshot&#34; alt=&#34;Connection settings for ipv4&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Setting a negative number is a workaround that prioritizes this DNS server. The actual number is arbitrary (&lt;code&gt;-1&lt;/code&gt; should also work) but I like 42. Â¯\_(ãƒ„)_/Â¯&lt;/p&gt;
&lt;h2 id=&#34;5-restart-connect-profit&#34;&gt;5. Restart, connect, profit!!!&lt;/h2&gt;
&lt;p&gt;In a terminal, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo service network-manager restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the Network Settings, click the magic button that turns on the VPN:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;19-vpnon.jpg#screenshot&#34; alt=&#34;Network Settings window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt; and click on &amp;ldquo;Extended test&amp;rdquo; to verify the fix. If everything&amp;rsquo;s working properly, we should now see a list containing only our VPN ISP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;20-noleaks.png#screenshot&#34; alt=&#34;Successful DNS leak test results&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;rsquo;re done! Congratulations on rolling your very own VPN server and stopping DNS leaks with OpenVPN. Enjoy surfing in (relative) privacy. Now your only worry at the local coffeeshop is who&amp;rsquo;s watching you surf from the seat behind you.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/1-subscribe_hu68a3a904d7b732bc9406197bded259ae_170219_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Why I&#39;m automatically deleting my old tweets using AWS Lambda</title><link>https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</link><pubDate>Thu, 12 Apr 2018 10:51:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</guid><description>From now on, my tweets are ephemeral. Hereâ€™s why Iâ€™m deleting all my old tweets, and the AWS Lambda function Iâ€™m using to do all this for free.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/ephemeral_hu7a60cd7f63e776114f0719c46b26bd2e_46291_640x0_resize_q75_box.jpg" width="640" height="320"/>
&lt;p&gt;From now on, my tweets are ephemeral. Hereâ€™s why Iâ€™m deleting all my old tweets, and the AWS Lambda function Iâ€™m using to do all this for free.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/#ephemeral-tweets&#34;&gt;&lt;em&gt;Click here to skip to the code part.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;stuff-and-opinions&#34;&gt;Stuff and opinions&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve only been a one-bag nomad for a little over a year and a half. Before that, I lived as most people do in an apartment or a house. I owned furniture, more clothing than I strictly needed, and enough &amp;ldquo;stuff&amp;rdquo; to fill at least a few moving boxes. If I went to live somewhere else, moving for school or family or work, I packed up all my things and brought them with me. Over the years, I accumulated more and more stuff.&lt;/p&gt;
&lt;p&gt;Adopting what many would call a minimalist lifestyle has rapidly changed a lot of my longstanding views. Giving away all my stuff (an idea I once thought to be interesting in principle but practically a little bit ridiculous) has become normal. It&amp;rsquo;s normal for me, now, to not own things that I don&amp;rsquo;t use on a regular basis. I don&amp;rsquo;t keep wall shelves packed with old books or dishes or clothing or childhood toys because those items aren&amp;rsquo;t relevant to me anymore. I just keep fond memories, instead.&lt;/p&gt;
&lt;p&gt;Imagine, for a moment, that I still lived in a house. Imagine that in that house, on the fridge, is a drawing I made when I was six-years-old. In the bottom right corner of that drawing scribbled in green crayon are the words &amp;ldquo;broccoli is dumb - Victoria, Age 6.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you were in my house and saw that drawing on the fridge, would you assume that the statement &amp;ldquo;broccoli is dumb&amp;rdquo; comprised an accurate and current account of my opinions on broccoli? Of course not. I was six when I wrote that. I&amp;rsquo;ve had plenty of time to change my mind.&lt;/p&gt;
&lt;h1 id=&#34;social-media-isn-t-social&#34;&gt;Social media isn&amp;rsquo;t social&lt;/h1&gt;
&lt;p&gt;I have a friend whom I&amp;rsquo;ve known since we were both in kindergarten. We went through grade school together, then spoke to and saw each other on infrequent occasions across the years. We&amp;rsquo;re both adults now. Sometimes when we chat, we&amp;rsquo;ll recall some amusing memory from when we were younger. The nature of memory being what it is, I have no illusion that what we recall is recounted with much accuracy. Our impressions of things that happened - mistakes we made and moments of victory alike - are coloured by the experiences we&amp;rsquo;ve had since then, and all the things we&amp;rsquo;ve learned. An awkward moment at a school colleague&amp;rsquo;s birthday party becomes an example of a child learning to socialize, instead of the world-ending moment of embarrassment it probably felt like at the time.&lt;/p&gt;
&lt;p&gt;This is how memory works. In a sense, it gets updated, as well it should. People living in small communities remember things that their neighbour did many years ago, but recall them in the context of who their neighbour is now, and what their current relationship is like. This re-colouring of history is an important part of how people &lt;a href=&#34;https://www.smithsonianmag.com/science-nature/how-our-brains-make-memories-14466850/&#34;&gt;heal&lt;/a&gt;, &lt;a href=&#34;http://news.feinberg.northwestern.edu/2014/02/memory_rewrite/&#34;&gt;make good decisions&lt;/a&gt;, and &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709095/&#34;&gt;socialize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Social media does not do this. Your perfectly preserved tweet from five days or five years ago can be recalled with absolute accuracy. For most people, this is not particularly worrying. We tend to tweet about pretty mundane things - things that pop into mind when we&amp;rsquo;re bored and want someone to notice us. Individually, usually, our old tweets are pretty insignificant. In aggregate, however, they paint a pretty complete picture of a person&amp;rsquo;s random, unintentionally telling thoughts. This is the problem.&lt;/p&gt;
&lt;p&gt;The assumption made of things written in social media and on Twitter specifically is a very different assumption than you might make about someone&amp;rsquo;s notepad scribble from last week. I&amp;rsquo;m not endeavoring to speculate why - I&amp;rsquo;ve just seen enough cases of someone getting publicly flogged for something they posted years ago to know that it does happen. This is weird. If you wouldn&amp;rsquo;t assume that a notepad scribble from last week or a crayon drawing from decades ago reflects the essence of who someone is &lt;em&gt;now,&lt;/em&gt; why would you assume that an old tweet does?&lt;/p&gt;
&lt;p&gt;You are not the same person you were last month - you&amp;rsquo;ve seen things, read things, understood and learned things that have, in some small way, changed you. While a person may have the same sense of self and identity through most of their life, even this grows and changes over the years. We change our opinions, our desires, our habits. We are not stagnant beings, and we should not let ourselves be represented as such, however unintentionally.&lt;/p&gt;
&lt;h1 id=&#34;ephemeral-tweets&#34;&gt;Ephemeral tweets&lt;/h1&gt;
&lt;p&gt;If you look at my Twitter profile page today, you&amp;rsquo;ll see fewer tweets there than you have fingers (I hope). I&amp;rsquo;m using &lt;a href=&#34;https://github.com/victoriadrake/ephemeral&#34;&gt;ephemeral&lt;/a&gt; - a lightweight utility I wrote for use on &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; - to delete all my tweets older than a few days. I&amp;rsquo;m doing this for the same reason that I don&amp;rsquo;t hang on to stuff that I no longer use - that stuff isn&amp;rsquo;t relevant to me anymore. It doesn&amp;rsquo;t represent me, either.&lt;/p&gt;
&lt;p&gt;The code that makes up ephemeral is written in Go. AWS Lambda creates an environment for each Lambda function, so ephemeral utilizes environment variables for your private Twitter API keys and the maximum age of the tweets you want to keep, represented in hours, like &lt;code&gt;72h&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessTokenSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;maxTweetAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MAX_TWEET_AGE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;logger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;missing required environment variable &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program uses the &lt;a href=&#34;https://github.com/ChimeraCoder/anaconda&#34;&gt;anaconda&lt;/a&gt; library. It fetches your timeline up to the Twitter API&amp;rsquo;s limit of 200 tweets per request, then compares each tweet&amp;rsquo;s date of creation to your &lt;code&gt;MAX_TWEET_AGE&lt;/code&gt; variable to decide whether it&amp;rsquo;s old enough to be deleted. After deleting all the expired tweets, the Lambda function terminates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deleteFromTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anaconda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TwitterApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not get timeline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CreatedAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Couldn&amp;#39;t parse time &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DeleteTweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DELETED: Age - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to delete! &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No more tweets to delete.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read the full code &lt;a href=&#34;https://github.com/victoriadrake/ephemeral/blob/master/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a use case like this, AWS Lambda has a free tier that costs nothing. If you&amp;rsquo;re any level of developer, it&amp;rsquo;s an extremely useful tool to become familiar with. For a full walkthrough with screenshots of how to set up a Lambda function that tweets for you, you can read &lt;a href=&#34;https://victoria.dev/verbose/free-twitter-bot-aws-lambda/&#34;&gt;this article&lt;/a&gt;. The set up for ephemeral is the same, it just has an opposite function. :)&lt;/p&gt;
&lt;p&gt;I forked ephemeral from Adam Drake&amp;rsquo;s &lt;a href=&#34;https://github.com/adamdrake/harold&#34;&gt;Harold&lt;/a&gt;, a Twitter tool that has many useful functions beyond keeping your timeline trimmed. If you have more than 200 tweets to delete at first pass, please use Harold to do that first. You can run Harold with the &lt;code&gt;deletetimeline&lt;/code&gt; flag from your terminal.&lt;/p&gt;
&lt;p&gt;You may like to first &lt;a href=&#34;https://twitter.com/settings/your_twitter_data&#34;&gt;download all your tweets before deleting them&lt;/a&gt; for sentimental value.&lt;/p&gt;
&lt;h1 id=&#34;why-use-twitter-at-all&#34;&gt;Why use Twitter at all?&lt;/h1&gt;
&lt;p&gt;In anticipation of the question, let me say that yes, I do use Twitter besides just as a bucket for my Lambda functions to fill and empty. It has its benefits, most related to what I perceive to be its original intended purpose: to be a means of near-instant communication for short, digestible pieces of information reaching a widespread pool of people.&lt;/p&gt;
&lt;p&gt;I use it as a way to keep tabs on what&amp;rsquo;s happening &lt;em&gt;right now.&lt;/em&gt; I use it to comment on, joke about, and commiserate with things tweeted by the people I follow &lt;em&gt;right now.&lt;/em&gt; By keeping my timeline restricted to only the most recent few days, I feel like I&amp;rsquo;m using Twitter more like it was meant to be used: a way to join the conversation and see what&amp;rsquo;s happening in the world &lt;em&gt;right now&lt;/em&gt; - instead of just another place to amass more &amp;ldquo;stuff.&amp;rdquo;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/ephemeral_hu7a60cd7f63e776114f0719c46b26bd2e_46291_640x0_resize_q75_box.jpg" type="image/jpg"/></item></channel></rss>