<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Websites on victoria.dev</title><link>https://victoria.dev/tags/websites/</link><description>Recent content in Websites on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Mon, 02 Sep 2019 09:01:23 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/websites/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL injection and XSS: what white hat hackers know about trusting user input</title><link>https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</link><pubDate>Mon, 02 Sep 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</guid><description>A primer on SQL injection and cross site scripting, and how to handle user input in software development.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" width="640" height="374"/>
&lt;p&gt;Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: &lt;em&gt;What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?&lt;/em&gt; Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &amp;ldquo;Urgent&amp;rdquo; column: how will our product be secured?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&amp;rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is &lt;em&gt;you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &amp;ldquo;white hat&amp;rdquo; hacker, and sometimes just &amp;ldquo;hacker,&amp;rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &amp;ldquo;black hat&amp;rdquo; hacker, also called a &amp;ldquo;cracker,&amp;rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&amp;rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.&lt;/p&gt;
&lt;p&gt;When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&amp;rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Main_Page&#34;&gt;Open Web Application Security Project&lt;/a&gt; guides&lt;/li&gt;
&lt;li&gt;The Hacker101 playlist from &lt;a href=&#34;https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/&#34;&gt;HackerOne&amp;rsquo;s YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/web-hacking-101&#34;&gt;Web Hacking 101&lt;/a&gt; by Peter Yaworski&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brutelogic.com.br/blog/&#34;&gt;Brute Logic&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&#34;&gt;Computerphile&lt;/a&gt; YouTube channel&lt;/li&gt;
&lt;li&gt;Videos featuring Jason Haddix (&lt;a href=&#34;https://github.com/jhaddix/&#34;&gt;@jhaddix&lt;/a&gt;) and Tom Hudson (&lt;a href=&#34;https://github.com/tomnomnom/&#34;&gt;@tomnomnom&lt;/a&gt;) (two accomplished ethical hackers with different, but both effective, methodologies)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be familiar with the catchphrase, &amp;ldquo;sanitize your inputs!&amp;rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&amp;rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&amp;rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-attacks&#34;&gt;SQL injection attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great &lt;a href=&#34;https://www.youtube.com/watch?v=_jKylhJtPmI&#34;&gt;explain-like-I&amp;rsquo;m-five video on SQLi&lt;/a&gt;. You may already know of this attack from &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;xkcd&amp;rsquo;s Little Bobby Tables&lt;/a&gt;. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sqli.png#center&#34; alt=&#34;A monitor with an SQL Select command that gets all your base&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;You have no chance to survive make your time.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;You can test your own site to see if you&amp;rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&amp;rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39; OR 1=&#39;1&lt;/code&gt; evaluates to a constant true, and when successful, returns all rows in the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; AND 0=&#39;1&lt;/code&gt; evaluates to a constant false, and when successful, returns no rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ciNHn38EyRc&#34;&gt;This video demonstrates the above tests&lt;/a&gt;, and does a great job of showing how impactful an SQL injection attack can be.&lt;/p&gt;
&lt;p&gt;Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&amp;rsquo;t trust user input.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-mitigation&#34;&gt;SQL injection mitigation&lt;/h2&gt;
&lt;p&gt;In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.&lt;/p&gt;
&lt;p&gt;Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;Object-Relational Mapping&lt;/a&gt;, or ORM, with its use of &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/queries/&#34;&gt;QuerySets&lt;/a&gt;. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.&lt;/p&gt;
&lt;p&gt;Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepared statements with variable binding (or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&#34;&gt;parameterized queries&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures&#34;&gt;Stored procedures&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation&#34;&gt;Whitelisting&lt;/a&gt; or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input&#34;&gt;escaping&lt;/a&gt; user input.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.&lt;/p&gt;
&lt;p&gt;The battle, however, is only half won&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;cross-site-scripting-xss-attacks&#34;&gt;Cross Site Scripting (XSS) attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&amp;rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;Cross Site Scripting&lt;/a&gt; attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&amp;rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing. &lt;a href=&#34;https://blogs.apache.org/infra/entry/apache_org_04_09_2010&#34;&gt;This incident report from Apache in 2010&lt;/a&gt; is a good example of how XSS can be chained in a larger attack to take over accounts and machines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;xss.png&#34; alt=&#34;An HTML dance party with a little JS cutting in&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;The annual DOM dance-off receives an unexpected guest);&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34;&gt;Document Object Model&lt;/a&gt;) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.&lt;/p&gt;
&lt;h3 id=&#34;dom-based-xss&#34;&gt;DOM based XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/DOM_Based_XSS&#34;&gt;DOM based XSS&lt;/a&gt; occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in &lt;a href=&#34;https://www.owasp.org/index.php/Phishing&#34;&gt;phishing emails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called &lt;code&gt;xss-test.html&lt;/code&gt; (or whatever you like) with the following HTML and JavaScript code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My XSS Example&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello there!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;greeting&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This web page will display the title &amp;ldquo;Hello there!&amp;rdquo; unless it receives a &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_string&#34;&gt;URL parameter from a query string&lt;/a&gt; with a value for &lt;code&gt;name&lt;/code&gt;. To see the script work, open the page in a browser with an appended URL parameter, like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file:///path/to/file/xss-test.html?name=Victoria&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for &lt;code&gt;name&lt;/code&gt; and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the &lt;code&gt;name&lt;/code&gt; parameter to, say, &lt;code&gt;&amp;lt;img+src+onerror=alert(&amp;quot;pwned&amp;quot;)&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pwned.png#screenshot&#34; alt=&#34;A screenshot of the XSS page example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is just one example, largely based on one from &lt;a href=&#34;https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/&#34;&gt;Brute&amp;rsquo;s post&lt;/a&gt;, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.&lt;/p&gt;
&lt;h3 id=&#34;stored-and-reflected-xss&#34;&gt;Stored and reflected XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)&#34;&gt;Stored XSS&lt;/a&gt; occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &amp;ldquo;About Me&amp;rdquo; section. The script, improperly stored on the site&amp;rsquo;s server, would successfully execute at a later time when another user views the attacker&amp;rsquo;s profile.&lt;/p&gt;
&lt;p&gt;One of the most famous examples of this is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Samy_(computer_worm)&#34;&gt;Samy worm&lt;/a&gt; that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&amp;rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)&#34;&gt;Reflected XSS&lt;/a&gt; similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&amp;rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.&lt;/p&gt;
&lt;h2 id=&#34;xss-attack-mitigation&#34;&gt;XSS attack mitigation&lt;/h2&gt;
&lt;p&gt;In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.&lt;/p&gt;
&lt;h3 id=&#34;validating-form-fields&#34;&gt;Validating form fields&lt;/h3&gt;
&lt;p&gt;Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes&#34;&gt;Django&amp;rsquo;s built-in &lt;code&gt;Field&lt;/code&gt; classes&lt;/a&gt;, which provide fields that validate to some commonly used types and also specify sane defaults. Django&amp;rsquo;s &lt;code&gt;EmailField&lt;/code&gt;, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&amp;rsquo;t imitate the common format of an email address, then Django won&amp;rsquo;t consider the field valid and the form will not be submitted.&lt;/p&gt;
&lt;p&gt;If relying on a framework isn&amp;rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_conversion&#34;&gt;type conversion&lt;/a&gt;, for example, ensuring that a number is of type &lt;code&gt;int()&lt;/code&gt;; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully, we needn&amp;rsquo;t start from scratch. Open source resources are available to help, such as the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&#34;&gt;OWASP Validation Regex Repository&lt;/a&gt;, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find &lt;a href=&#34;https://github.com/search?q=validation+library&#34;&gt;plenty of these on GitHub&lt;/a&gt;. Additionally, the &lt;a href=&#34;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&#34;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt; has a couple suggestions for test payloads we can use to test our existing applications.&lt;/p&gt;
&lt;p&gt;While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.&lt;/p&gt;
&lt;h3 id=&#34;avoiding-direct-injection&#34;&gt;Avoiding direct injection&lt;/h3&gt;
&lt;p&gt;Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does data flow through our application?&lt;/li&gt;
&lt;li&gt;What does a user expect to happen when they interact with this input?&lt;/li&gt;
&lt;li&gt;Where on our page does data appear? Does it become embedded in a string or an attribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of &lt;a href=&#34;https://www.hacker101.com/&#34;&gt;Hacker101&lt;/a&gt;. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;test&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;+alert(1)+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;onmouserover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&amp;quot;onmouseover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using &lt;code&gt;innerText&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.&lt;/p&gt;
&lt;h2 id=&#34;pay-attention-to-your-inputs&#34;&gt;Pay attention to your inputs&lt;/h2&gt;
&lt;p&gt;Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&amp;rsquo;s like installing deadbolts on all the doors, but leaving a window open!&lt;/p&gt;
&lt;p&gt;By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&amp;rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&amp;rsquo;s flow, follow the data, and pay attention to our inputs.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Two ways to deploy a public GitHub Pages site from a private Hugo repository</title><link>https://victoria.dev/verbose/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</link><pubDate>Mon, 22 Apr 2019 10:05:15 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</guid><description>Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site - from a separate private repository.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hu1664dea80ddda6cad8243ace1910f619_558187_640x0_resize_q75_box.jpg" width="640" height="370"/>
&lt;p&gt;Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used Hugo to build my site for years, but until this past week I&amp;rsquo;d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place - and if you&amp;rsquo;re using GitHub Pages with the free version of GitHub, &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&#34;&gt;that place is public&lt;/a&gt;. That means that all my three-in-the-morning bright ideas and messy unfinished (and unfunny) drafts would be publicly available - and no amount of continuous convenience was going to convince me to do that.&lt;/p&gt;
&lt;p&gt;So I kept things separated, with Hugo&amp;rsquo;s messy behind-the-scenes stuff in a local Git repository, and the generated &lt;code&gt;public/&lt;/code&gt; folder pushing to my GitHub Pages remote repository. Each time I wanted to deploy my site, I&amp;rsquo;d have to get on my laptop and &lt;code&gt;hugo&lt;/code&gt; to build my site, then &lt;code&gt;cd public/ &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit&lt;/code&gt;&amp;hellip; etc etc. And all was well, except for the nagging feeling that there was a better way to do this.&lt;/p&gt;
&lt;p&gt;I wrote another article a little while back about &lt;a href=&#34;https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; to make changes to my repositories on my iPad whenever I&amp;rsquo;m out and about. It seemed off to me that I could do everything except deploy my site from my iPad, so I set out to change that.&lt;/p&gt;
&lt;p&gt;A couple three-in-the-morning bright ideas and a revoked access token later (oops), I now have not one but &lt;em&gt;two&lt;/em&gt; ways to deploy to my public GitHub Pages repository from an entirely separated, private GitHub repository. In this post, I&amp;rsquo;ll take you through achieving this with &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis CI&lt;/a&gt; or using &lt;a href=&#34;http://netlify.com/&#34;&gt;Netlify&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing hackish about it - my public GitHub Pages repository still looks the same as it does when I pushed to it locally from my terminal. Only now, I&amp;rsquo;m able to take advantage of a couple great deployment tools to have the site update whenever I push to my private repo, whether I&amp;rsquo;m on my laptop or out and about with my iPad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;im-on-a-bridge.jpg#center&#34; alt=&#34;Hashtag: you did not push from there&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;#YouDidNotPushFromThere&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;This article assumes you have working knowledge of Git and GitHub Pages. If not, you may like to spin off some browser tabs from my articles on &lt;a href=&#34;https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; and &lt;a href=&#34;https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/&#34;&gt;building a site with Hugo and GitHub Pages&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;private-to-public-github-pages-deployment-with-travis-ci&#34;&gt;Private-to-public GitHub Pages deployment with Travis CI&lt;/h1&gt;
&lt;p&gt;Travis CI has the built-in ability (♪) to &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/&#34;&gt;deploy to GitHub Pages&lt;/a&gt; following a successful build. They do a decent job in the docs of explaining how to add this feature, especially if you&amp;rsquo;ve used Travis CI before&amp;hellip; which I haven&amp;rsquo;t. Don&amp;rsquo;t worry, I did the bulk of the figuring-things-out for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Travis CI gets all its instructions from a configuration file in the root of your repository called &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You need to provide a &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;GitHub personal access token&lt;/a&gt; as a secure encrypted variable, which you can generate using &lt;code&gt;travis&lt;/code&gt; on the command line&lt;/li&gt;
&lt;li&gt;Once your script successfully finishes doing what you&amp;rsquo;ve told it to do (not necessarily what you &lt;em&gt;want&lt;/em&gt; it to do but that&amp;rsquo;s a whole other blog post), Travis will deploy your build directory to a repository you can specify with the &lt;code&gt;repo&lt;/code&gt; configuration variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-the-travis-configuration-file&#34;&gt;Setting up the Travis configuration file&lt;/h2&gt;
&lt;p&gt;Create a new configuration file for Travis with the filename &lt;code&gt;.travis.yml&lt;/code&gt; (note the leading &amp;ldquo;.&amp;rdquo;). These scripts are very customizable and I struggled to find a relevant example to use as a starting point - luckily, you don&amp;rsquo;t have that problem!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my basic &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;git&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;depth&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HUGO_VERSION=&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.54.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;matrix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;YOUR_ENCRYPTED_VARIABLE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wget&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-q&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tar&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mv&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~/bin/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--gc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--minify&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;provider&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pages&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;skip-cleanup&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;github-token&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;$GITHUB_TOKEN&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;keep-history&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local-dir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;public&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gh-username/gh-username.github.io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;target-branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;verbose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script downloads and installs Hugo, builds the site with the garbage collection and minify &lt;a href=&#34;https://gohugo.io/commands/hugo/#synopsis&#34;&gt;flags&lt;/a&gt;, then deploys the &lt;code&gt;public/&lt;/code&gt; directory to the specified &lt;code&gt;repo&lt;/code&gt; - in this example, your public GitHub Pages repository. You can read about each of the &lt;code&gt;deploy&lt;/code&gt; configuration options &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/#further-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables#defining-encrypted-variables-in-travisyml&#34;&gt;add the GitHub personal access token as an encrypted variable&lt;/a&gt;, you don&amp;rsquo;t need to manually edit your &lt;code&gt;.travis.yml&lt;/code&gt;. The &lt;code&gt;travis&lt;/code&gt; gem commands below will encrypt and add the variable for you when you run them in your repository directory.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;travis&lt;/code&gt; with &lt;code&gt;sudo gem install travis&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;generate your GitHub personal access token&lt;/a&gt;, copy it (it only shows up once!) and run the commands below in your repository root, substituting your token for the kisses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;travis login --pro --github-token xxxxxxxxxxxxxxxxxxxxxxxxxxx
travis encrypt &lt;span class=&#34;nv&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxx --add env.matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your encrypted token magically appears in the file. Once you&amp;rsquo;ve committed &lt;code&gt;.travis.yml&lt;/code&gt; to your private Hugo repository, Travis CI will run the script and if the build succeeds, will deploy your site to your public GitHub Pages repo. Magic!&lt;/p&gt;
&lt;p&gt;Travis will always run a build each time you push to your private repository. If you don&amp;rsquo;t want to trigger this behavior with a particular commit, &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build&#34;&gt;add the &lt;code&gt;skip&lt;/code&gt; command to your commit message&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yo that&amp;rsquo;s cool but I like Netlify.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Okay fine.&lt;/p&gt;
&lt;h1 id=&#34;deploying-to-a-separate-repository-with-netlify-and-make&#34;&gt;Deploying to a separate repository with Netlify and Make&lt;/h1&gt;
&lt;p&gt;We can get Netlify to do our bidding by using a Makefile, which we&amp;rsquo;ll run with Netlify&amp;rsquo;s build command.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what our &lt;code&gt;Makefile&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SHELL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;/bin/bash
&lt;span class=&#34;nv&#34;&gt;BASEDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;OUTPUTDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Removing public directory&amp;#34;&lt;/span&gt;
rm -rf &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;BASEDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;get_repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Getting public repository&amp;#34;&lt;/span&gt;
git clone https://github.com/gh-username/gh-username.github.io.git public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Generating site&amp;#34;&lt;/span&gt;
hugo --gc --minify
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Preparing commit&amp;#34;&lt;/span&gt;
@cd &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;you@youremail.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Name&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Deploy via Makefile&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push -f -q https://&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;GITHUB_TOKEN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;@github.com/gh-username/gh-username.github.io.git master
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pushed to remote&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To preserve the Git history of our separate GitHub Pages repository, we&amp;rsquo;ll first clone it, build our new Hugo site to it, and then push it back to the Pages repository. This script first removes any existing &lt;code&gt;public/&lt;/code&gt; folder that might contain files or a Git history. It then clones our Pages repository to &lt;code&gt;public/&lt;/code&gt;, builds our Hugo site (essentially updating the files in &lt;code&gt;public/&lt;/code&gt;), then takes care of committing the new site to the Pages repository.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;deploy&lt;/code&gt; section, you&amp;rsquo;ll notice lines starting with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. These are chained commands. Since Make &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Execution.html#Execution&#34;&gt;invokes a new sub-shell for each line&lt;/a&gt;, it starts over with every new line from our root directory. To get our &lt;code&gt;cd&lt;/code&gt; to stick and avoid running our Git commands in the project root directory, we&amp;rsquo;re chaining the commands and using the backslash character to &lt;a href=&#34;http://clarkgrubb.com/makefile-style-guide#breaking-long-lines&#34;&gt;break long lines&lt;/a&gt; for readability.&lt;/p&gt;
&lt;p&gt;By chaining our commands, we&amp;rsquo;re able to &lt;a href=&#34;https://stackoverflow.com/questions/6116548/how-to-tell-git-to-use-the-correct-identity-name-and-email-for-a-given-project&#34;&gt;configure our Git identity&lt;/a&gt;, add all our updated files, and create a commit for our Pages repository.&lt;/p&gt;
&lt;p&gt;Similarly to using Travis CI, we&amp;rsquo;ll need to pass in a &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;GitHub personal access token&lt;/a&gt; to push to our public GitHub Pages repository - only Netlify doesn&amp;rsquo;t provide a straightforward way to encrypt the token in our Makefile.&lt;/p&gt;
&lt;p&gt;Instead, we&amp;rsquo;ll use Netlify&amp;rsquo;s &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#build-environment-variables&#34;&gt;Build Environment Variables&lt;/a&gt;, which live safely in our site settings in the Netlify app. We can then call our token variable in the Makefile. We use it to push (quietly, to avoid printing the token in logs) to our Pages repository by &lt;a href=&#34;https://stackoverflow.com/questions/44773415/how-to-push-a-commit-to-github-from-a-circleci-build-using-a-personal-access-tok&#34;&gt;passing it in the remote URL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid printing the token in Netlify&amp;rsquo;s logs, we suppress &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Echoing.html#Echoing&#34;&gt;recipe echoing&lt;/a&gt; for that line with the leading &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;With your Makefile in the root of your private GitHub repository, you can set up Netlify to run it for you.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-netlify&#34;&gt;Setting up Netlify&lt;/h2&gt;
&lt;p&gt;Getting set up with Netlify via the &lt;a href=&#34;https://app.netlify.com/&#34;&gt;web UI&lt;/a&gt; is straightforward. Once you sign in with GitHub, choose the private GitHub repository where your Hugo site lives. The next page Netlify takes you to lets you enter deploy settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-new-site.png&#34; alt=&#34;Create a new site page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can specify the build command that will run your Makefile (&lt;code&gt;make all&lt;/code&gt; for this example). The branch to deploy and the publish directory don&amp;rsquo;t matter too much in our specific case, since we&amp;rsquo;re only concerned with pushing to a separate repository. You can enter the typical &lt;code&gt;master&lt;/code&gt; deploy branch and &lt;code&gt;public&lt;/code&gt; publish directory.&lt;/p&gt;
&lt;p&gt;Under &amp;ldquo;Advanced build settings&amp;rdquo; click &amp;ldquo;New variable&amp;rdquo; to add your GitHub personal access token as a Build Environment Variable. In our example, the variable name is &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. Click &amp;ldquo;Deploy site&amp;rdquo; to make the magic happen.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve already previously set up your repository with Netlify, find the settings for Continuous Deployment under Settings &amp;gt; Build &amp;amp; deploy.&lt;/p&gt;
&lt;p&gt;Netlify will build your site each time you push to the private repository. If you don&amp;rsquo;t want a particular commit to trigger a build, &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#skipping-a-deploy&#34;&gt;add &lt;code&gt;[skip ci]&lt;/code&gt; in your Git commit message&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;same-same-but-different&#34;&gt;Same same but different&lt;/h2&gt;
&lt;p&gt;One effect of using Netlify this way is that your site will be built in two places: one is the separate, public GitHub Pages repository that the Makefile pushes to, and the other is your Netlify site that deploys on their CDN from your linked private GitHub repository. The latter is useful if you&amp;rsquo;re going to play with &lt;a href=&#34;https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/&#34;&gt;Deploy Previews&lt;/a&gt; and other Netlify features, but those are outside the scope of this post.&lt;/p&gt;
&lt;p&gt;The main point is that your GitHub Pages site is now updated in your public repo. Yay!&lt;/p&gt;
&lt;h1 id=&#34;go-forth-and-deploy-fearlessly&#34;&gt;Go forth and deploy fearlessly&lt;/h1&gt;
&lt;p&gt;I hope the effect of this new information is that you feel more able to update your sites, wherever you happen to be. The possibilities are endless - at home on your couch with your laptop, out cafe-hopping with your iPad, or in the middle of a first date on your phone. Endless!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;date-deploy.jpg&#34; alt=&#34;Don&#39;t update your site from your phone on a date&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Don&amp;rsquo;t do stuff on your phone when you&amp;rsquo;re on a date. Not if you want a second one, anyway.&lt;/p&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hu1664dea80ddda6cad8243ace1910f619_558187_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Moving to a new domain without breaking old links with AWS &amp; Disqus</title><link>https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</link><pubDate>Wed, 10 Jan 2018 08:56:20 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</guid><description>I moved my site&#39;s blog to its own domain without breaking old links or losing comments. Here&#39;s how.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/aws-disqus_hucedde38cd1f739c46e3bccc9c4f34706_35414_640x0_resize_box_2.png" width="640" height="252"/>
&lt;p&gt;I started blogging about my nomadic travels last year, and so far the habit has stuck. Like all side projects, I won&amp;rsquo;t typically invest heavily in setting up web properties before I can be reasonably certain that such an investment is worth my time or enjoyment. In other words: don&amp;rsquo;t buy the domain until you&amp;rsquo;ve proven to yourself that you&amp;rsquo;ll stick with it!&lt;/p&gt;
&lt;p&gt;After some months of regular posting I felt I was ready to commit (short courtship, I know, but we&amp;rsquo;re all adults here) and I bought a dedicated domain, &lt;a href=&#34;https://heronebag.com&#34;&gt;herOneBag.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until recently, my #NomadLyfe blog was just a subdirectory of my main personal site. Now it&amp;rsquo;s all grown up and ready to strike out into the world alone! Here&amp;rsquo;s the setup for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;li&gt;Disqus for comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like a walk-through for how to set up a new domain with this structure, it&amp;rsquo;s over here: &lt;a href=&#34;https://victoria.dev/verbose/aws-static-site/&#34;&gt;Hosting your static site with AWS S3, Route 53, and CloudFront&lt;/a&gt;. In this post, I&amp;rsquo;ll just detail how I managed to move my blog to the new site without breaking the old links or losing any comments.&lt;/p&gt;
&lt;h1 id=&#34;preserve-old-links-with-redirection-rules&#34;&gt;Preserve old links with redirection rules&lt;/h1&gt;
&lt;p&gt;I wanted to avoid breaking links that have been posted around the web by forwarding visitors to the new URL. The change looks like this:&lt;/p&gt;
&lt;p&gt;Old URL: &lt;code&gt;https://victoria.dev/meta/5-bag-lessons/&lt;/code&gt;&lt;br /&gt;
New URL: &lt;code&gt;https://heronebag.com/blog/5-bag-lessons/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see that the domain name as well as the subdirectory have changed, but the slug for the blog post remains the same. (I love static sites.)&lt;/p&gt;
&lt;p&gt;To redirect links from the old site, we&amp;rsquo;ll need to set redirection rules in the old site&amp;rsquo;s S3 bucket. AWS provides a way to set up a conditional redirect. This is set in the &amp;ldquo;Redirection rules&amp;rdquo; section of your S3 bucket&amp;rsquo;s properties, under &amp;ldquo;Static website hosting.&amp;rdquo; You can &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects&#34;&gt;find the documentation here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-redirect.png#screenshot&#34; alt=&#34;Redirection rules placement&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a few examples given, but none that represent the redirect I want. In addition to changing the prefix of the object key, we&amp;rsquo;re also changing the domain. The latter is achieved with the &lt;code&gt;&amp;lt;HostName&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;To redirect requests for the old blog URL to the new top level domain, we&amp;rsquo;ll use the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRules&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;KeyPrefixEquals&amp;gt;&lt;/span&gt;oldblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/KeyPrefixEquals&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;HostName&amp;gt;&lt;/span&gt;newdomain.com&lt;span class=&#34;nt&#34;&gt;&amp;lt;/HostName&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;newblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This rule ensures that requests for &lt;code&gt;olddomain.com/oldblog/specific-blog-post&lt;/code&gt; will redirect to &lt;code&gt;newdomain.com/newblog/specific-blog-post&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;migrate-disqus-comments&#34;&gt;Migrate Disqus comments&lt;/h1&gt;
&lt;p&gt;Disqus provides a tool for migrating the comment threads from your old blog site to the new one. You can find it in your Disqus admin tools at &lt;code&gt;your-short-name.disqus.com/admin/discussions/migrate/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To migrate posts from the old blog address to the new one, we&amp;rsquo;ll use the URL mapper tool. Click &amp;ldquo;Start URL mapper,&amp;rdquo; then &amp;ldquo;you can download a CSV here.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-disqus.png#screenshot&#34; alt=&#34;URL mapping for Disqus.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Disqus has decent instructions for how this tool works, and you can &lt;a href=&#34;https://help.disqus.com/customer/en/portal/articles/912757-url-mapper&#34;&gt;read them here.&lt;/a&gt; Basically, you&amp;rsquo;ll input the new blog URLs into the second column of the CSV file you downloaded, then pass it back to Disqus to process. If you&amp;rsquo;re using a program to edit the CSV, be sure to save the resulting file in CSV format.&lt;/p&gt;
&lt;p&gt;Unless you have a bazillion URLs, the tool works pretty quickly, and you&amp;rsquo;ll get an email when it&amp;rsquo;s finished. Don&amp;rsquo;t forget to update the name of your site in the Disqus admin, too.&lt;/p&gt;
&lt;h1 id=&#34;transfer-other-settings&#34;&gt;Transfer other settings&lt;/h1&gt;
&lt;p&gt;Update links in your social profiles and any other sites you may have around the web. If you&amp;rsquo;re using other services attached to your website like Google Analytics or IFTTT, don&amp;rsquo;t forget to update those details too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/aws-disqus_hucedde38cd1f739c46e3bccc9c4f34706_35414_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hosting your static site with AWS S3, Route 53, and CloudFront</title><link>https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</link><pubDate>Wed, 13 Dec 2017 20:46:12 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</guid><description>A guide to using Amazon Web Services to serve your site with HTTPS. For (almost) free.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/aws-acmcertificates_huac5689bd49ae0e9521775d5c4704e40f_49209_640x0_resize_box_2.png" width="640" height="353"/>
&lt;p&gt;Some time ago I decided to stop freeloading on GitHub pages and move one of my sites to Amazon Web Services (AWS). It turns out that I&amp;rsquo;m still mostly freeloading (yay free tier) so it amounted to a learning experience. Here are the components that let me host and serve the site at my custom domain with HTTPS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set all that up most of a year ago. At the time, I found the AWS documentation to be rather fragmented and inconvenient to follow - it was hard to find what you were looking for without knowing what a specific setting might be called, or where it was, or if it existed at all. When I recently set up a new site and stumbled through this process again, I didn&amp;rsquo;t find it any easier. Hopefully this post can help to collect the relevant information into a more easily followed process and serve as an accompanying guide to save future me (and you) some time.&lt;/p&gt;
&lt;p&gt;Rather than replace existing documentation, this post is meant to supplement it. Think of me as your cool tech-savvy friend on the phone with you at 4am, troubleshooting your website. (Please don&amp;rsquo;t actually call me at 4am.) I&amp;rsquo;ll walk through the set up while providing links for the documentation that was ultimately helpful (mostly so I can find it again later&amp;hellip;).&lt;/p&gt;
&lt;h1 id=&#34;hosting-a-static-site-with-amazon-s3-and-a-custom-domain&#34;&gt;Hosting a static site with Amazon S3 and a custom domain&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re starting from scratch, you&amp;rsquo;ll need an AWS account. It behooves you to get one, even if you don&amp;rsquo;t like paying for services - there&amp;rsquo;s a free tier that will cover most of the experimental stuff you&amp;rsquo;re going to want to do in the first year, and even the things I do pay for cost me less than a dollar a month. You can sign up at &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting your static site hosted and available at your custom domain is your first mission, should you choose to accept it. &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&#34;&gt;Your instructions are here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating the buckets for site hosting on S3 is the most straightforward part of this process in my opinion, and the AWS documentation walkthrough covers what you&amp;rsquo;ll need to do quite well. It gets a little unclear around &lt;em&gt;Step 3: Create and Configure Amazon Route 53 Hosted Zone&lt;/em&gt;, so come back and read on once you&amp;rsquo;ve reached that point. I&amp;rsquo;ll make some tea in the meantime.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Ready? Cool. See, I&amp;rsquo;m here for you.&lt;/p&gt;
&lt;h1 id=&#34;set-up-route-53&#34;&gt;Set up Route 53&lt;/h1&gt;
&lt;p&gt;The majority of the work in this section amounts to creating the correct record sets for your custom domain. If you&amp;rsquo;re already familiar with how record sets work, the documentation is a bit of a slog. Here&amp;rsquo;s how it should look when you&amp;rsquo;re finished:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-recordsets.png#screenshot&#34; alt=&#34;Route 53 record sets.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;NS&amp;rdquo; and &amp;ldquo;SOA&amp;rdquo; records are created automatically for you. The only records you need to create are the &amp;ldquo;A&amp;rdquo; records.&lt;/p&gt;
&lt;p&gt;Hop over to &lt;a href=&#34;https://console.aws.amazon.com/route53/home&#34;&gt;Route 53&lt;/a&gt; and follow &lt;a href=&#34;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html&#34;&gt;this walkthrough&lt;/a&gt; to create a &amp;ldquo;hosted zone.&amp;rdquo; The value of the &lt;strong&gt;NS&lt;/strong&gt; (Name Servers) records are what you&amp;rsquo;ll have to provide to your domain name registrar (wherever you bought your custom domain, such as this super subtle &lt;a href=&#34;https://affiliate.namecheap.com/?affId=109417&#34;&gt;Namecheap.com affiliate link&lt;/a&gt; right here.)&lt;/p&gt;
&lt;p&gt;If you created two buckets in the first section (one for &lt;code&gt;yourdomain.com&lt;/code&gt; and one for &lt;code&gt;www.yourdomain.com&lt;/code&gt;), you&amp;rsquo;ll need two separate A records in Route 53. Initially, these have the value of the endpoints for your matching S3 buckets (looks like &lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;). Later, you&amp;rsquo;ll change them to your CloudFront domain name.&lt;/p&gt;
&lt;p&gt;If you went with Namecheap as your registrar, &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record&#34;&gt;Step 4&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-namecheapdns.png#screenshot&#34; alt=&#34;Namecheap&#39;s Custom DNS settings.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Waiting is the hardest part&amp;hellip; I&amp;rsquo;ve gotten into the habit of working on another project or setting up the DNS change before going to bed so that changes have time to propagate without me feeling like I need to fiddle with it. ^^;&lt;/p&gt;
&lt;p&gt;When the transfer&amp;rsquo;s ready, you&amp;rsquo;ll see your site at &lt;code&gt;http://yourdomain.com&lt;/code&gt;. Next, you&amp;rsquo;ll want to set up CloudFront so that becomes &lt;code&gt;https://yourdomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;set-up-cloudfront-and-ssl&#34;&gt;Set up CloudFront and SSL&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-cloudfront-walkthrough.html&#34;&gt;Here are the instructions for setting up CloudFront.&lt;/a&gt; There are a few important points to make sure you don&amp;rsquo;t miss on the &amp;ldquo;Create Distribution&amp;rdquo; page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name:&lt;/strong&gt; Make sure to use your S3 bucket endpoint, and not select the bucket from the dropdown menu that appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewer Protocol Policy:&lt;/strong&gt; If you want requests for &lt;code&gt;http://yourdomain.com&lt;/code&gt; to always result in &lt;code&gt;https://yourdomain.com&lt;/code&gt;, choose &amp;ldquo;Redirect HTTP to HTTPS.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternate Domain Names:&lt;/strong&gt; Enter &lt;code&gt;yourdomain.com&lt;/code&gt; and &lt;code&gt;www.yourdomain.com&lt;/code&gt; on separate lines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL Certificate:&lt;/strong&gt; See below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; Enter the name of the html file that should be returned when your users go to &lt;code&gt;https://yourdomain.com&lt;/code&gt;. This is usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssl-certificate&#34;&gt;SSL Certificate&lt;/h2&gt;
&lt;p&gt;To show your content with HTTPS at your custom domain, you&amp;rsquo;ll need to choose &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can easily get an SSL Certificate with AWS Certificate Manager. Click on &amp;ldquo;Request or Import a Certificate with ACM&amp;rdquo; to get started in a new window.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request.html&#34;&gt;Here are instructions for setting up a certificate.&lt;/a&gt; I don&amp;rsquo;t think they&amp;rsquo;re very good, personally. Don&amp;rsquo;t worry, I got you.&lt;/p&gt;
&lt;p&gt;To account for &amp;ldquo;www.yourdomain.com&amp;rdquo; as well as any subdomains, you&amp;rsquo;ll want to add two domain names to the certificate, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmdomains.png#screenshot&#34; alt=&#34;Adding domain names to ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Next.&amp;rdquo; You&amp;rsquo;ll be asked to choose a validation method. Choose &amp;ldquo;DNS validation&amp;rdquo; and click &amp;ldquo;Review.&amp;rdquo; If everything is as it should be, click &amp;ldquo;Confirm and request.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a page, &amp;ldquo;Validation&amp;rdquo; that looks like this. You&amp;rsquo;ll have to click the little arrow next to both domain names to get the important information to show:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmvalidation.png#screenshot&#34; alt=&#34;Validation instructions for ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under both domain names, click the button for &amp;ldquo;Create record in Route 53.&amp;rdquo; This will automatically create a CNAME record set in Route 53 with the given values, which ACM will then check in order to validate that you own those domains. You could create the records manually, if you wanted to for some reason. I don&amp;rsquo;t know, maybe you&amp;rsquo;re killing time. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue.&amp;rdquo; You&amp;rsquo;ll see a console that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmcertificates.png#screenshot&#34; alt=&#34;List of certificates you own.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It may take some time for the validation to complete, at which point the &amp;ldquo;Pending validation&amp;rdquo; status will change to &amp;ldquo;Issued.&amp;rdquo; Again with the waiting. You can close this window to return to the CloudFront set up. Once the certificate is validated, you&amp;rsquo;ll see it in the dropdown menu under &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can click &amp;ldquo;Create Distribution&amp;rdquo; to finish setting up CloudFront.&lt;/p&gt;
&lt;p&gt;In your CloudFront Distributions console, you&amp;rsquo;ll see &amp;ldquo;In Progress&amp;rdquo; until AWS has done its thing. Once it&amp;rsquo;s done, it&amp;rsquo;ll change to &amp;ldquo;Deployed.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;one-last-thing&#34;&gt;One last thing&lt;/h2&gt;
&lt;p&gt;Return to your &lt;a href=&#34;https://console.aws.amazon.com/route53/&#34;&gt;Route 53 console&lt;/a&gt; and click on &amp;ldquo;Hosted zones&amp;rdquo; in the sidebar, then your domain name from the list. For both A records, change the &amp;ldquo;Alias Target&amp;rdquo; from the S3 endpoint to your CloudFront distribution domain, which should look something like &lt;code&gt;dj4p1rv6mvubz.cloudfront.net&lt;/code&gt;. It appears in the dropdown after you clear the field.&lt;/p&gt;
&lt;h1 id=&#34;you-re-done&#34;&gt;You&amp;rsquo;re done!&lt;/h1&gt;
&lt;p&gt;Well, usually. If you navigate to your new HTTPS domain and don&amp;rsquo;t see your beautiful new site where it should be, here are some things you can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check S3 bucket policy - ensure that the bucket for &lt;code&gt;yourdomain.com&lt;/code&gt; in the &lt;a href=&#34;https://s3.console.aws.amazon.com/s3/home&#34;&gt;S3 console&lt;/a&gt; shows &amp;ldquo;Public&amp;rdquo; in the &amp;ldquo;Access&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;Check S3 bucket index document - In the &amp;ldquo;Properties&amp;rdquo; tab for the bucket, then &amp;ldquo;Static website hosting&amp;rdquo;. Usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Check CloudFront Origin - the &amp;ldquo;Origin&amp;rdquo; column in the &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home&#34;&gt;CloudFront Console&lt;/a&gt; should show the S3 bucket&amp;rsquo;s endpoint (&lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;), not the bucket name (&lt;code&gt;yourdomain.com.s3.amazonaws.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Check CloudFront Default Root Object - clicking on the distribution name should take you to a details page that shows &amp;ldquo;Default Root Object&amp;rdquo; in the list with the value that you set, usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Wait. Sometimes changes take up to 48hrs to propagate. ¯\_(ツ)_/¯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope that helps you get set up with your new static site on AWS! Feel free to &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;share your link&lt;/a&gt; with me, I&amp;rsquo;d love to see what you&amp;rsquo;ve created. :)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/aws-acmcertificates_huac5689bd49ae0e9521775d5c4704e40f_49209_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How I ditched WordPress and set up my custom domain HTTPS site for (almost) free</title><link>https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/</link><pubDate>Sat, 28 Jan 2017 13:16:17 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/</guid><description>A guide (for the minimally tech-savvy) to setting up a website with HTTPS using Hugo, Cloudflare and GitHub Pages.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/cover_free-https_hu8673880aabf7986b54167d322ecde323_1104421_640x0_resize_box_2.png" width="640" height="402"/>
&lt;p&gt;I got annoyed with WordPress.com. While using the service has its pros (like https and a mobile responsive website, and being very visual and beginner-friendly) it&amp;rsquo;s limiting. For someone who&amp;rsquo;s comfortable enough to be tweaking CSS but who&amp;rsquo;s not interested in creating their own theme (or paying upwards of $50 for one), I felt I wasn&amp;rsquo;t really the type of consumer WordPress.com was suited to.&lt;/p&gt;
&lt;p&gt;To start with, if you want to remove WordPress advertising and use a custom domain name, it&amp;rsquo;s a minimum of $3 per month. If, like me, the free themes provided aren&amp;rsquo;t just what you&amp;rsquo;re looking for, you&amp;rsquo;re stuck with two choices: buy a theme for $50+, or pay $8.25 per month to do &lt;em&gt;some&lt;/em&gt; css customization. I don&amp;rsquo;t know about you, but I feel like there should be a hack for this.&lt;/p&gt;
&lt;h1 id=&#34;how-i-ditched-wordpress-and-got-everything-i-wanted-for-free&#34;&gt;How I ditched WordPress and got everything I wanted for free&lt;/h1&gt;
&lt;p&gt;Okay, &lt;em&gt;almost&lt;/em&gt; free. You still have to pay &lt;a href=&#34;https://www.namecheap.com/promos/2016/crazy-88.aspx?aff=109417&#34;&gt;at least $0.88&lt;/a&gt; for a domain name.&lt;/p&gt;
&lt;p&gt;For those of you technical enough to skip reading a long post, the recipe is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.namecheap.com/?aff=109417&#34;&gt;Buy a custom domain via this Namecheap affiliate link&lt;/a&gt; (Thanks! :))&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, my favorite static site generator&lt;/li&gt;
&lt;li&gt;Host with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put your &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/#configuring-an-alias-or-aname-record-with-your-dns-provider&#34;&gt;custom domain to work with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Use Cloudflare&amp;rsquo;s free plan&lt;/del&gt; &lt;a href=&#34;https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/#5-enforce-https-for-github-pages&#34;&gt;Enforce HTTPS for GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s do the nitty gritty:&lt;/p&gt;
&lt;h2 id=&#34;1-buy-a-custom-domain&#34;&gt;1. Buy a custom domain&lt;/h2&gt;
&lt;p&gt;This one&amp;rsquo;s pretty simple. Head on over to &lt;a href=&#34;https://www.namecheap.com/?aff=109417&#34;&gt;Namecheap&lt;/a&gt;, &lt;a href=&#34;https://www.gandi.net&#34;&gt;Gandi&lt;/a&gt;, or if you&amp;rsquo;re rolling in dough, &lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;. Find your perfect web address and buy it up.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a &lt;a href=&#34;https://www.namecheap.com/domains/personal.aspx?aff=109417&#34;&gt;personal domain&lt;/a&gt; like &lt;em&gt;yourname.com,&lt;/em&gt; it&amp;rsquo;s a pretty good idea to pay upfront for five years or even ten years, if you&amp;rsquo;ve got the cash. It&amp;rsquo;ll save you the trouble of remembering to renew, allow you to build your personal brand, and prevent someone else from buying up your URL.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re just trying out an idea, you can go with a one-year &lt;a href=&#34;https://www.namecheap.com/promos/2016/crazy-88.aspx?aff=109417&#34;&gt;$0.88 domain&lt;/a&gt;. After the ICANN fee, it&amp;rsquo;ll cost you a whopping $1.06. Namecheap also gives you WhoisGuard (domain registration privacy) free for one year.&lt;/p&gt;
&lt;h2 id=&#34;2-install-hugo&#34;&gt;2. Install Hugo&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a big fan of &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt; so far. Admittedly, those who feel more comfortable with a visual, WYSIWYG editor may feel like a fish out of water at first. As long as you&amp;rsquo;re not afraid of using command line, though, using Hugo is pretty straightforward. The fact that I have access to all my code is my favorite part. It&amp;rsquo;s only as simple or complicated as I want it to be.&lt;/p&gt;
&lt;p&gt;Hugo is open source and free. They&amp;rsquo;ve got great documentation, and following their &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt; line-by-line will get you set up with your new site in minutes.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not used to the idea of your site existing as files and folders, the basic premise is this: Hugo, along with the themes available, helps you to create all the pages and files that your site needs to run. Blog posts can be written in Markdown and saved in your &lt;code&gt;/content/blog/&lt;/code&gt; folder; preferences for your site and theme can be set in the &lt;code&gt;config.toml&lt;/code&gt; file. After that, generating all your site&amp;rsquo;s pages is as quick and easy as typing the command &lt;code&gt;hugo --theme=&amp;lt;your theme&amp;gt;&lt;/code&gt;. You&amp;rsquo;ll be able to see a live version of your site in your browser as you&amp;rsquo;re editing it (go to &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; in your browser, as described in Step 5) so you&amp;rsquo;re not flying blind.&lt;/p&gt;
&lt;p&gt;Confused? Ask me on Twitter &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;@victoriadotdev&lt;/a&gt; and I&amp;rsquo;ll help you out!&lt;/p&gt;
&lt;h2 id=&#34;3-host-with-github-pages&#34;&gt;3. Host with GitHub Pages&lt;/h2&gt;
&lt;p&gt;If you read to Step 12 of Hugo&amp;rsquo;s Quickstart Guide, you&amp;rsquo;ll see that they even provided instructions for hosting your files on GitHub pages. If you&amp;rsquo;re new to Git, you&amp;rsquo;ll first need to &lt;a href=&#34;https://github.com/&#34;&gt;sign up at GitHub&lt;/a&gt; and then &lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34;&gt;set up Git&lt;/a&gt;. GitHub is a very friendly resource, and you can find a multitude of code examples and guides in connection with it. The &lt;a href=&#34;https://guides.github.com/activities/hello-world/&#34;&gt;Hello World Guide&lt;/a&gt; will take you through all you need to know to use GitHub.com.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re comfortable with the way GitHub works generally, setting up a site by following &lt;a href=&#34;https://pages.github.com/&#34;&gt;the guide on GitHub Pages&lt;/a&gt; is no big deal. If you followed the Hugo Quickstart Guide up to Step 11, you&amp;rsquo;ll want to jump to Step 12 after creating the repository on GitHub.&lt;/p&gt;
&lt;p&gt;In case it&amp;rsquo;s not clear, once you set up your new repository on GitHub called &lt;em&gt;yourusername&lt;/em&gt;.github.io, grab the HTTPS link at the top. From there it&amp;rsquo;s just a few simple commands to create the git repository for your site and push it to your new web address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# from yoursite/public folder:&lt;/span&gt;
$ git init
$ git remote add origin &amp;lt;paste that https url here!&amp;gt;
$ git add --all
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initial commit.&amp;#34;&lt;/span&gt;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have a little celebration - your site is already up at &lt;code&gt;https://yourusername.github.io&lt;/code&gt;! Now for the pizza-de-resilience: the custom domain.&lt;/p&gt;
&lt;h2 id=&#34;4-point-your-custom-domain-to-github-pages&#34;&gt;4. Point your custom domain to GitHub Pages&lt;/h2&gt;
&lt;p&gt;To set up your site at apex (meaning &lt;code&gt;yourname.com&lt;/code&gt; will replace &lt;code&gt;yourusername.github.io&lt;/code&gt;), there&amp;rsquo;s just four steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/&#34;&gt;Add your domain to your GitHub Pages site repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In your domain registrar&amp;rsquo;s DNS settings, &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider&#34;&gt;create A records pointing to GitHub&amp;rsquo;s IP addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In your domain registrar&amp;rsquo;s DNS settings, create a CNAME record pointing to &lt;code&gt;yourusername.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure there&amp;rsquo;s a CNAME file in the root directory of your GitHub repository containing &lt;code&gt;yourname.com&lt;/code&gt; (your custom domain)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-enforce-https-for-github-pages&#34;&gt;5. Enforce HTTPS for GitHub Pages&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;May 15, 2018 edit:&lt;/em&gt; &lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;GitHub Pages now support HTTPS&lt;/a&gt; through a partnership with &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;! This is welcome news and greatly simplifies the process of serving your site securely. Just look for this clever checkbox in the Settings of your site&amp;rsquo;s GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;custom-domain-https.png#screenshot&#34; alt=&#34;Enforce HTTPS checkbox&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below section is left here to show how far we&amp;rsquo;ve come. :)&lt;/p&gt;
&lt;h2 id=&#34;5-get-https-with-cloudflare&#34;&gt;&lt;del&gt;5. Get HTTPS with Cloudflare&lt;/del&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Why do I need a SSL certificate anyway?&lt;/em&gt; For one, it&amp;rsquo;ll &lt;a href=&#34;http://searchengineland.com/google-starts-giving-ranking-boost-secure-httpsssl-sites-199446/&#34;&gt;give your site a little boost on Google&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Sign up with Cloudflare&lt;/a&gt; and follow their set up guide. The site will collect your custom domain&amp;rsquo;s DNS settings and set everything up automagically. Once the set up is complete, Cloudflare provides you with two new nameserver addresses. Go to your domain registrar&amp;rsquo;s DNS settings and change the Domain Name Servers to the ones Cloudflare gives you.&lt;/p&gt;
&lt;p&gt;In your &lt;code&gt;config.toml&lt;/code&gt;, &lt;code&gt;config.yaml&lt;/code&gt;, or &lt;code&gt;config.json&lt;/code&gt; file, ensure these lines are present:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yourname.com/&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;canonifyURLs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;enforce_ssl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoursite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To redirect users to HTTPS, add this script to the top of your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yourname.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s pretty much it! In a couple hours or so, your site will be up and running at &lt;code&gt;https://yourname.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/cover_free-https_hu8673880aabf7986b54167d322ecde323_1104421_640x0_resize_box_2.png" type="image/jpg"/></item></channel></rss>