<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Data on victoria.dev</title><link>https://victoria.dev/tags/data/</link><description>Recent content in Data on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Mon, 30 Sep 2019 08:03:12 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/data/index.xml" rel="self" type="application/rss+xml"/><item><title>Secure application architecture basics: separation, configuration, and access</title><link>https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/</link><pubDate>Mon, 30 Sep 2019 08:03:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/</guid><description>A starting point for building secure application architecture, for busy developers.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/cover_hu73e92637aebb1682b96cf0460f9cc452_2063427_640x0_resize_box_2.png" width="640" height="443"/>
&lt;p&gt;Software developers today are encouraged to focus on building, and that&amp;rsquo;s a great thing. We&amp;rsquo;re benefitting from maker culture, an attitude of &amp;ldquo;always be shipping,&amp;rdquo; open source collaboration, and a bevy of apps that help us prioritize and execute with maximum efficiency. We&amp;rsquo;re in an environment of constant creation, where both teams and solo entrepreneurs can be maximally productive.&lt;/p&gt;
&lt;p&gt;Sometimes, this breakneck-speed productivity shows its downsides.&lt;/p&gt;
&lt;p&gt;As I learn more about security best practices, I can&amp;rsquo;t help but see more and more applications that just don&amp;rsquo;t have a clue. A lack of awareness of security seems to lead to a lack of prioritization of those tasks that don&amp;rsquo;t directly support bringing the product to launch. The market seems to have made it more important to launch a useable product than a secure one, with the prevailing attitude being, &amp;ldquo;we can do the security stuff later.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Cobbling together a foundation based more on expediency than longevity is a bad way to build applications and a great way to build security debt. Security debt, like technical debt, is amassed by making (usually hasty) decisions that can make it more difficult to secure the application later on. If you&amp;rsquo;re familiar with the concept of &amp;ldquo;pushing left&amp;rdquo; (or if you read my &lt;a href=&#34;https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/&#34;&gt;article about sensitive data exposure&lt;/a&gt;), you&amp;rsquo;ll know that when it comes to security, sometimes there isn&amp;rsquo;t a version of &amp;ldquo;later&amp;rdquo; that isn&amp;rsquo;t &lt;em&gt;too&lt;/em&gt; late. It&amp;rsquo;s a shame, especially since following some basic security practices with high benefit yield early on in the development process doesn&amp;rsquo;t take significantly more time than &lt;em&gt;not&lt;/em&gt; following them. Often, it comes down to having some basic but important knowledge that enables making the more secure decision.&lt;/p&gt;
&lt;p&gt;While application architecture varies greatly, a few basic principles can commonly be applied. This article will provide a high-level overview of areas that I hope will help point developers in the right direction.&lt;/p&gt;
&lt;p&gt;There must be a reason we call it application &amp;ldquo;architecture,&amp;rdquo; and I like to think it&amp;rsquo;s because the architecture of software is similar in some basic ways to the architecture of a building. (Or at least, in my absolute zero building-creation expertise, how I imagine a pretty utilitarian building to be.) Here&amp;rsquo;s how I like to summarize three basic points of building secure application architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separated storage&lt;/li&gt;
&lt;li&gt;Customized configuration&lt;/li&gt;
&lt;li&gt;Controlled access and user scope&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is only a jumping-off point meant to get us started on the right foot; a complete picture of a fully-realized application&amp;rsquo;s security posture includes areas outside the scope of this post, including authentication, logging and monitoring, integration, and sometimes compliance.&lt;/p&gt;
&lt;h2 id=&#34;1-separated-storage&#34;&gt;1. Separated storage&lt;/h2&gt;
&lt;p&gt;The concept of separation, from a security standpoint, refers to storing files that serve different purposes in different places. When we&amp;rsquo;re constructing our building and deciding where all the rooms go, we similarly create the lobby on the ground floor and place administrative offices on higher floors, perhaps off the main path. While both are rooms, we understand that they serve different purposes, have different functional needs, and possibly very different security requirements.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;separation.png&#34; alt=&#34;Separation of building floors&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When it comes to our files, the benefit is perhaps easiest for us to understand if we consider a simple file structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;application/
├───html/
│ └───index.html
├───assets/
│ ├───images/
│ │ ├───rainbows.jpg
│ │ └───unicorns.jpg
│ └───style.css
└───super-secret-configurations/
└───master-keys.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our simplified example, let&amp;rsquo;s say that all our application&amp;rsquo;s images are stored in the &lt;code&gt;application/assets/images/&lt;/code&gt; directory. When one of our users creates a profile and uploads their picture to it, this picture is also stored in this folder. Makes sense, right? It&amp;rsquo;s an image, and that&amp;rsquo;s where the images go. What&amp;rsquo;s the issue?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with navigating a file structure in a terminal, you may have seen this syntax before: &lt;code&gt;../../&lt;/code&gt;. The two dots are a handy way of saying, &amp;ldquo;go up one directory.&amp;rdquo; If we execute the command &lt;code&gt;cd ../../&lt;/code&gt; in the &lt;code&gt;images/&lt;/code&gt; directory of our simple file structure above, we&amp;rsquo;d go up into &lt;code&gt;assets/&lt;/code&gt;, then up again to the root directory, &lt;code&gt;application/&lt;/code&gt;. This is a problem because of a wee little vulnerability dubbed &lt;a href=&#34;https://cwe.mitre.org/data/definitions/22.html&#34;&gt;path traversal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the dot syntax saves us some typing, it also introduces the interesting advantage of not actually needing to know what the parent directory is called in order to go to it. Consider an attack payload script, delivered into the &lt;code&gt;images/&lt;/code&gt; folder of our insecure application, that went up one directory using &lt;code&gt;cd ../&lt;/code&gt; and then sent everything it found to the attacker, on repeat. Eventually, it would reach the root application directory and access the &lt;code&gt;super-secret-configurations/&lt;/code&gt; folder. Not good.&lt;/p&gt;
&lt;p&gt;While other measures should certainly be in place to prevent path traversal and related user upload vulnerabilities, the simplest prevention by far is a separation of storage. Core application files and assets should not be combined with other data, and especially not with &lt;a href=&#34;https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/&#34;&gt;user input&lt;/a&gt;. It&amp;rsquo;s best to keep user-uploaded files as well as activity logs (which may contain juicy data and can be vulnerable to injection attacks) separate from the main application.&lt;/p&gt;
&lt;p&gt;Separation can be achieved in a few ways, such as by using a different server, different instance, separate IP range, or separate domain.&lt;/p&gt;
&lt;h2 id=&#34;2-customized-configuration&#34;&gt;2. Customized configuration&lt;/h2&gt;
&lt;p&gt;While spending time on customization may be frowned upon in some scenarios when it comes to developing quickly, one area that we definitely want to customize is configuration settings. &lt;a href=&#34;https://github.com/OWASP/Top10/blob/cb5f8967bba106e14a350761ac4f93b8aec7f8fa/2017/en/0xa6-security-misconfiguration.md&#34;&gt;Security misconfiguration&lt;/a&gt; is listed in the OWASP Top 10 as a significant number of security incidents occur because a server, firewall, or administrative account is running in production with default settings in play. Upon the opening of our new building, we&amp;rsquo;d hopefully be more careful to ensure we haven&amp;rsquo;t left any keys in the locks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;defaultkey.png&#34; alt=&#34;Three keys&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Usually, the victims of attacks related to default settings aren&amp;rsquo;t specifically targeted. Rather, they are found by automated scanning tools that attackers run over many possible targets, effectively prodding at many different systems to see if any roll over and expose some useful exploit. The automated nature of this attack means that it&amp;rsquo;s important for us to review settings for every piece of our architecture. Even if an individual piece doesn&amp;rsquo;t seem significant, it may provide a vulnerability that allows an attacker to use it as a gateway to our larger application.&lt;/p&gt;
&lt;p&gt;In particular, examine architecture components for unattended areas such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default accounts, especially with default passwords, left in service;&lt;/li&gt;
&lt;li&gt;Example web pages, tutorial applications, or sample data left in the application;&lt;/li&gt;
&lt;li&gt;Unnecessary ports left in service, or ports left open to the Internet;&lt;/li&gt;
&lt;li&gt;Unrestricted permitted HTTP methods;&lt;/li&gt;
&lt;li&gt;Sensitive information stored in automated logs;&lt;/li&gt;
&lt;li&gt;Default configured permissions in managed services; and,&lt;/li&gt;
&lt;li&gt;Directory listings, or sensitive file types, left accessible by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list isn&amp;rsquo;t exhaustive, and specific architecture components, such as cloud storage or web servers, will have other features that can be configured and thus should be reviewed. In general, we can reduce our application&amp;rsquo;s attack surface by being minimalists when it comes to architecture components. If we use fewer components or don&amp;rsquo;t install modules we don&amp;rsquo;t really need, we&amp;rsquo;ll have fewer possible attack entry points to configure and safeguard.&lt;/p&gt;
&lt;h2 id=&#34;3-controlled-access-and-user-scope&#34;&gt;3. Controlled access and user scope&lt;/h2&gt;
&lt;p&gt;One of the more difficult security problems to test for in an application is improperly configured access control. Automated testing tools have limited capability to find areas of an application that one user shouldn&amp;rsquo;t be able to access, and this is often thus left to manual testing or source code review to discover. By considering this vulnerability early on in the software development lifecycle when architectural decisions are being made, we reduce the risk that it becomes a problem that&amp;rsquo;s harder to fix later. After all, we wouldn&amp;rsquo;t simply leave our master keys out of reach on a high ledge and hope no one comes along with a ladder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;access.png&#34; alt=&#34;A cartoon of a user attempting to elevate privilege&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP/Top10/blob/master/2017/en/0xa5-broken-access-control.md&#34;&gt;Broken access control&lt;/a&gt; is listed in the OWASP Top 10, which goes into more detail on its various forms. As a simple example, consider an application that has two levels of access: administrators, and users. We may build a feature for our application, such as the ability to moderate or ban users, with the intention that only administrators would be allowed to use it. If we&amp;rsquo;re aware of the possibility of access control misconfigurations or exploits, we may decide to build the moderation feature in a completely separate area from the user-accessible space, such as on a different domain, or as part of a model that users don&amp;rsquo;t share. This greatly reduces the risk that an access control misconfiguration or elevation of privilege vulnerability might allow a user to improperly access the moderation feature later on.&lt;/p&gt;
&lt;p&gt;Robust access control in our application of course necessitates further support to be effective, and we should consider factors such as sensitive tokens or keys passed as URL parameters or whether a control fails securely or insecurely. Nevertheless, by considering authorization at the architectural stage, we can set ourselves up to make further reinforcements easier to implement.&lt;/p&gt;
&lt;h2 id=&#34;security-basics-for-maximum-benefit&#34;&gt;Security basics for maximum benefit&lt;/h2&gt;
&lt;p&gt;Similar to avoiding racking up technical debt by choosing a well-vetted framework, developers can avoid security debt by becoming aware of common vulnerabilities and the simple architectural decisions we can make to help mitigate them. For a much more detailed resource on how to bake security into our applications from the start, the &lt;a href=&#34;https://github.com/OWASP/ASVS&#34;&gt;OWASP Application Security Verification Standard&lt;/a&gt; is a robust guide.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/cover_hu73e92637aebb1682b96cf0460f9cc452_2063427_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Migrating to the cloud but without screwing it up, or how to move house</title><link>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</link><pubDate>Mon, 23 Sep 2019 08:03:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</guid><description>A practical guide to moving to cloud services with minimal downtime, using AWS examples.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" width="640" height="468"/>
&lt;p&gt;For an application that&amp;rsquo;s ready to scale, not using managed cloud architecture these days is like insisting on digging your own well for water. It&amp;rsquo;s far more labour-intensive, requires buying all your own equipment, takes a lot more time, and there&amp;rsquo;s a higher chance you&amp;rsquo;re going to get it wrong because you don&amp;rsquo;t personally have a whole lot of experience digging wells, anyway.&lt;/p&gt;
&lt;p&gt;That said - let&amp;rsquo;s just get this out of the way first - there is no cloud. It&amp;rsquo;s just someone else&amp;rsquo;s computer.&lt;/p&gt;
&lt;p&gt;Of course, these days, cloud services go far beyond the utility we&amp;rsquo;d expect from a single computer. Besides being able to quickly set up and utilize the kind of computing power that previously required a new office lease agreement to house, there are now a multitude of monitoring, management, and analysis tools at our giddy fingertips. While it&amp;rsquo;s important to understand that the cloud isn&amp;rsquo;t a better option in every case, for applications that can take advantage of it, we can do more, do it faster, and do it for less money than if we were to insist on building our own on-premises infrastructure.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all great, and easily said; moving to the cloud, however, can look from the outset like a pretty daunting task. How, exactly, do we go about shifting what may be years of on-premises data and built-up systems to &lt;em&gt;someone else&amp;rsquo;s computer?&lt;/em&gt; You know, without being able to see it, touch it, and without completely screwing up our stuff.&lt;/p&gt;
&lt;p&gt;While it probably takes less work and money than setting up or maintaining the same architecture on-premise, it does take some work to move to the cloud initially. It&amp;rsquo;s important that our application is prepared to migrate, and capable of using the benefits of cloud services once it gets there. To accomplish this, and a smooth transition, preparation is key. In fact, it&amp;rsquo;s a whole lot like moving to a new house.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll take a high-level look at the general stages of taking an on-premise or self-hosted application and moving it to the cloud. This guide is meant to serve as a starting point for designing the appropriate process for your particular situation, and to enable you to better understand the cloud migration process. While cloud migration may not be the best choice for some applications - such as ones without scalable architecture or where very high computing resources are needed - a majority of modular and modern applications stand to benefit from a move to the cloud.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s certainly possible, as I discovered at a recent event put on by &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt; (AWS) Solutions Architects, to migrate smoothly and efficiently, with near-zero loss of availability to customers. I&amp;rsquo;ll specifically reference some services provided by AWS, however, similar functionality can be found with other cloud providers. I&amp;rsquo;ve found the offerings from AWS to be pleasantly modular in scope, which is why I use them myself and why they make good examples for discussing general concepts.&lt;/p&gt;
&lt;p&gt;To have our move go as smoothly as possible, here are the things we&amp;rsquo;ll want to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The type of move we&amp;rsquo;re making;&lt;/li&gt;
&lt;li&gt;The things we&amp;rsquo;ll take, and the things we&amp;rsquo;ll clean up;&lt;/li&gt;
&lt;li&gt;How to choose the right type and size for the infrastructure we&amp;rsquo;re moving into; and&lt;/li&gt;
&lt;li&gt;How to do test runs to practice for the big day.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-type-of-move-we-re-making&#34;&gt;The type of move we&amp;rsquo;re making&lt;/h2&gt;
&lt;p&gt;While it&amp;rsquo;s important to understand why we&amp;rsquo;re moving our application to cloud services, we should also have an idea of what we&amp;rsquo;d like it to look like when it gets there. There are three main ways to move to the cloud: re-host, re-platform, or re-factor.&lt;/p&gt;
&lt;h3 id=&#34;re-host&#34;&gt;Re-host&lt;/h3&gt;
&lt;p&gt;A re-host scenario is the the most straightforward type of move. It involves no change to the way our application is built or how it runs. For example, if we currently have Python code, use PostgreSQL, and serve our application with Apache, a re-host move would mean we use all the same components, combined in just the same way, only now they&amp;rsquo;re in the cloud. It&amp;rsquo;s a lot like moving into a new house that has the exact same floor plan as the current one. All the furniture goes into the same room it&amp;rsquo;s in now, and it&amp;rsquo;s going to feel pretty familiar when we get there.&lt;/p&gt;
&lt;p&gt;The main draw of a re-host move is that it may offer the least amount of complication necessary in order to take advantage of going to the cloud. Scalable applications, for example, can gain the ability to automatically manage necessary application resources.&lt;/p&gt;
&lt;p&gt;While re-hosting makes scaling more automatic, it&amp;rsquo;s important to note that it won&amp;rsquo;t in itself make an application scalable. If the application infrastructure is not organized in such a way that gives it the ability to scale, a re-factor may be necessary instead.&lt;/p&gt;
&lt;h3 id=&#34;re-platform&#34;&gt;Re-platform&lt;/h3&gt;
&lt;p&gt;If a component of our current application set up isn&amp;rsquo;t working out well for us, we&amp;rsquo;re probably going to want to re-platform. In this case, we&amp;rsquo;re making a change to at least one component of our architecture; for example, switching our database from Oracle to MySQL on &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;Amazon Relational Database Service&lt;/a&gt; (RDS).&lt;/p&gt;
&lt;p&gt;Like moving from a small apartment in Tokyo to an equally small apartment in New York, a re-platform doesn&amp;rsquo;t change the basic nature of our application, but does change its appearance and environment. In the database change example, we&amp;rsquo;ll have all the same data, just organized or formatted a little differently. In most cases, we won&amp;rsquo;t have to make these changes manually. A tool such as &lt;a href=&#34;https://aws.amazon.com/dms/&#34;&gt;Amazon Database Migration Service&lt;/a&gt; (DMS) can help to seamlessly shift our data over to the new database.&lt;/p&gt;
&lt;p&gt;We might re-platform in order to enable us to better meet a business demand in the future, such as scaling up, integrating with other technological components, or choosing a more modern technology stack.&lt;/p&gt;
&lt;h3 id=&#34;re-factor&#34;&gt;Re-factor&lt;/h3&gt;
&lt;p&gt;A move in which we re-factor our application is necessarily more complicated than our other options, however, it may provide the most overall benefit for companies or applications that have reason to make this type of move. As with code, refactoring is done when fundamental changes need to be made in order for our application to meet a business need. The specifics necessarily differ case-by-case, but typically involve changes to architectural components or how those components relate to one another. This type of move may also involve changing application code in order to optimize the application&amp;rsquo;s performance in a cloud environment. We can think of it like moving out from our parent&amp;rsquo;s basement in the suburbs and getting a nice townhouse in the city. There&amp;rsquo;s no way we&amp;rsquo;re taking that ancient hand-me-down sofa, so we&amp;rsquo;ll need some new furniture, and for our neighbour&amp;rsquo;s sake, probably window dressings.&lt;/p&gt;
&lt;p&gt;Refactoring may enable us to modernize a dated application, or make it more efficient in general. With greater efficiency, we can better take advantage of services that cloud providers typically offer, like bursting resources or attaining deep analytical insight.&lt;/p&gt;
&lt;p&gt;If a re-factor is necessary but time is scarce, it may be better to re-host or re-platform first, then re-factor later. That way, we&amp;rsquo;ll have a job well done later instead of a hasty, botched migration (and more problems) sooner.&lt;/p&gt;
&lt;h2 id=&#34;what-to-take-and-what-to-clean-up&#34;&gt;What to take, and what to clean up&lt;/h2&gt;
&lt;p&gt;Over the years of living in one place, stuff tends to pile up unnoticed in nooks and crannies. When moving house, it&amp;rsquo;s usually a great opportunity to sort everything out and decide what is useful enough to keep, and what should be discarded or given away. Moving to the cloud is a similarly great opportunity to do the same when it comes to our application.&lt;/p&gt;
&lt;p&gt;While cloud storage is inexpensive nowadays, there may be some things that don&amp;rsquo;t make sense to store any longer, or at least not keep stored with our primary application. If data cannot be discarded due to policy or regulations, we may choose a different storage class to house data that we don&amp;rsquo;t expect to need anytime soon outside of our main application.&lt;/p&gt;
&lt;p&gt;In the case of &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon&amp;rsquo;s Simple Storage Service&lt;/a&gt; (S3), we can choose to use different &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/&#34;&gt;storage classes&lt;/a&gt; that accomplish this goal. While the data that our business relies on every day can take advantage of the Standard class 99.99% availability, data meant for long-term cold storage such as archival backups can be put into the Glacier class, which has longer retrieval time and lower cost.&lt;/p&gt;
&lt;h2 id=&#34;the-right-type-and-size&#34;&gt;The right type and size&lt;/h2&gt;
&lt;p&gt;Choosing the type and size of cloud infrastructure appropriate for our business is usually the part that can be the most confusing. How should we predict, in a new environment or for a growing company, the computing power we&amp;rsquo;ll need?&lt;/p&gt;
&lt;p&gt;Part of the beauty of not procuring hardware on our own is that won&amp;rsquo;t have to make predictions like these. Using cloud storage and instances, expanding or scaling back resources can be done in a matter of minutes, sometimes seconds. With managed services, it can even be done automatically for us. With the proper support for scalability in our application, it&amp;rsquo;s like having a magical house that instantly generates any type of room and amenity we need at that moment. The ability to continually ensure that we&amp;rsquo;re using appropriate, cost-effective resources is at our fingertips, and often clearly visualized in charts and dashboards.&lt;/p&gt;
&lt;p&gt;For applications new to the cloud, some leeway for experimentation may be necessary. While cloud services enables us to quickly spin up and try out different architectures, there&amp;rsquo;s no guarantee that all of those set ups will work well for our application. For example, running a single instance may be &lt;a href=&#34;http://einaregilsson.com/serverless-15-percent-slower-and-eight-times-more-expensive/&#34;&gt;less expensive than going serverless&lt;/a&gt;, but we&amp;rsquo;d be hard pressed to know this until we tried it out.&lt;/p&gt;
&lt;p&gt;As a starting point, we simply need enough storage and computing power to support the application as it is currently running, today. For example, in the case of storage, consider the size of the current database - the actual database data, not the total storage capacity of hardware on-premises. For a detailed cost exploration, AWS even offers a &lt;a href=&#34;https://calculator.s3.amazonaws.com/index.html&#34;&gt;Simple Monthly Calculator&lt;/a&gt; with use case samples to help guide expectations.&lt;/p&gt;
&lt;h2 id=&#34;do-test-runs-before-the-big-day&#34;&gt;Do test runs before the big day&lt;/h2&gt;
&lt;p&gt;Running a trial cloud migration may be an odd concept, but it is an essential component to ensuring that the move goes as planned with minimal service interruption. Imagine the time and energy that would be saved in the moving house example if we could automate test runs! Invariably, some box or still-hung picture is forgotten and left out of the main truck, necessitating additional trips in other vehicles. With multiple chances to ensure we&amp;rsquo;ve got it down pat, we minimize the possibility that our move causes any break in normal day-to-day business.&lt;/p&gt;
&lt;p&gt;Generally, to do a test run, we create a duplicate version of our application. The more we can duplicate, the more thorough the test run will be, especially if our data is especially large. Though duplication may seem tedious, working with the actual components we intend to migrate is essential to ensuring the migration goes as planned. After all, if we only did a moving-house test run with one box, it wouldn&amp;rsquo;t be very representative.&lt;/p&gt;
&lt;p&gt;Test runs can help to validate our migration plan against any challenges we may encounter. These challenges might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downtime restrictions;&lt;/li&gt;
&lt;li&gt;Encrypting data in transit and immediately when at rest on the target;&lt;/li&gt;
&lt;li&gt;Schema conversion to a new target schema (the &lt;a href=&#34;https://aws.amazon.com/dms/schema-conversion-tool/&#34;&gt;AWS Schema Conversion Tool&lt;/a&gt; can also help);&lt;/li&gt;
&lt;li&gt;Access to databases, such as through firewalls or VPNs;&lt;/li&gt;
&lt;li&gt;Developing a process to ensure that all the data successfully migrated, such as by using a hash function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test runs also help to give us a more accurate picture of the overall time that a migration will take, as well as affording us the opportunity to fine-tune it. Factors that may affect the overall speed of a migration include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sizes of the source and target instances;&lt;/li&gt;
&lt;li&gt;Available bandwidth for moving data;&lt;/li&gt;
&lt;li&gt;Schema configurations; and&lt;/li&gt;
&lt;li&gt;Transaction pressure on the source, such as changes to the data and the volume of incoming transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the duplicate application has been migrated via one or more &lt;a href=&#34;https://aws.amazon.com/cloud-data-migration/&#34;&gt;options&lt;/a&gt;, we test the heck out of the application that&amp;rsquo;s now running in the cloud to ensure it performs as expected. Ideally, on the big day, we&amp;rsquo;d follow this same general process to move up-to-date duplicate data, and then seamlessly point the &amp;ldquo;real&amp;rdquo; application or web address to the new location in the cloud. This means that our customers experience near-zero downtime; essentially, only the amount of time that the change in location-pointing would need to propagate to their device.&lt;/p&gt;
&lt;p&gt;In the case of very large or complex applications with many components or many teams working together at the same time, a more gradual approach may be more appropriate than the &amp;ldquo;Big Bang&amp;rdquo; approach, and may help to mitigate risk of any interruptions. This means migrating in stages, component by component, and running tests between stages to ensure that all parts of the application are communicating with each other as expected.&lt;/p&gt;
&lt;h2 id=&#34;preparation-is-essential-to-a-smooth-migration&#34;&gt;Preparation is essential to a smooth migration&lt;/h2&gt;
&lt;p&gt;I hope this article has enabled a more practical understanding of how cloud migration can be achieved. With thorough preparation, it&amp;rsquo;s possible to take advantage of all the cloud has to offer, with minimal hassle to get there.&lt;/p&gt;
&lt;p&gt;My thanks to the AWS Solutions Architects who presented at Pop-Up Loft and shared their knowledge on these topics, in particular: Chandra Kapireddy, Stephen Moon, John Franklin, Michael Alpaugh, and Priyanka Mahankali.&lt;/p&gt;
&lt;p&gt;One last nugget of wisdom, courtesy of John: &amp;ldquo;Friends don&amp;rsquo;t let friends use DMS to create schema objects.&amp;rdquo;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How users and applications stay safe on the Internet: it&#39;s proxy servers all the way down</title><link>https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</link><pubDate>Mon, 16 Sep 2019 09:35:28 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</guid><description>An overview of how proxy servers form the basis of online anonymity, and how their use in various forms helps both users and web applications.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/cover_hua9810ca0d5d352b6afac9eae7c2c33fc_779068_640x0_resize_box_2.png" width="640" height="480"/>
&lt;p&gt;Both Internet users and Internet-connected applications can benefit from investing in cybersecurity. One core aspect of online privacy is the use of a proxy server, though this basic building block may not be initially visible underneath its more recognizable forms. Proxy servers are a useful thing to know about nowadays, for developers, software product owners, as well as the average dog on the Internet. Let&amp;rsquo;s explore what makes proxy servers an important piece of cybersecurity support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;On the Internet, nobody knows you&amp;rsquo;re a dog.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When &lt;a href=&#34;https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog&#34;&gt;Peter Steiner&amp;rsquo;s caption&lt;/a&gt; was first published in The New Yorker in 1993, it reportedly went largely unnoticed. Only later did the ominous and slightly frightening allusion to online anonymity touch the public consciousness with the icy fingers of the unknown. As Internet usage became more popular, users became concerned that other people could represent themselves online in any manner they chose, without anyone else knowing who they truly were.&lt;/p&gt;
&lt;p&gt;This, to make a gross understatement, is no longer the case. Thanks to &lt;a href=&#34;https://support.mozilla.org/en-US/kb/enable-and-disable-cookies-website-preferences&#34;&gt;tracking cookies&lt;/a&gt;, &lt;a href=&#34;https://robertheaton.com/2017/10/17/we-see-you-democratizing-de-anonymization/&#34;&gt;browser fingerprinting&lt;/a&gt;, &lt;a href=&#34;https://www.privacypolicies.com/blog/isp-tracking-you/&#34;&gt;Internet Service Providers (ISPs) selling our browsing logs to advertisers&lt;/a&gt;, and our own inexplicable inclination to put our names and faces on social networks, online anonymity is out like last year&amp;rsquo;s LaCroix flavours. While your next-door neighbor may not know how to find you online (well, except for through that location-based secondhand marketplace app you&amp;rsquo;re using), you can be certain that at least one large advertising company has a series of zeroes and ones somewhere that represent you, the specific details of your market demographic, and all your online habits, including your preferred flavour of LaCroix.&lt;/p&gt;
&lt;p&gt;There are ways to add &lt;em&gt;some&lt;/em&gt; layers of obscurity, like using a corporate firewall that hides your IP, or &lt;a href=&#34;https://www.torproject.org/&#34;&gt;using Tor&lt;/a&gt;. The underlying mechanism of both these methods is the same. Like being enshrouded in the layers of an onion, we&amp;rsquo;re using one or more &lt;a href=&#34;https://en.wikipedia.org/wiki/Proxy_server&#34;&gt;proxy servers&lt;/a&gt; to shield our slightly sulfuric selves from third-party tracking.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-proxy-server-anyway&#34;&gt;What&amp;rsquo;s a proxy server, anyway?&lt;/h2&gt;
&lt;p&gt;A proxy, in the traditional English definition, is the &amp;ldquo;authority or power to act for another.&amp;rdquo; (&lt;a href=&#34;https://www.merriam-webster.com/dictionary/proxy&#34;&gt;Merriam-Webster&lt;/a&gt;) A proxy server, in the computing context, is a server that acts on behalf of another server, or a user&amp;rsquo;s machine.&lt;/p&gt;
&lt;p&gt;By using a proxy to browse the Internet, for example, a user can defer being personally identifiable. All of the user&amp;rsquo;s Internet traffic appears to come from the proxy server instead of their machine.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-are-for-users&#34;&gt;Proxy servers are for users&lt;/h2&gt;
&lt;p&gt;There are a few ways that we, as the client, can use a proxy server to conceal our identity when we go online. It&amp;rsquo;s important to know that these methods offer differing levels of anonymity, and that no single method will really provide &lt;em&gt;true&lt;/em&gt; anonymity; if others are actively seeking to find you on the Internet, for whatever reason, further steps should be taken to make your activity truly difficult to identify. (Those steps are beyond the scope of this article, but you can get started with the &lt;a href=&#34;https://ssd.eff.org/&#34;&gt;Electronic Frontier Foundation&amp;rsquo;s (EFF) Surveillance Self-Defense&lt;/a&gt; resource.) For the average user, however, here is a small menu of options ranging from least to most anonymous.&lt;/p&gt;
&lt;h3 id=&#34;use-a-proxy-in-your-web-browser&#34;&gt;Use a proxy in your web browser&lt;/h3&gt;
&lt;p&gt;Certain web browsers, including Firefox and Safari on Mac, allow us to configure them to send our Internet traffic through a proxy server. The proxy server attempts to &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymizer&#34;&gt;anonymize&lt;/a&gt; our requests by replacing our originating IP address with the proxy server&amp;rsquo;s own IP. This provides us with some anonymity, as the website we&amp;rsquo;re trying to reach will not see our originating IP address; however, the proxy server that we choose to use will know exactly who originated the request. This method also doesn&amp;rsquo;t necessarily encrypt traffic, block cookies, or stop social media and cross-site trackers from following us around; on the upside, it&amp;rsquo;s the method least likely to prevent websites that use cookies from functioning properly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;browser-proxy.png&#34; alt=&#34;A cartoon of a proxy server guarding a browser&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Public proxy servers are out there, and deciding whether or not we should use any one of them is on par with deciding whether we should eat a piece of candy handed to us by a smiling stranger. If your academic institution or company provides a proxy server address, it is (hopefully) a private server with some security in place. My preferred method, if we have a little time and a few monthly dollars to invest in our security, is to set up our own virtual instance with a company such as &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon Web Services&lt;/a&gt; or &lt;a href=&#34;https://www.digitalocean.com/products/droplets/&#34;&gt;Digital Ocean&lt;/a&gt; and use this as our proxy server.&lt;/p&gt;
&lt;p&gt;To use a proxy through our browser, we can &lt;a href=&#34;https://support.mozilla.org/en-US/kb/connection-settings-firefox&#34;&gt;edit our Connection Settings in Firefox&lt;/a&gt;, or &lt;a href=&#34;https://support.apple.com/guide/safari/set-up-a-proxy-server-ibrw1053/mac&#34;&gt;set up a proxy server using Safari on Mac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In regards to choosing a browser, I would happily recommend &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; to any Internet user who wants to beef up the security of their browsing experience right out of the box. Mozilla has been a champion of privacy-first since I&amp;rsquo;ve heard of them, and recently made some well-received changes to &lt;a href=&#34;https://blog.mozilla.org/blog/2019/06/04/firefox-now-available-with-enhanced-tracking-protection-by-default/&#34;&gt;Enhanced Tracking Protection in Firefox Browser&lt;/a&gt; that blocks social media trackers, cross-site tracking cookies, fingerprinters, and cryptominers by default.&lt;/p&gt;
&lt;h3 id=&#34;use-a-vpn-on-your-device&#34;&gt;Use a VPN on your device&lt;/h3&gt;
&lt;p&gt;In order to take advantage of a proxy server for all our Internet usage instead of just through one browser, we can use a Virtual Private Network (VPN). A VPN is a service, usually paid, that sends our Internet traffic through their servers, thus acting as a proxy. A VPN can be used on our laptop as well as phone and tablet devices, and since it encompasses all our Internet traffic, it doesn&amp;rsquo;t require much extra effort to use other than ensuring our device is connected. Using a VPN is an effective way to keep nosy ISPs from snooping on our requests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;vpn.png&#34; alt=&#34;A cartoon depicting a private VPN&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To use a paid, third-party VPN service, we&amp;rsquo;d usually sign up on their website and download their app. It&amp;rsquo;s important to keep in mind that whichever provider we choose, we&amp;rsquo;re entrusting them with our data. VPN providers anonymize our activity from the Internet, but can themselves see all our requests. Providers vary in terms of their privacy policies and the data they choose to log, so a little research may be necessary to determine which, if any, we are comfortable trusting.&lt;/p&gt;
&lt;p&gt;We can also roll our own VPN service by using a virtual instance and &lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt;. OpenVPN is an open source VPN protocol, and can be used with a few virtual instance providers, such as &lt;a href=&#34;https://openvpn.net/amazon-cloud/&#34;&gt;Amazon VPC&lt;/a&gt;, &lt;a href=&#34;https://openvpn.net/microsoft-azure/&#34;&gt;Microsoft Azure&lt;/a&gt;, &lt;a href=&#34;https://openvpn.net/google-cloud-vpn/&#34;&gt;Google Cloud&lt;/a&gt;, and &lt;a href=&#34;https://openvpn.net/digital-ocean-vpn/&#34;&gt;Digital Ocean Droplets&lt;/a&gt;. I previously wrote a tutorial on &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/&#34;&gt;setting up your own personal VPN service with AWS&lt;/a&gt; using an EC2 instance. I&amp;rsquo;ve been running this solution personally for about a month, and it&amp;rsquo;s cost me almost $4 USD in total, which is a price I&amp;rsquo;m quite comfortable paying for some peace of mind.&lt;/p&gt;
&lt;h3 id=&#34;use-tor&#34;&gt;Use Tor&lt;/h3&gt;
&lt;p&gt;Tor takes the anonymity offered by a proxy server and compounds it by forwarding our requests through a &lt;a href=&#34;https://en.wikipedia.org/wiki/Relay_network&#34;&gt;relay network&lt;/a&gt; of other servers, each called a &amp;ldquo;node.&amp;rdquo; Our traffic passes through three nodes on its way to a destination: the &lt;em&gt;guard&lt;/em&gt;, &lt;em&gt;middle&lt;/em&gt;, and &lt;em&gt;exit&lt;/em&gt; nodes. At each step, the request is encrypted and anonymized such that the current node only knows where to send it, and nothing more about what the request contains. This separation of knowledge means that, of the options discussed, Tor provides the most complete version of anonymity. (For a more complete explanation, see &lt;a href=&#34;https://robertheaton.com/2019/04/06/how-does-tor-work/&#34;&gt;Robert Heaton&amp;rsquo;s article on how Tor works&lt;/a&gt;, which is so excellently done that I wish I&amp;rsquo;d written it myself.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tor.png&#34; alt=&#34;Tor onion holding a Free Hugs sign&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That said, this level of anonymity comes with its own cost. Not monetary, as &lt;a href=&#34;https://www.torproject.org/download/&#34;&gt;Tor Browser&lt;/a&gt; is free to download and use. It is, however, slower than using a VPN or simple proxy server through a browser, due to the circuitous route our requests take.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-are-for-servers-too&#34;&gt;Proxy servers are for servers too&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re now familiar with proxy servers in the context of protecting users as they surf the web, but proxies aren&amp;rsquo;t just for clients. Websites and Internet-connected applications can use &lt;a href=&#34;https://en.wikipedia.org/wiki/Reverse_proxy&#34;&gt;reverse proxy servers&lt;/a&gt; for obfuscation too. The &amp;ldquo;reverse&amp;rdquo; part just means that the proxy is acting on behalf of the server, instead of the client.&lt;/p&gt;
&lt;p&gt;Why would a web server care about anonymity? Generally, they don&amp;rsquo;t, at least not in the same way some users do. Web servers can benefit from using a proxy for a few different reasons; for example, they typically offer faster service to users by &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_cache&#34;&gt;caching&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_compression&#34;&gt;compressing&lt;/a&gt; content to optimize delivery. From a cybersecurity perspective, however, a reverse proxy can improve an application&amp;rsquo;s security posture by obfuscating the underlying infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;syllables.png&#34; alt=&#34;A cartoon making fun of the big words I used&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Basically, by placing another web server (the &amp;ldquo;proxy&amp;rdquo;) in front of the web server that directly accesses all the files and assets, we make it more difficult for an attacker to pinpoint our &amp;ldquo;real&amp;rdquo; web server and mess with our stuff. Like when you want to see the store manager and the clerk you&amp;rsquo;re talking to says, &amp;ldquo;I speak for the manager,&amp;rdquo; and you&amp;rsquo;re not really sure there even &lt;em&gt;is&lt;/em&gt; a manager, anyway, but you successfully exchange the hot pink My Little Pony they sold you for a &lt;em&gt;fuchsia&lt;/em&gt; one, thankyouverymuch, so now you&amp;rsquo;re no longer concerned with who the manager is and whether or not they really exist, and if you passed them on the street you would not be able to stop them and call them out for passing off hot pink as fuchsia, and the manager is just fine with that.&lt;/p&gt;
&lt;p&gt;Some common web servers can also act as reverse proxies, often with just a minimal and straightforward configuration change. While the best choice for your particular architecture is unknown to me, I will offer a couple common examples here.&lt;/p&gt;
&lt;h3 id=&#34;using-nginx-as-a-reverse-proxy&#34;&gt;Using NGINX as a reverse proxy&lt;/h3&gt;
&lt;p&gt;NGINX uses the &lt;code&gt;proxy_pass&lt;/code&gt; directive in its &lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/&#34;&gt;configuration file&lt;/a&gt; (&lt;code&gt;nginx.conf&lt;/code&gt; by default) to turn itself into a reverse proxy server. The set up requires the following lines to be placed in the configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location /requested/path/ {
proxy_pass http://www.example.com/target/path/;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that all requests for the path &lt;code&gt;/requested/path/&lt;/code&gt; are forwarded to &lt;code&gt;http://www.example.com/target/path/&lt;/code&gt;. The target can be a domain name or an IP address, the latter with or without a port.&lt;/p&gt;
&lt;p&gt;The full &lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/&#34;&gt;guide to using NGINX as a reverse proxy&lt;/a&gt; is part of the NGINX documentation.&lt;/p&gt;
&lt;h3 id=&#34;using-apache-httpd-as-a-reverse-proxy&#34;&gt;Using Apache httpd as a reverse proxy&lt;/h3&gt;
&lt;p&gt;Apache httpd similarly requires some straightforward configuration to act as a reverse proxy server. In the &lt;a href=&#34;https://httpd.apache.org/docs/current/configuring.html&#34;&gt;configuration file&lt;/a&gt;, usually &lt;code&gt;httpd.conf&lt;/code&gt;, set the following directives:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProxyPass &amp;quot;/requested/path/&amp;quot; &amp;quot;http://www.example.com/target/path/&amp;quot;
ProxyPassReverse &amp;quot;/requested/path/&amp;quot; &amp;quot;http://www.example.com/target/path/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ProxyPass&lt;/code&gt; directive ensures that all requests for the path &lt;code&gt;/requested/path/&lt;/code&gt; are forwarded to &lt;code&gt;http://www.example.com/target/path/&lt;/code&gt;. The &lt;code&gt;ProxyPassReverse&lt;/code&gt; directive ensures that the headers sent by the web server are modified to point to the reverse proxy server instead.&lt;/p&gt;
&lt;p&gt;The full &lt;a href=&#34;https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html&#34;&gt;reverse proxy guide for Apache HTTP server&lt;/a&gt; is available in their documentation.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-most-of-the-way-down&#34;&gt;Proxy servers &lt;em&gt;most of&lt;/em&gt; the way down&lt;/h2&gt;
&lt;p&gt;I concede that my title is a little facetious, as cybersecurity best practices aren&amp;rsquo;t really some eternal infinite-regression mystery (though they may sometimes seem to be). Regardless, I hope this post has helped in your understanding of what proxy servers are, how they contribute to online anonymity for both clients and servers, and that they are an integral building block of cybersecurity practices.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more about personal best practices for online security, I highly recommend exploring the articles and resources provided by &lt;a href=&#34;https://www.eff.org/&#34;&gt;EFF&lt;/a&gt;. For a guide to securing web sites and applications, the &lt;a href=&#34;https://github.com/OWASP/CheatSheetSeries&#34;&gt;OWASP Cheat Sheet Series&lt;/a&gt; is a fantastic resource.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/cover_hua9810ca0d5d352b6afac9eae7c2c33fc_779068_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hackers are Googling your plain text passwords: preventing sensitive data exposure</title><link>https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</link><pubDate>Mon, 09 Sep 2019 09:10:11 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</guid><description>Why sensitive data controls need to be established long before you think you need them, as demonstrated by Google dorking.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" width="640" height="454"/>
&lt;p&gt;Last week, I wrote about &lt;a href=&#34;https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/&#34;&gt;the importance of properly handling user input&lt;/a&gt; in our websites and applications. I alluded to an overarching security lesson that I hope to make explicit today: the security of our software, application, and customer data is built from the ground up, long before the product goes live.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&#34;&gt;OWASP Top 10&lt;/a&gt; is a comprehensive guide to web application security risks. It is relied upon by technology professionals, corporations, and those interested in cybersecurity or information security. The most recent publication lists Sensitive Data Exposure as the third most critical web application security risk. Here&amp;rsquo;s how the risk is described:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;Sensitive Data Exposure&amp;rdquo; is a sort of catch-all category for leaked data resulting from many sources, ranging from weak cryptographic algorithms to unenforced encryption. The simplest source of this security risk, however, takes far fewer syllables to describe: people.&lt;/p&gt;
&lt;p&gt;The phrase &amp;ldquo;an ounce of prevention is worth a pound of cure,&amp;rdquo; applies to medicine as well as secure software development. In the world of the latter, this is referred to as &amp;ldquo;pushing left,&amp;rdquo; a rather unintuitive term for establishing security best practices earlier, rather than later, in the software development life cycle (SDLC). Establishing procedures &amp;ldquo;to the left&amp;rdquo; of the SDLC can help ensure that the people involved in creating a software product are properly taking care of sensitive data from day one.&lt;/p&gt;
&lt;p&gt;Unfortunately, a good amount of security testing often seems to occur much farther to the right side of the SDLC; too late for some security issues, such as sensitive data leakage, to be prevented.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m one of the authors contributing to the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt; and recently expanded a section on search engine discovery reconnaissance, or what the kids these days call &amp;ldquo;Google dorking.&amp;rdquo; This is one method, and arguably the most accessible method, by which a security tester (or black hat hacker) could find exposed sensitive data on the Internet. Here&amp;rsquo;s an excerpt from that section (currently a work in progress on GitHub, to be released in v5):&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;search-operators&#34;&gt;Search Operators&lt;/h3&gt;
&lt;p&gt;A search operator is a special keyword that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of &lt;code&gt;operator:query&lt;/code&gt;. Here are some commonly supported search operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:&lt;/code&gt; will limit the search to the provided URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inurl:&lt;/code&gt; will only return results that include the keyword in the URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intitle:&lt;/code&gt; will only return results that have the keyword in the page title.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intext:&lt;/code&gt; or &lt;code&gt;inbody:&lt;/code&gt; will only search for the keyword in the body of pages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filetype:&lt;/code&gt; will match only a specific filetype, i.e. png, or php.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;site:owasp.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;google-hacking-or-dorking&#34;&gt;Google Hacking, or Dorking&lt;/h3&gt;
&lt;p&gt;Searching with operators can be a very effective discovery reconnaissance technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_hacking&#34;&gt;Google hacking&lt;/a&gt; or Google dorking, is also possible using other search engines, as long as the search operators are supported.&lt;/p&gt;
&lt;p&gt;A database of dorks, such as &lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;Google Hacking Database&lt;/a&gt;, is a useful resource that can help uncover specific information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regularly reviewing search engine results can be a fruitful task for security testers. However, when a search for &lt;code&gt;site:myapp.com passwords&lt;/code&gt; turns up no results, it may still be a little too early to break for lunch. Here are a couple other places a security tester might like to look for sensitive data exposed in the wild.&lt;/p&gt;
&lt;h2 id=&#34;pastebin&#34;&gt;Pastebin&lt;/h2&gt;
&lt;p&gt;The self-declared &amp;ldquo;#1 paste tool since 2002,&amp;rdquo; &lt;a href=&#34;https://pastebin.com&#34;&gt;Pastebin&lt;/a&gt; allows users to temporarily store any kind of text. It&amp;rsquo;s mostly used for sharing information with others, or retrieving your own &amp;ldquo;paste&amp;rdquo; on another machine, perhaps in another location. Pastebin makes it easy to share large amounts of complicated text, like error logs, source code, configuration files, tokens, api keys&amp;hellip; what&amp;rsquo;s that? Oh, yes, it&amp;rsquo;s public by default.&lt;/p&gt;
&lt;p&gt;Here are some screenshots of a little dorking I did for a public bug bounty program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_apikey.png#screenshot&#34; alt=&#34;A screenshot of exposed api key in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;API keys in plain view.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_pass.png#screenshot&#34; alt=&#34;A screenshot of exposed username and password in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Log-in details out in the open.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Thanks in part to the convenience of using Pastebin and similar websites, it would appear that some people fail to think twice before making sensitive data publicly available.&lt;/p&gt;
&lt;h3 id=&#34;but-why&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Granted, non-technical employees with access to the application may not have an understanding of which items should or should not be freely shared. Someone unfamiliar with what encrypted data is or what it looks like may not realize the difference between an encrypted string and an unencrypted token made up of many random letters and numbers. Even technical staff can miss things, make mistakes, or act carelessly after a hard day at work. It may be easy to call this a training problem and move on; however, none of these rationalizations address the root cause of the issue.&lt;/p&gt;
&lt;p&gt;When people turn to outside solutions for an issue they face, it&amp;rsquo;s usually because they haven&amp;rsquo;t been provided with an equally-appealing internal solution, or are unaware that one exists. Employees using pastes to share or move sensitive data do so because they don&amp;rsquo;t have an easier, more convenient, and secure internal solution to use instead.&lt;/p&gt;
&lt;h3 id=&#34;mitigation&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Everyone involved in the creation and maintenance of a web application should be briefed on a few basic things in regards to sensitive data protection:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what constitutes sensitive data,&lt;/li&gt;
&lt;li&gt;the difference between plain text and encrypted data, and&lt;/li&gt;
&lt;li&gt;how to properly transmit and store sensitive data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When it comes to third-party services, ensure people are aware that some transmission may not be encrypted, or may be publicly searchable. If there is no system currently in place for safely sharing and storing sensitive data internally, this is a good place to start. The security of application data is in the hands of everyone on the team, from administrative staff to C-level executives. Ensure people have the tools they need to work securely.&lt;/p&gt;
&lt;h2 id=&#34;public-repositories&#34;&gt;Public repositories&lt;/h2&gt;
&lt;p&gt;Developers are notorious for leaving sensitive information hanging out where it doesn&amp;rsquo;t belong (yes, I&amp;rsquo;ve done it too!). Without a strong push-left approach in place for handling tokens, secrets, and keys, these little gems can end up in full public view on sites like GitHub, GitLab, and Bitbucket (to name a few). &lt;a href=&#34;https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf&#34;&gt;A 2019 study&lt;/a&gt; found that thousands of new, unique secrets are leaked every day on GitHub alone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github_tok.png#screenshot&#34; alt=&#34;A screenshot of a Google search for tokens on GitHub&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub has implemented measures like &lt;a href=&#34;https://github.blog/2018-10-17-behind-the-scenes-of-github-token-scanning/&#34;&gt;token scanning&lt;/a&gt;, and GitLab 11.9 &lt;a href=&#34;https://about.gitlab.com/2019/03/22/gitlab-11-9-released/&#34;&gt;introduced secret detection&lt;/a&gt;. While these tools aim to reduce the chances that a secret might accidentally be committed, to put it bluntly, it&amp;rsquo;s really not their job. Secret scanning won&amp;rsquo;t stop developers from committing the data in the first place.&lt;/p&gt;
&lt;h3 id=&#34;but-why-1&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Without an obvious process in place for managing secrets, developers may tend too much towards their innate sense of just-get-it-done-ness. Sometimes this leads to the expedient but irresponsible practice of storing keys as unencrypted variables within the program, perhaps with the intention of it being temporary. Nonetheless, these variables inevitably fall from front of mind and end up in a commit.&lt;/p&gt;
&lt;h3 id=&#34;mitigation-1&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Having a strong push-left culture means ensuring that sensitive data is properly stored and can be securely retrieved long before anyone is ready to make a commit. Tools and strategies for doing so are readily available for those who seek them. Here are some examples of tools that can support a push-left approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a management tool to store and control access to keys and secrets, such as &lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;Amazon Key Management Service&lt;/a&gt; or Microsoft&amp;rsquo;s &lt;a href=&#34;https://azure.microsoft.com/en-us/services/key-vault/&#34;&gt;Azure Key Vault&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make use of encrypted environment variables in CI tools, such as &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#environment-variables&#34;&gt;Netlify&amp;rsquo;s environment variables&lt;/a&gt; or &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables&#34;&gt;virtual environments in GitHub Actions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Craft a robust &lt;code&gt;.gitignore&lt;/code&gt; file that everyone on the team can contribute to and use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also need not rely entirely on the public repository to catch those mistakes that may still slip through. It&amp;rsquo;s possible to set up Git pre-commit hooks that scan for committed secrets using &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;. There are some open-source programs available for this, such as &lt;a href=&#34;https://github.com/thoughtworks/talisman&#34;&gt;Talisman from ThoughtWorks&lt;/a&gt; and &lt;a href=&#34;https://github.com/awslabs/git-secrets&#34;&gt;git-secrets from AWS Labs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;pushing-left-to-prevent-sensitive-data-exposure&#34;&gt;Pushing left to prevent sensitive data exposure&lt;/h2&gt;
&lt;p&gt;A little perspective can go a long way in demonstrating why it&amp;rsquo;s important to begin managing sensitive data even before any sensitive data exists. By establishing security best practices on the left of the SDLC, we give our people the best chance to increase the odds that any future dorking on our software product looks more like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;no_results.png#screenshot&#34; alt=&#34;No results found in Google Search&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another great resource for checking up on the security of our data is Troy Hunt&amp;rsquo;s &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;Have I Been Pwned&lt;/a&gt;, a service that compares your data (such as your email) to data that has been leaked in previous data breaches.&lt;/p&gt;
&lt;p&gt;To learn about more ways we can be proactive with our application security, the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Proactive_Controls&#34;&gt;OWASP Proactive Controls&lt;/a&gt; publication is a great resource. There&amp;rsquo;s also more about creating a push-left approach to security in the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt;. If these topics interest you, I encourage you to read, learn, and contribute so more people will make it harder for sensitive data to be found.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>SQL injection and XSS: what white hat hackers know about trusting user input</title><link>https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</link><pubDate>Mon, 02 Sep 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</guid><description>A primer on SQL injection and cross site scripting, and how to handle user input in software development.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" width="640" height="374"/>
&lt;p&gt;Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: &lt;em&gt;What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?&lt;/em&gt; Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &amp;ldquo;Urgent&amp;rdquo; column: how will our product be secured?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&amp;rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is &lt;em&gt;you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &amp;ldquo;white hat&amp;rdquo; hacker, and sometimes just &amp;ldquo;hacker,&amp;rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &amp;ldquo;black hat&amp;rdquo; hacker, also called a &amp;ldquo;cracker,&amp;rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&amp;rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.&lt;/p&gt;
&lt;p&gt;When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&amp;rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Main_Page&#34;&gt;Open Web Application Security Project&lt;/a&gt; guides&lt;/li&gt;
&lt;li&gt;The Hacker101 playlist from &lt;a href=&#34;https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/&#34;&gt;HackerOne&amp;rsquo;s YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/web-hacking-101&#34;&gt;Web Hacking 101&lt;/a&gt; by Peter Yaworski&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brutelogic.com.br/blog/&#34;&gt;Brute Logic&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&#34;&gt;Computerphile&lt;/a&gt; YouTube channel&lt;/li&gt;
&lt;li&gt;Videos featuring Jason Haddix (&lt;a href=&#34;https://github.com/jhaddix/&#34;&gt;@jhaddix&lt;/a&gt;) and Tom Hudson (&lt;a href=&#34;https://github.com/tomnomnom/&#34;&gt;@tomnomnom&lt;/a&gt;) (two accomplished ethical hackers with different, but both effective, methodologies)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be familiar with the catchphrase, &amp;ldquo;sanitize your inputs!&amp;rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&amp;rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&amp;rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-attacks&#34;&gt;SQL injection attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great &lt;a href=&#34;https://www.youtube.com/watch?v=_jKylhJtPmI&#34;&gt;explain-like-I&amp;rsquo;m-five video on SQLi&lt;/a&gt;. You may already know of this attack from &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;xkcd&amp;rsquo;s Little Bobby Tables&lt;/a&gt;. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sqli.png#center&#34; alt=&#34;A monitor with an SQL Select command that gets all your base&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;You have no chance to survive make your time.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;You can test your own site to see if you&amp;rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&amp;rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39; OR 1=&#39;1&lt;/code&gt; evaluates to a constant true, and when successful, returns all rows in the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; AND 0=&#39;1&lt;/code&gt; evaluates to a constant false, and when successful, returns no rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ciNHn38EyRc&#34;&gt;This video demonstrates the above tests&lt;/a&gt;, and does a great job of showing how impactful an SQL injection attack can be.&lt;/p&gt;
&lt;p&gt;Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&amp;rsquo;t trust user input.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-mitigation&#34;&gt;SQL injection mitigation&lt;/h2&gt;
&lt;p&gt;In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.&lt;/p&gt;
&lt;p&gt;Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;Object-Relational Mapping&lt;/a&gt;, or ORM, with its use of &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/queries/&#34;&gt;QuerySets&lt;/a&gt;. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.&lt;/p&gt;
&lt;p&gt;Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepared statements with variable binding (or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&#34;&gt;parameterized queries&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures&#34;&gt;Stored procedures&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation&#34;&gt;Whitelisting&lt;/a&gt; or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input&#34;&gt;escaping&lt;/a&gt; user input.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.&lt;/p&gt;
&lt;p&gt;The battle, however, is only half won&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;cross-site-scripting-xss-attacks&#34;&gt;Cross Site Scripting (XSS) attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&amp;rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;Cross Site Scripting&lt;/a&gt; attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&amp;rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing. &lt;a href=&#34;https://blogs.apache.org/infra/entry/apache_org_04_09_2010&#34;&gt;This incident report from Apache in 2010&lt;/a&gt; is a good example of how XSS can be chained in a larger attack to take over accounts and machines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;xss.png&#34; alt=&#34;An HTML dance party with a little JS cutting in&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;The annual DOM dance-off receives an unexpected guest);&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34;&gt;Document Object Model&lt;/a&gt;) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.&lt;/p&gt;
&lt;h3 id=&#34;dom-based-xss&#34;&gt;DOM based XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/DOM_Based_XSS&#34;&gt;DOM based XSS&lt;/a&gt; occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in &lt;a href=&#34;https://www.owasp.org/index.php/Phishing&#34;&gt;phishing emails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called &lt;code&gt;xss-test.html&lt;/code&gt; (or whatever you like) with the following HTML and JavaScript code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My XSS Example&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello there!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;greeting&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This web page will display the title &amp;ldquo;Hello there!&amp;rdquo; unless it receives a &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_string&#34;&gt;URL parameter from a query string&lt;/a&gt; with a value for &lt;code&gt;name&lt;/code&gt;. To see the script work, open the page in a browser with an appended URL parameter, like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file:///path/to/file/xss-test.html?name=Victoria&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for &lt;code&gt;name&lt;/code&gt; and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the &lt;code&gt;name&lt;/code&gt; parameter to, say, &lt;code&gt;&amp;lt;img+src+onerror=alert(&amp;quot;pwned&amp;quot;)&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pwned.png#screenshot&#34; alt=&#34;A screenshot of the XSS page example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is just one example, largely based on one from &lt;a href=&#34;https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/&#34;&gt;Brute&amp;rsquo;s post&lt;/a&gt;, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.&lt;/p&gt;
&lt;h3 id=&#34;stored-and-reflected-xss&#34;&gt;Stored and reflected XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)&#34;&gt;Stored XSS&lt;/a&gt; occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &amp;ldquo;About Me&amp;rdquo; section. The script, improperly stored on the site&amp;rsquo;s server, would successfully execute at a later time when another user views the attacker&amp;rsquo;s profile.&lt;/p&gt;
&lt;p&gt;One of the most famous examples of this is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Samy_(computer_worm)&#34;&gt;Samy worm&lt;/a&gt; that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&amp;rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)&#34;&gt;Reflected XSS&lt;/a&gt; similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&amp;rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.&lt;/p&gt;
&lt;h2 id=&#34;xss-attack-mitigation&#34;&gt;XSS attack mitigation&lt;/h2&gt;
&lt;p&gt;In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.&lt;/p&gt;
&lt;h3 id=&#34;validating-form-fields&#34;&gt;Validating form fields&lt;/h3&gt;
&lt;p&gt;Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes&#34;&gt;Django&amp;rsquo;s built-in &lt;code&gt;Field&lt;/code&gt; classes&lt;/a&gt;, which provide fields that validate to some commonly used types and also specify sane defaults. Django&amp;rsquo;s &lt;code&gt;EmailField&lt;/code&gt;, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&amp;rsquo;t imitate the common format of an email address, then Django won&amp;rsquo;t consider the field valid and the form will not be submitted.&lt;/p&gt;
&lt;p&gt;If relying on a framework isn&amp;rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_conversion&#34;&gt;type conversion&lt;/a&gt;, for example, ensuring that a number is of type &lt;code&gt;int()&lt;/code&gt;; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully, we needn&amp;rsquo;t start from scratch. Open source resources are available to help, such as the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&#34;&gt;OWASP Validation Regex Repository&lt;/a&gt;, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find &lt;a href=&#34;https://github.com/search?q=validation+library&#34;&gt;plenty of these on GitHub&lt;/a&gt;. Additionally, the &lt;a href=&#34;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&#34;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt; has a couple suggestions for test payloads we can use to test our existing applications.&lt;/p&gt;
&lt;p&gt;While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.&lt;/p&gt;
&lt;h3 id=&#34;avoiding-direct-injection&#34;&gt;Avoiding direct injection&lt;/h3&gt;
&lt;p&gt;Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does data flow through our application?&lt;/li&gt;
&lt;li&gt;What does a user expect to happen when they interact with this input?&lt;/li&gt;
&lt;li&gt;Where on our page does data appear? Does it become embedded in a string or an attribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of &lt;a href=&#34;https://www.hacker101.com/&#34;&gt;Hacker101&lt;/a&gt;. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;test&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;+alert(1)+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;onmouserover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&amp;quot;onmouseover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using &lt;code&gt;innerText&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.&lt;/p&gt;
&lt;h2 id=&#34;pay-attention-to-your-inputs&#34;&gt;Pay attention to your inputs&lt;/h2&gt;
&lt;p&gt;Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&amp;rsquo;s like installing deadbolts on all the doors, but leaving a window open!&lt;/p&gt;
&lt;p&gt;By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&amp;rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&amp;rsquo;s flow, follow the data, and pay attention to our inputs.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</link><pubDate>Tue, 06 Aug 2019 10:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</guid><description>Using xargs and awk in Bash to automate managing remote-hosted repositories.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" width="640" height="343"/>
&lt;p&gt;Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into automatically re-creating my laptop with Bash scripts (post to come!), I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well. Here they are.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-clone-all-your-github-repositories&#34;&gt;A Bash one-liner to clone all your GitHub repositories&lt;/h1&gt;
&lt;p&gt;Caveat: you&amp;rsquo;ll need a list of the GitHub repositories you want to clone. The good thing about that is it gives you full agency to choose just the repositories you want on your machine, instead of going in whole-hog.&lt;/p&gt;
&lt;p&gt;You can easily clone GitHub repositories without entering your password each time by using HTTPS with your &lt;a href=&#34;https://help.github.com/en/articles/caching-your-github-password-in-git&#34;&gt;15-minute cached credentials&lt;/a&gt; or, my preferred method, by &lt;a href=&#34;https://help.github.com/en/articles/connecting-to-github-with-ssh&#34;&gt;connecting to GitHub with SSH&lt;/a&gt;. For brevity I&amp;rsquo;ll assume we&amp;rsquo;re going with the latter, and our SSH keys are set up.&lt;/p&gt;
&lt;p&gt;Given a list of GitHub URLs in the file &lt;code&gt;gh-repos.txt&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@github.com:username/first-repository.git
git@github.com:username/second-repository.git
git@github.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xargs -n1 git clone &amp;lt; gh-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clones all the repositories on the list into the current folder. This same one-liner works for GitLab repositories as well, if you substitute the appropriate URLs.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;There are two halves to this one-liner: the input, counterintuitively on the right side, and the part that makes stuff happen, on the left. We could make the order of these parts more intuitive (maybe?) by writing the same command like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;lt;gh-repos.txt xargs -n1 git clone &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a command for each line of our input, &lt;code&gt;gh-repos.txt&lt;/code&gt;, we use &lt;code&gt;xargs -n1&lt;/code&gt;. The tool &lt;code&gt;xargs&lt;/code&gt; reads items from input and executes any commands it finds (it will &lt;code&gt;echo&lt;/code&gt; if it doesn&amp;rsquo;t find any). By default, it assumes that items are separated by spaces; new lines also works and makes our list easier to read. The flag &lt;code&gt;-n1&lt;/code&gt; tells &lt;code&gt;xargs&lt;/code&gt; to use &lt;code&gt;1&lt;/code&gt; argument, or in our case, one line, per command. We build our command with &lt;code&gt;git clone&lt;/code&gt;, which &lt;code&gt;xargs&lt;/code&gt; then executes for each line. Ta-da.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;A Bash one-liner to create and push many repositories on GitLab&lt;/h1&gt;
&lt;p&gt;GitLab, unlike GitHub, lets us do this nifty thing where we don&amp;rsquo;t have to use the website to make a new repository first. We can &lt;a href=&#34;https://gitlab.com/help/gitlab-basics/create-project#push-to-create-a-new-project&#34;&gt;create a new GitLab repository from our terminal&lt;/a&gt;. The newly created repository defaults to being set as Private, so if we want to make it Public on GitLab, we&amp;rsquo;ll have to do that manually later.&lt;/p&gt;
&lt;p&gt;The GitLab docs tell us to push to create a new project using &lt;code&gt;git push --set-upstream&lt;/code&gt;, but I don&amp;rsquo;t find this to be very convenient for using GitLab as a backup. As I work with my repositories in the future, I&amp;rsquo;d like to run one command that pushes to both GitHub &lt;em&gt;and&lt;/em&gt; GitLab without additional effort on my part.&lt;/p&gt;
&lt;p&gt;To make this Bash one-liner work, we&amp;rsquo;ll also need a list of repository URLs for GitLab (ones that don&amp;rsquo;t exist yet). We can easily do this by copying our GitHub repository list, opening it up with Vim, and doing a &lt;a href=&#34;https://vim.fandom.com/wiki/Search_and_replace&#34;&gt;search-and-replace&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp gh-repos.txt gl-repos.txt
vim gl-repos.txt
:%s/&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;github&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;/gitlab/g
:wq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;gl-repos.txt&lt;/code&gt;, which looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@gitlab.com:username/first-repository.git
git@gitlab.com:username/second-repository.git
git@gitlab.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create these repositories on GitLab, add the URLs as remotes, and push our code to the new repositories by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hang tight and I&amp;rsquo;ll explain it; for now, take note that &lt;code&gt;~/FULL/PATH/&lt;/code&gt; should be the full path to the directory containing our GitHub repositories.&lt;/p&gt;
&lt;p&gt;We do have to make note of a couple assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the directory on your local machine that contains the repository is the same as the name of the repository in the URL (this will be the case if it was cloned with the one-liner above);&lt;/li&gt;
&lt;li&gt;Each repository is currently checked out to the branch you want pushed, ie. &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one-liner could be expanded to handle these assumptions, but it is the humble opinion of the author that at that point, we really ought to be writing a Bash script.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here-1&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;Our Bash one-liner uses each line (or URL) in the &lt;code&gt;gl-repos.txt&lt;/code&gt; file as input. With &lt;code&gt;awk&lt;/code&gt;, it splits off the name of the directory containing the repository on our local machine, and uses these pieces of information to build our larger command. If we were to &lt;code&gt;print&lt;/code&gt; the output of &lt;code&gt;awk&lt;/code&gt;, we&amp;rsquo;d see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/first-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/second-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/second-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/third-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/third-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at how we build this command.&lt;/p&gt;
&lt;h3 id=&#34;splitting-strings-with-awk&#34;&gt;Splitting strings with &lt;code&gt;awk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The tool &lt;code&gt;awk&lt;/code&gt; can split input based on &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Command-Line-Field-Separator.html&#34;&gt;field separators&lt;/a&gt;. The default separator is a whitespace character, but we can change this by passing the &lt;code&gt;-F&lt;/code&gt; flag. Besides single characters, we can also use a &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Regexp-Field-Splitting.html#Regexp-Field-Splitting&#34;&gt;regular expression field separator&lt;/a&gt;. Since our repository URLs have a set format, we can grab the repository names by asking for the substring between the slash character &lt;code&gt;/&lt;/code&gt; and the end of the URL, &lt;code&gt;.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to accomplish this is with our regex &lt;code&gt;\/|(\.git)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\/&lt;/code&gt; is an escaped &lt;code&gt;/&lt;/code&gt; character;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; means &amp;ldquo;or&amp;rdquo;, telling awk to match either expression;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(\.git)&lt;/code&gt; is the capture group at the end of our URL that matches &amp;ldquo;.git&amp;rdquo;, with an escaped &lt;code&gt;.&lt;/code&gt; character. This is a bit of a cheat, as &amp;ldquo;.git&amp;rdquo; isn&amp;rsquo;t strictly splitting anything (there&amp;rsquo;s nothing on the other side) but it&amp;rsquo;s an easy way for us to take this bit off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we&amp;rsquo;ve told &lt;code&gt;awk&lt;/code&gt; where to split, we can grab the right substring with the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Fields.html#index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator&#34;&gt;field operator&lt;/a&gt;. We refer to our fields with a &lt;code&gt;$&lt;/code&gt; character, then by the field&amp;rsquo;s column number. In our example, we want the second field, &lt;code&gt;$2&lt;/code&gt;. Here&amp;rsquo;s what all the substrings look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: git@gitlab.com:username
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: first-repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the whole string, or in our case, the whole URL, we use the field operator &lt;code&gt;$0&lt;/code&gt;. To write the command, we just substitute the field operators for the repository name and URL. Running this with &lt;code&gt;print&lt;/code&gt; as we&amp;rsquo;re building it can help to make sure we&amp;rsquo;ve got all the spaces right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print &amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;running-the-command&#34;&gt;Running the command&lt;/h3&gt;
&lt;p&gt;We build our command inside the parenthesis of &lt;code&gt;system()&lt;/code&gt;. By using this as the output of &lt;code&gt;awk&lt;/code&gt;, each command will run as soon as it is built and output. The &lt;code&gt;system()&lt;/code&gt; function creates a &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child process&lt;/a&gt; that executes our command, then returns once the command is completed. In plain English, this lets us perform the Git commands on each repository, one-by-one, without breaking from our main process in which &lt;code&gt;awk&lt;/code&gt; is doing things with our input file. Here&amp;rsquo;s our final command again, all put together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-our-backups&#34;&gt;Using our backups&lt;/h3&gt;
&lt;p&gt;By adding the GitLab URLs as remotes, we&amp;rsquo;ve simplified the process of pushing to both externally hosted repositories. If we run &lt;code&gt;git remote -v&lt;/code&gt; in one of our repository directories, we&amp;rsquo;ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, simply running &lt;code&gt;git push&lt;/code&gt; without arguments will push the current branch to both remote repositories.&lt;/p&gt;
&lt;p&gt;We should also note that &lt;code&gt;git pull&lt;/code&gt; will generally only try to pull from the remote repository you originally cloned from (the URL marked &lt;code&gt;(fetch)&lt;/code&gt; in our example above). Pulling from multiple Git repositories at the same time is possible, but complicated, and beyond the scope of this post. Here&amp;rsquo;s an &lt;a href=&#34;https://astrofloyd.wordpress.com/2015/05/05/git-pushing-to-and-pulling-from-multiple-remote-locations-remote-url-and-pushurl/&#34;&gt;explanation of pushing and pulling to multiple remotes&lt;/a&gt; to help get you started, if you&amp;rsquo;re curious. The &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34;&gt;Git documentation on remotes&lt;/a&gt; may also be helpful.&lt;/p&gt;
&lt;h1 id=&#34;to-elaborate-on-the-succinctness-of-bash-one-liners&#34;&gt;To elaborate on the succinctness of Bash one-liners&lt;/h1&gt;
&lt;p&gt;Bash one-liners, when understood, can be fun and handy shortcuts. At the very least, being aware of tools like &lt;code&gt;xargs&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; can help to automate and alleviate a lot of tediousness in our work. However, there are some downsides.&lt;/p&gt;
&lt;p&gt;In terms of an easy-to-understand, maintainable, and approachable tool, Bash one-liners suck. They&amp;rsquo;re usually more complicated to write than a Bash script using &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops, and certainly more complicated to read. It&amp;rsquo;s likely that when we write them, we&amp;rsquo;ll miss a single quote or closing parenthesis somewhere; and as I hope this post demonstrates, they can take quite a bit of explaining, too. So why use them?&lt;/p&gt;
&lt;p&gt;Imagine reading a recipe for baking a cake, step by step. You understand the methods and ingredients, and gather your supplies. Then, as you think about it, you begin to realize that if you just throw all the ingredients at the oven in precisely the right order, a cake will instantly materialize. You try it, and it works!&lt;/p&gt;
&lt;p&gt;That would be pretty satisfying, wouldn&amp;rsquo;t it?&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Knapsack problem algorithms for my real-life carry-on knapsack</title><link>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</link><pubDate>Wed, 09 May 2018 21:00:35 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</guid><description>Using a greedy algorithm and dynamic programming to pack my full-time nomad travel bag.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/cover_knapsack-doodle_hu7070e09a25cc0b4f24775e27e4fe15a9_203336_640x0_resize_box_2.png" width="640" height="320"/>
&lt;h1 id=&#34;the-knapsack-problem&#34;&gt;The knapsack problem&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m a nomad and live out of one carry-on bag. This means that the total weight of all my worldly possessions must fall under airline cabin baggage weight limits - usually 10kg. On some smaller airlines, however, this weight limit drops to 7kg. Occasionally, I have to decide not to bring something with me to adjust to the smaller weight limit.&lt;/p&gt;
&lt;p&gt;As a practical exercise, deciding what to leave behind (or get rid of altogether) entails laying out all my things and choosing which ones to keep. That decision is based on the item&amp;rsquo;s usefulness to me (its worth) and its weight.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-stuff.jpeg&#34; alt=&#34;All my stuff.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;This is all my stuff, and my Minaal Carry-on bag.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Being a programmer, I&amp;rsquo;m aware that decisions like this could be made more efficiently by a computer. It&amp;rsquo;s done so frequently and so ubiquitously, in fact, that many will recognize this scenario as the classic &lt;em&gt;packing problem&lt;/em&gt; or &lt;em&gt;knapsack problem.&lt;/em&gt; How do I go about telling a computer to put as many important items in my bag as possible while coming in at or under a weight limit of 7kg? With algorithms! Yay!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll discuss two common approaches to solving the knapsack problem: one called a &lt;em&gt;greedy algorithm,&lt;/em&gt; and another called &lt;em&gt;dynamic programming&lt;/em&gt; (a little harder, but better, faster, stronger&amp;hellip;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to it.&lt;/p&gt;
&lt;h1 id=&#34;the-set-up&#34;&gt;The set up&lt;/h1&gt;
&lt;p&gt;I prepared my data in the form of a CSV file with three columns: the item&amp;rsquo;s name (a string), a representation of its worth (an integer), and its weight in grams (an integer). There are 40 items in total. I represented worth by ranking each item from 40 to 1, with 40 being the most important and 1 equating with something like &amp;ldquo;why do I even have this again?&amp;rdquo; (If you&amp;rsquo;ve never listed out all your possessions and ranked them by order of how useful they are to you, I highly recommend you try it. It can be a very revealing exercise.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of all items and bag:&lt;/strong&gt; 9003g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bag weight:&lt;/strong&gt; 1415g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Airline limit:&lt;/strong&gt; 7000g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maximum weight of items I can pack:&lt;/strong&gt; 5585g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total possible worth of items:&lt;/strong&gt; 820&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The challenge:&lt;/strong&gt; Pack as many items as the limit allows while maximizing the total worth.&lt;/p&gt;
&lt;h1 id=&#34;data-structures&#34;&gt;Data structures&lt;/h1&gt;
&lt;h2 id=&#34;reading-in-a-file&#34;&gt;Reading in a file&lt;/h2&gt;
&lt;p&gt;Before we can begin thinking about how to solve the knapsack problem, we have to solve the problem of reading in and storing our data. Thankfully, the Go standard library&amp;rsquo;s &lt;code&gt;io/ioutil&lt;/code&gt; package makes the first part straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ReadFile()&lt;/code&gt; function takes a file path and returns the file&amp;rsquo;s contents and an error (&lt;code&gt;nil&lt;/code&gt; if the call is successful) so we&amp;rsquo;ve also created a &lt;code&gt;check()&lt;/code&gt; function to handle any errors that might be returned. In a real-world application we probably would want to do something more sophisticated than &lt;code&gt;panic&lt;/code&gt;, but that&amp;rsquo;s not important right now.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-struct&#34;&gt;Creating a struct&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our data, we should probably do something with it. Since we&amp;rsquo;re working with real-life items and a real-life bag, let&amp;rsquo;s create some types to represent them and make it easier to conceptualize our program. A &lt;code&gt;struct&lt;/code&gt; in Go is a typed collection of fields. Here are our two types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is helpful to use field names that are very descriptive. You can see that the structs are set up just as we&amp;rsquo;ve described the things they represent. An &lt;code&gt;item&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt; (string), and a &lt;code&gt;worth&lt;/code&gt; and &lt;code&gt;weight&lt;/code&gt; (integers). A &lt;code&gt;bag&lt;/code&gt; has several fields of type &lt;code&gt;int&lt;/code&gt; representing its attributes, and also has the ability to hold &lt;code&gt;items&lt;/code&gt;, represented in the struct as a slice of &lt;code&gt;item&lt;/code&gt; type thingamabobbers.&lt;/p&gt;
&lt;h2 id=&#34;parsing-and-storing-our-data&#34;&gt;Parsing and storing our data&lt;/h2&gt;
&lt;p&gt;Several comprehensive Go packages exist that we could use to parse our CSV data&amp;hellip; but where&amp;rsquo;s the fun in that? Let&amp;rsquo;s go basic with some string splitting and a for loop. Here&amp;rsquo;s our updated &lt;code&gt;readItems()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;strings.Split&lt;/code&gt;, we split our &lt;code&gt;dat&lt;/code&gt; on newlines. We then create an empty &lt;code&gt;itemList&lt;/code&gt; to hold our items.&lt;/p&gt;
&lt;p&gt;In our for loop, we skip the first line of our CSV file (the headers) then iterate over each line. We use &lt;code&gt;strconv.Atoi&lt;/code&gt; (read &amp;ldquo;A to i&amp;rdquo;) to convert the values for each item&amp;rsquo;s worth and weight into integers. We then create a &lt;code&gt;newItem&lt;/code&gt; with these field values and append it to the &lt;code&gt;itemList&lt;/code&gt;. Finally, we return &lt;code&gt;itemList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what our set up looks like so far:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// skip the headers on the first line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our data structures set up, let&amp;rsquo;s get packing (🥁) on the first approach.&lt;/p&gt;
&lt;h1 id=&#34;greedy-algorithm&#34;&gt;Greedy algorithm&lt;/h1&gt;
&lt;p&gt;A greedy algorithm is the most straightforward approach to solving the knapsack problem, in that it is a one-pass algorithm that constructs a single final solution. At each stage of the problem, the greedy algorithm picks the option that is locally optimal, meaning it looks like the most suitable option right now. It does not revise its previous choices as it progresses through our data set.&lt;/p&gt;
&lt;h2 id=&#34;building-our-greedy-algorithm&#34;&gt;Building our greedy algorithm&lt;/h2&gt;
&lt;p&gt;The steps of the algorithm we&amp;rsquo;ll use to solve our knapsack problem are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sort items by worth, in descending order.&lt;/li&gt;
&lt;li&gt;Start with the highest worth item. Put items into the bag until the next item on the list cannot fit.&lt;/li&gt;
&lt;li&gt;Try to fill any remaining capacity with the next item on the list that can fit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you read my &lt;a href=&#34;https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/&#34;&gt;article about solving problems and making paella&lt;/a&gt;, you&amp;rsquo;ll know that I always start by figuring out what the next most important question is. In this case, there are three main operations we need to figure out how to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort items by worth.&lt;/li&gt;
&lt;li&gt;Put an item in the bag.&lt;/li&gt;
&lt;li&gt;Check to see if the bag is full.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is just a docs lookup away. Here&amp;rsquo;s how we sort a slice in Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;sort.Slice()&lt;/code&gt; function orders our items according to the less function we provide. In this case, it will order the highest worth items before the lowest worth items.&lt;/p&gt;
&lt;p&gt;Given that we don&amp;rsquo;t want to put an item in the bag if it doesn&amp;rsquo;t fit, we&amp;rsquo;ll complete the last two tasks in reverse. First, we&amp;rsquo;ll check to see if the item fits. If so, it goes in the bag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not fit item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code&gt;*&lt;/code&gt; in our first line there. That indicates that &lt;code&gt;bag&lt;/code&gt; is a pointer receiver (as opposed to a value receiver). It&amp;rsquo;s a concept that can be slightly confusing if you&amp;rsquo;re new to Go. Here are &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments#receiver-type&#34;&gt;some things to consider&lt;/a&gt; that might help you decide when to use a value receiver and when to use a pointer receiver. For the purposes of our &lt;code&gt;addItem()&lt;/code&gt; function, this case applies:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the method needs to mutate the receiver, the receiver must be a pointer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our use of a pointer receiver tells our function we want to operate on &lt;em&gt;this specific bag in particular&lt;/em&gt;, not a new bag. It&amp;rsquo;s important because without it, every item would always fit in a newly created bag! A little detail like this can make the difference between code that works and code that keeps you up until 4am chugging Red Bull and muttering to yourself. (Go to bed on time even if your code doesn&amp;rsquo;t work - you&amp;rsquo;ll thank me later.)&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our components, let&amp;rsquo;s put together our greedy algorithm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in our &lt;code&gt;main()&lt;/code&gt; function, we&amp;rsquo;ll create our bag, read in our data, and call our greedy algorithm. Here&amp;rsquo;s what it looks like, all set up and ready to go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;greedy-algorithm-results&#34;&gt;Greedy algorithm results&lt;/h2&gt;
&lt;p&gt;So how does this algorithm do when it comes to efficiently packing our bag to maximize its total worth? Here&amp;rsquo;s the result:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6987g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 716&lt;/p&gt;
&lt;p&gt;Here are the items our greedy algorithm chose, sorted by worth:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lenovo X1 Carbon (5th Gen)&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup PlusSlim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchylong-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It&amp;rsquo;s clear that the greedy algorithm is a straightforward way to quickly find a feasible solution. For small data sets, it will probably be close to the optimal solution. The algorithm packed a total item worth of 716 (104 points less than the maximum possible value), while filling the bag with just 13g left over.&lt;/p&gt;
&lt;p&gt;As we learned earlier, the greedy algorithm doesn&amp;rsquo;t improve upon the solution it returns. It simply adds the next highest worth item it can to the bag.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at another method for solving the knapsack problem that will give us the optimal solution - the highest possible total worth under the weight limit.&lt;/p&gt;
&lt;h1 id=&#34;dynamic-programming&#34;&gt;Dynamic programming&lt;/h1&gt;
&lt;p&gt;The name &amp;ldquo;dynamic programming&amp;rdquo; can be a bit misleading. It&amp;rsquo;s not a style of programming, as the name might cause you to infer, but simply another approach.&lt;/p&gt;
&lt;p&gt;Dynamic programming differs from the straightforward greedy algorithm in a few key ways. Firstly, a dynamic programming bag packing solution enumerates the entire solution space with all possibilities of item combinations that could be used to pack our bag. Where a greedy algorithm chooses the most optimal &lt;em&gt;local&lt;/em&gt; solution, dynamic programming algorithms are able to find the most optimal &lt;em&gt;global&lt;/em&gt; solution.&lt;/p&gt;
&lt;p&gt;Secondly, dynamic programming uses memoization to store the results of previously computed operations and returns the cached result when the operation occurs again. This allows it to &amp;ldquo;remember&amp;rdquo; previous combinations. This takes less time than it would to re-compute the answer again.&lt;/p&gt;
&lt;h2 id=&#34;building-our-dynamic-programming-algorithm&#34;&gt;Building our dynamic programming algorithm&lt;/h2&gt;
&lt;p&gt;To use dynamic programming to find the optimal recipe for packing our bag, we&amp;rsquo;ll need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a matrix representing all subsets of the items (the solution space) with rows representing items and columns representing the bag&amp;rsquo;s remaining weight capacity&lt;/li&gt;
&lt;li&gt;Loop through the matrix and calculate the worth that can be obtained by each combination of items at each stage of the bag&amp;rsquo;s capacity&lt;/li&gt;
&lt;li&gt;Examine the completed matrix to determine which items to add to the bag in order to produce the maximum possible worth for the bag in total&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will be most helpful to visualize our solution space. Here&amp;rsquo;s a representation of what we&amp;rsquo;re building with our code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-matrix.jpg&#34; alt=&#34;A sketch of the matrix with rows for items and columns for grams of weight.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;The empty knapsackian multiverse.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;In Go, we can create this matrix as a slice of slices.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// rows representing items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// columns representing grams of weight
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve padded the rows and columns by &lt;code&gt;1&lt;/code&gt; so that the indicies match the item and weight numbers.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve created our matrix, we&amp;rsquo;ll fill it by looping over the rows and the columns:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// loop through table rows
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table columns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// do stuff in each element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then for each element, we&amp;rsquo;ll calculate the worth value to ascribe to it. We do this with code that represents the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the item at the index matching the current row fits within the weight capacity represented by the current column, take the maximum of either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The total worth of the items already in the bag or,&lt;/li&gt;
&lt;li&gt;The total worth of all the items in the bag except the item at the previous row index, plus the new item&amp;rsquo;s worth&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, as our algorithm considers one of the items, we&amp;rsquo;re asking it to decide whether this item added to the bag would produce a higher total worth than the last item it added to the bag, at the bag&amp;rsquo;s current total weight. If this current item is a better choice, put it in - if not, leave it out.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code that accomplishes this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// if weight of item matching this index can fit at the current capacity column...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without this item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without the previous item, and this item instead
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// take maximum of either valueOne or valueTwo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if the new worth is not more, carry over the previous worth
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This process of comparing item combinations will continue until every item has been considered at every possible stage of the bag&amp;rsquo;s increasing total weight. When all the above have been considered, we&amp;rsquo;ll have enumerated the solution space - filled the matrix - with all possible total worth values.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll have a big chart of numbers, and in the last column at the last row we&amp;rsquo;ll have our highest possible value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-matrix-filled.jpg&#34; alt=&#34;A strictly representative representation of the filled matrix.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;A strictly representative representation of the filled matrix.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s great, but how do we find out which combination of items were put in the bag to achieve that worth?&lt;/p&gt;
&lt;h2 id=&#34;getting-our-optimized-item-list&#34;&gt;Getting our optimized item list&lt;/h2&gt;
&lt;p&gt;To see which items combine to create our optimal packing list, we&amp;rsquo;ll need to examine our matrix in reverse to the way we created it. Since we know the highest possible value is in the last row in the last column, we&amp;rsquo;ll start there. To find the items, we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the value of the current cell&lt;/li&gt;
&lt;li&gt;Compare the value of the current cell to the value in the cell directly above it&lt;/li&gt;
&lt;li&gt;If the values differ, there was a change to the bag items; find the next cell to examine by moving backwards through the columns according to the current item&amp;rsquo;s weight (find the value of the bag before this current item was added)&lt;/li&gt;
&lt;li&gt;If the values match, there was no change to the bag items; move up to the cell in the row above and repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The nature of the action we&amp;rsquo;re trying to achieve lends itself well to a recursive function. If you recall from &lt;a href=&#34;https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/&#34;&gt;my previous article about making apple pie&lt;/a&gt;, recursive functions are simply functions that call themselves under certain conditions. Here&amp;rsquo;s what it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code&gt;checkItem()&lt;/code&gt; function calls itself if the condition we described in step 4 is true. If step 3 is true, it also calls itself, but with different arguments.&lt;/p&gt;
&lt;p&gt;Recursive functions require a base case. In this example, we want the function to stop once we run out of values of worth to compare. Thus our base case is when either &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;w&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how the dynamic programming approach looks when it&amp;rsquo;s all put together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// number of items in knapsack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// capacity of knapsack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// create the empty matrix
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// rows representing items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// columns representing grams of weight
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table rows
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table columns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if weight of item matching this index can fit at the current capacity column...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without this item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without the previous item, and this item instead
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// take maximum of either valueOne or valueTwo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if the new worth is not more, carry over the previous worth
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add other statistics to the bag
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;dynamic-programming-results&#34;&gt;Dynamic programming results&lt;/h2&gt;
&lt;p&gt;We expect that the dynamic programming approach will give us a more optimized solution than the greedy algorithm. So did it? Here are the results:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6982g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 757&lt;/p&gt;
&lt;p&gt;Here are the items our dynamic programming algorithm chose, sorted by worth:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup Plus Slim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchy long-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Important papers&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deuter First Aid Kit Active&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stanley Classic Vacuum Camp Mug 16oz&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;454&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anker SoundCore nano Bluetooth Speaker&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ray Ban Wayfarer Classic&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peak Design Cuff Camera Wrist Strap&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Travelon Micro Scale&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humangear GoBites Duo&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There&amp;rsquo;s an obvious improvement to our dynamic programming solution over what the greedy algorithm gave us. Our total worth of 757 is 41 points greater than the greedy algorithm&amp;rsquo;s solution of 716, and for a few grams less weight too!&lt;/p&gt;
&lt;h2 id=&#34;input-sort-order&#34;&gt;Input sort order&lt;/h2&gt;
&lt;p&gt;While testing my dynamic programming solution, I implemented the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher-Yates shuffle algorithm&lt;/a&gt; on the input before passing it into my function, just to ensure that the answer wasn&amp;rsquo;t somehow dependent on the sort order of the input. Here&amp;rsquo;s what the shuffle looks like in Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UnixNano&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Intn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course I then realized that Go 1.10 now has a built-in shuffle&amp;hellip; it works precisely the same way and looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So did the order in which the items were processed affect the outcome? Well&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;suddenly-a-rogue-weight-appears&#34;&gt;Suddenly&amp;hellip; a rogue weight appears!&lt;/h3&gt;
&lt;p&gt;As it turns out, in a way, the answer did depend on the order of the input. When I ran my dynamic programming algorithm several times, I sometimes saw a different total weight for the bag, though the total worth remained at 757. I initially thought this was a bug before examining the two sets of items that accompanied the two different total weight values. Everything was the same except for a few changes that collectively added up to a different item subset accounting for 14 of the 757 worth points.&lt;/p&gt;
&lt;p&gt;In this case, there were two equally optimal solutions based only on the success metric of the highest total possible worth. Shuffling the input seemed to affect the placement of the items in the matrix and thus, the path that the &lt;code&gt;checkItem()&lt;/code&gt; function took as it went through the matrix to find the chosen items. Since the success metric of having the highest possible worth was the same in both item sets, we don&amp;rsquo;t have a single unique solution - there&amp;rsquo;s two!&lt;/p&gt;
&lt;p&gt;As an academic exercise, both these sets of items are correct answers. We may choose to optimize further by another metric, say, the total weight of all the items. The highest possible worth at the least possible weight could be seen as an ideal solution.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the second, lighter, dynamic programming result:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6955g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 757&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup Plus Slim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchy long-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Important papers&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deuter First Aid Kit Active&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anker SoundCore nano Bluetooth Speaker&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ray Ban Wayfarer Classic&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zip bag of toiletries&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peak Design Cuff Camera Wrist Strap&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Travelon Micro Scale&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlitzWolf Bluetooth Tripod/Monopod&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humangear GoBites Duo&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vapur Bottle 1L&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;which-approach-is-better&#34;&gt;Which approach is better?&lt;/h1&gt;
&lt;h2 id=&#34;go-benchmarking&#34;&gt;Go benchmarking&lt;/h2&gt;
&lt;p&gt;The Go standard library&amp;rsquo;s &lt;code&gt;testing&lt;/code&gt; package makes it straightforward for us to &lt;a href=&#34;https://golang.org/pkg/testing/#hdr-Benchmarks&#34;&gt;benchmark&lt;/a&gt; these two approaches. We can find out how long it takes each algorithm to run, and how much memory each uses. Here&amp;rsquo;s a simple &lt;code&gt;main_test.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Benchmark_greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Benchmark_dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can run &lt;code&gt;go test -bench=. -benchmem&lt;/code&gt; to see these results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Benchmark_greedy-4 &lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1619&lt;/span&gt; ns/op &lt;span class=&#34;m&#34;&gt;2128&lt;/span&gt; B/op &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; allocs/op
Benchmark_dynamic-4 &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1545322&lt;/span&gt; ns/op &lt;span class=&#34;m&#34;&gt;2020332&lt;/span&gt; B/op &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt; allocs/op&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;greedy-algorithm-performance&#34;&gt;Greedy algorithm performance&lt;/h3&gt;
&lt;p&gt;After running the greedy algorithm 1,000,000 times, the speed of the algorithm was reliably measured to be 0.001619 milliseconds (translation: very fast). It required 2128 Bytes or 2-ish kilobytes of memory and 9 distinct memory allocations per iteration.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-programming-performance&#34;&gt;Dynamic programming performance&lt;/h3&gt;
&lt;p&gt;The dynamic programming algorithm was run 1,000 times. Its speed was measured to be 1.545322 milliseconds or 0.001545322 seconds (translation: still pretty fast). It required 2,020,332 Bytes or 2-ish Megabytes, and 49 distinct memory allocations per iteration.&lt;/p&gt;
&lt;h2 id=&#34;the-verdict&#34;&gt;The verdict&lt;/h2&gt;
&lt;p&gt;Part of choosing the right approach to solving any programming problem is taking into account the size of the input data set. In this case, it&amp;rsquo;s a small one. In this scenario, a one-pass greedy algorithm will always be faster and less resource-needy than dynamic programming, simply because it has fewer steps. Our greedy algorithm was almost two orders of magnitude faster and less memory-hungry than our dynamic programming algorithm.&lt;/p&gt;
&lt;p&gt;Not having those extra steps, however, means that getting the best possible solution from the greedy algorithm is unlikely.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s clear that the dynamic programming algorithm gave us better numbers: a lower weight, and higher overall worth.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Greedy algorithm&lt;/th&gt;
&lt;th&gt;Dynamic programming&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total weight:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;6987g&lt;/td&gt;
&lt;td&gt;6955g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total worth:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;716&lt;/td&gt;
&lt;td&gt;757&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Where dynamic programming on small data sets lacks in performance, it makes up in optimization. The question then becomes whether that additional optimization is worth the performance cost.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Better,&amp;rdquo; of course, is a subjective judgement. If speed and low resource usage is our success metric, then the greedy algorithm is clearly better. If the total worth of items in the bag is our success metric, then dynamic programming is clearly better. However, our scenario is a practical one, and only one of these algorithm designs returned an answer I&amp;rsquo;d choose. In optimizing for the overall greatest possible total worth of the items in the bag, the dynamic programming algorithm left out my highest-worth, but also heaviest, item: my laptop. The chargers and cables, Roost stand, and keyboard that were included aren&amp;rsquo;t much use without it.&lt;/p&gt;
&lt;h2 id=&#34;better-algorithm-design&#34;&gt;Better algorithm design&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a simple way to alter the dynamic programming approach so that the laptop is always included: we can modify the data so that the worth of the laptop is greater than the sum of the worth of all the other items. (Try it out!)&lt;/p&gt;
&lt;p&gt;Perhaps in re-designing the dynamic programming algorithm to be more practical, we might choose another success metric that better reflects an item&amp;rsquo;s importance, instead of a subjective worth value. There are many possible metrics we can use to represent the value of an item. Here are a few examples of a good proxy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amount of time spent using the item&lt;/li&gt;
&lt;li&gt;Initial cost of purchasing the item&lt;/li&gt;
&lt;li&gt;Cost of replacement if the item were lost today&lt;/li&gt;
&lt;li&gt;Dollar value of the product of using the item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the same token, the greedy algorithm&amp;rsquo;s results might be improved with the use of one of these alternate metrics.&lt;/p&gt;
&lt;p&gt;On top of choosing an appropriate approach to solving the knapsack problem in general, it is helpful to design our algorithm in a way that translates the practicalities of a scenario into code.&lt;/p&gt;
&lt;p&gt;There are many considerations for better algorithm design beyond the scope of this introductory post. One of these is &lt;strong&gt;time complexity&lt;/strong&gt;, and I&amp;rsquo;ve &lt;a href=&#34;https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/&#34;&gt;written about it here&lt;/a&gt;. A future algorithm may very well decide my bag&amp;rsquo;s contents on the next trip, but we&amp;rsquo;re not quite there yet. Stay tuned!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/cover_knapsack-doodle_hu7070e09a25cc0b4f24775e27e4fe15a9_203336_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Things you need to know about becoming a Data Scientist</title><link>https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/</link><pubDate>Fri, 31 Mar 2017 13:19:19 +0900</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/</guid><description>Five Data Scientists discuss a day in the life and what it takes to be a successful Data Scientist.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/cover_datasci-panelists_hud75b6aee53166895e543034fff84f78c_103732_640x0_resize_q75_box.jpg" width="640" height="427"/>
&lt;p&gt;I recently attended a panel discussion hosted by General Assembly in Singapore entitled, &amp;ldquo;So you want to be a Data Scientist/Analyst&amp;rdquo;. The panel featured professionals in different stages of their careers and offered a wealth of information to an audience of hopefuls, including tips on how to land a job as a data scientist, and stories debunking myths that color this field.&lt;/p&gt;
&lt;h1 id=&#34;the-panelists&#34;&gt;The panelists&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Misrab Faizullah-Khan&lt;/strong&gt; - VP of Data Science, &lt;em&gt;GO_JEK&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Anthony Ta&lt;/strong&gt; - Data Scientist, &lt;em&gt;Tech in Asia&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Leow Guo Jun&lt;/strong&gt; - Data Scientist, &lt;em&gt;GO_JEK&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Gabriel Jiang&lt;/strong&gt; - Data Scientist&lt;br /&gt;
&lt;strong&gt;Adam Drake&lt;/strong&gt; - Chief Data Officer, &lt;em&gt;Atazzo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a rundown of the major points discussed, paraphrased for brevity.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-day-in-the-life-like&#34;&gt;What&amp;rsquo;s a day-in-the-life like?&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re mostly &amp;ldquo;data janitors.&amp;rdquo; A large part of working with data begins with and consists of data sanitation. Without quality data, you won&amp;rsquo;t get accurate results. Understanding how data should be sanitized largely encompasses skills that aren&amp;rsquo;t directly related to data analytics. To fully understand the problem you&amp;rsquo;re hoping to solve, you need to talk with the people involved. It&amp;rsquo;s important that everyone understands all the elements of a project, and exactly what those elements are being called. &amp;ldquo;Sales,&amp;rdquo; as an example, may be calculated differently depending on who you&amp;rsquo;re talking to.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-data-scientist-vs-data-analyst&#34;&gt;What&amp;rsquo;s a data &amp;ldquo;scientist&amp;rdquo; vs. data &amp;ldquo;analyst&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;It largely depends on the company you work for. &amp;ldquo;Data [insert modifier]&amp;rdquo; is only a recent distinction for a job field that has historically been called &amp;ldquo;Business Analytics.&amp;rdquo; In a smaller company, as with any other position, one person may handle a variety of data-related tasks under the title of &amp;ldquo;Data Scientist.&amp;rdquo; In a larger company with more staff and finer grain specialization, you may have a &amp;ldquo;Data Analyst&amp;rdquo; that handles less technical aspects, and a &amp;ldquo;Data Scientist&amp;rdquo; whose work is very technical and involves quantitative learning or machine learning.&lt;/p&gt;
&lt;p&gt;The field of data science/analytics is fresh enough that standard definitions for job titles really haven&amp;rsquo;t been agreed upon yet. When considering a position, focus on the company rather than the title.&lt;/p&gt;
&lt;h2 id=&#34;should-i-join-a-startup-or-large-company&#34;&gt;Should I join a startup or large company?&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s no wrong answer. Being aware of your own working style and preferences will help guide your decision.&lt;/p&gt;
&lt;p&gt;Startups generally offer more freedom and less micromanaging. This also means that you&amp;rsquo;ll necessarily receive less guidance, and will need to be able to figure stuff out, learn, and make progress under your own power.&lt;/p&gt;
&lt;p&gt;In a big company, you&amp;rsquo;re likely to experience more structure, and be expected to follow very clearly defined pre-existing processes. Your job scope will likely be more focused than it would be at a startup. You&amp;rsquo;ll experience less freedom in general, but also more certainty in what&amp;rsquo;s expected of you.&lt;/p&gt;
&lt;p&gt;In the end, especially at the beginning of your career, don&amp;rsquo;t put too much stock in choosing one or the other. If you like the company, big or small, give it a try. If you&amp;rsquo;re not happy there after a few months, then try another one. No career decision is ever permanent.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also worthwhile to note that even if you find a company you like the first time around, it&amp;rsquo;s in your best interest to change companies after one or two years. The majority of the salary raises you&amp;rsquo;ll earn in your lifetime will occur in the first ten years of your career. Say you&amp;rsquo;re hired by Company A as a junior data scientist for two years - after two years, you&amp;rsquo;re no longer a junior. You can now earn, say, a 30% higher salary in a data scientist position, but it&amp;rsquo;s unlikely that Company A will give you a 30% raise after two years. At that point it&amp;rsquo;s time to find Company B and put a few more years of experience on your resume, then probably change companies again. You don&amp;rsquo;t earn the big bucks sticking with one company for decades - you&amp;rsquo;ll always be the junior developer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;datasci-offstage.jpg&#34; alt=&#34;Talking offstage.&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-do-you-look-for-when-hiring-a-candidate&#34;&gt;What do you look for when hiring a candidate?&lt;/h2&gt;
&lt;p&gt;Overall, the most important skills for a data science candidate are soft skills. Curiosity, tenacity, and good communication skills are vital. Persistence, especially when it comes to adapting to a quickly changing industry, is important. The most promising candidates are passionate enough about the field to be learning everything they can, even outside of their work scope. Hard skills like coding and algorithms can be taught - it&amp;rsquo;s the soft skills that set good candidates apart.&lt;/p&gt;
&lt;p&gt;Hacking skills are also vital. This doesn&amp;rsquo;t necessarily mean you can write code. Someone who has a grasp of overall concepts, knows algorithms, and has curiosity enough to continuously learn is going to go farther than someone who can just write code. It takes creativity to build hacking skills on top of being familiar with the basic navigation points. Having the ability to come up with solutions that use available tools in new ways - that&amp;rsquo;s hacking skill.&lt;/p&gt;
&lt;p&gt;Design thinking is another important asset. Being able to understand how systems integrate on both technical and business levels is very valuable. If you&amp;rsquo;re able to see the big picture, you&amp;rsquo;re more likely to find different ways to accomplish the overall objective.&lt;/p&gt;
&lt;p&gt;You might think that seeing buzzwords on resumes makes you look more attractive as a candidate - more often, it stands out as a red flag. Putting &amp;ldquo;advanced machine learning&amp;rdquo; on your CV and then demonstrating that you don&amp;rsquo;t know basic algorithms doesn&amp;rsquo;t look good. It&amp;rsquo;s your projects and your interests outside of the job you&amp;rsquo;re applying for that say the most about you. Popular topics in this industry change fast - you&amp;rsquo;re better off having a solid grasp of basic fundamentals as well as a broad array of experience than name-dropping whatever&amp;rsquo;s trending.&lt;/p&gt;
&lt;h2 id=&#34;is-there-a-future-for-humans-in-the-data-science-field-when-will-the-machines-replace-us&#34;&gt;Is there a future for humans in the data science field? When will the machines replace us?&lt;/h2&gt;
&lt;p&gt;This isn&amp;rsquo;t a question unique to data science, and many historical examples already exist. Financial investment is a good example - where you used to have a human do calculations and make predictions, computers now do a lot of that automatically, making decisions about risk and possible payoff every day.&lt;/p&gt;
&lt;p&gt;Where humans won&amp;rsquo;t be replaced, just as in other industries that have embraced automation, is in the human element. You&amp;rsquo;ll still need people to handle communication, be creative, be curious, make interpretations and understand problems&amp;hellip; all those things are fundamentally human aspects of enterprise.&lt;/p&gt;
&lt;p&gt;Ultimately, machines and more automation will make human work less of a grind. By automating the mundane stuff, like data sanitization for example, human minds are freed up to develop more interesting things.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-future-applications-for-data-driven-automation&#34;&gt;What are the future applications for data-driven automation?&lt;/h2&gt;
&lt;p&gt;Legal is a good next candidate for automation. There&amp;rsquo;s a lot there that can be handled by programs using data to assess risk.&lt;/p&gt;
&lt;p&gt;Medicine is another field ripe for advances through data. Radiologists, your days are numbered: image detection is coming for you. The whole field of diagnostics is about to drastically change.&lt;/p&gt;
&lt;p&gt;A particularly interesting recent application for data science is in language translation. By looking at similarities in sentence structure and colloquial speech across different languages, we&amp;rsquo;re able to sort similar words based on the &amp;ldquo;space&amp;rdquo; they occupy within the language structure.&lt;/p&gt;
&lt;p&gt;Insurance - the original data science industry - already is and will continue to become very automated. With increased ability to use data to assess risk, we&amp;rsquo;re beginning to see new creative insurance products being introduced. E-commerce companies can now buy insurance on the risk a customer will return a product - hard to do without the accessibility of data that we have today.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-push-data-driven-decisions-and-get-my-boss-to-agree-with-me&#34;&gt;How do I push data-driven decisions and get my boss to agree with me?&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a loaded question. The bottom line is that it depends on the company&amp;rsquo;s data culture and decision path. We&amp;rsquo;ve experienced working for management who say, &amp;ldquo;We&amp;rsquo;ve already made the decisions, we just need the data to prove it.&amp;rdquo; Obviously, that&amp;rsquo;s a tough position to work from.&lt;/p&gt;
&lt;p&gt;Generally, ask yourself, &amp;ldquo;Am I making my boss look good?&amp;rdquo; You might hear that and think, &amp;ldquo;Why would I let my boss get all the credit?&amp;rdquo; - but who cares? Let them take the credit. If you&amp;rsquo;re producing good work, you&amp;rsquo;re making your team look good. If you make your team look good, you&amp;rsquo;re indispensible to your team and your boss. People who are indispensible are listened to.&lt;/p&gt;
&lt;h2 id=&#34;what-s-your-best-advice-for-a-budding-data-scientist&#34;&gt;What&amp;rsquo;s your best advice for a budding data scientist?&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t be too keen to define yourself too quickly. If you narrow your focus too much, especially when you&amp;rsquo;re learning, you can get stuck in a situation of having become an expert in &amp;ldquo;Technology A, version 3&amp;rdquo; when companies are looking to hire for experts in version 4. It happens.&lt;/p&gt;
&lt;p&gt;A broad understanding of fundamentals will be far more valuable to you on the whole. Maybe you start out writing code, and decide you don&amp;rsquo;t like it, but discover that you&amp;rsquo;re really good at designing big picture stuff and leading teams, and you end up as a technical lead. It could even vary depending on the company you work for - so stay flexible.&lt;/p&gt;
&lt;p&gt;Your best bet is to follow what you&amp;rsquo;re passionate about, and try to understand a wide range of overall concepts. Spend the majority of your efforts learning things that are timeless, like the base technologies under hot-topic items like TensorFlow. Arm yourself with a broad understanding of the terrain, different companies, and the products that are out there.&lt;/p&gt;
&lt;p&gt;If you focus on learning code specifically, learning one language well makes it easier to learn others. Make sure you understand the basics.&lt;/p&gt;
&lt;h3 id=&#34;tl-dr-it&#34;&gt;TL;dr it:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt; Talk more and don&amp;rsquo;t give up.&lt;br /&gt;
&lt;strong&gt;Anthony:&lt;/strong&gt; [Be] courageous, and hands-on.&lt;br /&gt;
&lt;strong&gt;Gabriel:&lt;/strong&gt; Be creative.&lt;br /&gt;
&lt;strong&gt;Guo Jun:&lt;/strong&gt; It&amp;rsquo;s worth the pain.&lt;br /&gt;
&lt;strong&gt;Misrab:&lt;/strong&gt; Evaluate yourself and maintain a feedback loop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;datasci-crowd.jpg&#34; alt=&#34;The crowd at GA Singapore&#34; /&gt;
&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/GA_Singapore&#34;&gt;General Assembly&lt;/a&gt; is one of many schools and resources available to those interested in a career in data science. I&amp;rsquo;ve listed a few others in &lt;a href=&#34;https://victoria.dev/blog/top-free-resources-for-developing-coding-superpowers/&#34;&gt;this post&lt;/a&gt; if you&amp;rsquo;re looking for more. Good luck!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/cover_datasci-panelists_hud75b6aee53166895e543034fff84f78c_103732_640x0_resize_q75_box.jpg" type="image/jpg"/></item></channel></rss>