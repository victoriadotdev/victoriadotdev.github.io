<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>aws on victoria.dev</title><link>https://victoria.dev/tags/aws/</link><description>Recent content in aws on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Mon, 23 Sep 2019 08:03:12 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating to the cloud but without screwing it up, or how to move house</title><link>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</link><pubDate>Mon, 23 Sep 2019 08:03:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</guid><description>A practical guide to moving to cloud services with minimal downtime, using AWS examples.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" width="640" height="468"/>
&lt;p&gt;For an application that&amp;rsquo;s ready to scale, not using managed cloud architecture these days is like insisting on digging your own well for water. It&amp;rsquo;s far more labour-intensive, requires buying all your own equipment, takes a lot more time, and there&amp;rsquo;s a higher chance you&amp;rsquo;re going to get it wrong because you don&amp;rsquo;t personally have a whole lot of experience digging wells, anyway.&lt;/p&gt;
&lt;p&gt;That said - let&amp;rsquo;s just get this out of the way first - there is no cloud. It&amp;rsquo;s just someone else&amp;rsquo;s computer.&lt;/p&gt;
&lt;p&gt;Of course, these days, cloud services go far beyond the utility we&amp;rsquo;d expect from a single computer. Besides being able to quickly set up and utilize the kind of computing power that previously required a new office lease agreement to house, there are now a multitude of monitoring, management, and analysis tools at our giddy fingertips. While it&amp;rsquo;s important to understand that the cloud isn&amp;rsquo;t a better option in every case, for applications that can take advantage of it, we can do more, do it faster, and do it for less money than if we were to insist on building our own on-premises infrastructure.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all great, and easily said; moving to the cloud, however, can look from the outset like a pretty daunting task. How, exactly, do we go about shifting what may be years of on-premises data and built-up systems to &lt;em&gt;someone else&amp;rsquo;s computer?&lt;/em&gt; You know, without being able to see it, touch it, and without completely screwing up our stuff.&lt;/p&gt;
&lt;p&gt;While it probably takes less work and money than setting up or maintaining the same architecture on-premise, it does take some work to move to the cloud initially. It&amp;rsquo;s important that our application is prepared to migrate, and capable of using the benefits of cloud services once it gets there. To accomplish this, and a smooth transition, preparation is key. In fact, it&amp;rsquo;s a whole lot like moving to a new house.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll take a high-level look at the general stages of taking an on-premise or self-hosted application and moving it to the cloud. This guide is meant to serve as a starting point for designing the appropriate process for your particular situation, and to enable you to better understand the cloud migration process. While cloud migration may not be the best choice for some applications - such as ones without scalable architecture or where very high computing resources are needed - a majority of modular and modern applications stand to benefit from a move to the cloud.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s certainly possible, as I discovered at a recent event put on by &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt; (AWS) Solutions Architects, to migrate smoothly and efficiently, with near-zero loss of availability to customers. I&amp;rsquo;ll specifically reference some services provided by AWS, however, similar functionality can be found with other cloud providers. I&amp;rsquo;ve found the offerings from AWS to be pleasantly modular in scope, which is why I use them myself and why they make good examples for discussing general concepts.&lt;/p&gt;
&lt;p&gt;To have our move go as smoothly as possible, here are the things we&amp;rsquo;ll want to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The type of move we&amp;rsquo;re making;&lt;/li&gt;
&lt;li&gt;The things we&amp;rsquo;ll take, and the things we&amp;rsquo;ll clean up;&lt;/li&gt;
&lt;li&gt;How to choose the right type and size for the infrastructure we&amp;rsquo;re moving into; and&lt;/li&gt;
&lt;li&gt;How to do test runs to practice for the big day.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-type-of-move-we-re-making&#34;&gt;The type of move we&amp;rsquo;re making&lt;/h2&gt;
&lt;p&gt;While it&amp;rsquo;s important to understand why we&amp;rsquo;re moving our application to cloud services, we should also have an idea of what we&amp;rsquo;d like it to look like when it gets there. There are three main ways to move to the cloud: re-host, re-platform, or re-factor.&lt;/p&gt;
&lt;h3 id=&#34;re-host&#34;&gt;Re-host&lt;/h3&gt;
&lt;p&gt;A re-host scenario is the the most straightforward type of move. It involves no change to the way our application is built or how it runs. For example, if we currently have Python code, use PostgreSQL, and serve our application with Apache, a re-host move would mean we use all the same components, combined in just the same way, only now they&amp;rsquo;re in the cloud. It&amp;rsquo;s a lot like moving into a new house that has the exact same floor plan as the current one. All the furniture goes into the same room it&amp;rsquo;s in now, and it&amp;rsquo;s going to feel pretty familiar when we get there.&lt;/p&gt;
&lt;p&gt;The main draw of a re-host move is that it may offer the least amount of complication necessary in order to take advantage of going to the cloud. Scalable applications, for example, can gain the ability to automatically manage necessary application resources.&lt;/p&gt;
&lt;p&gt;While re-hosting makes scaling more automatic, it&amp;rsquo;s important to note that it won&amp;rsquo;t in itself make an application scalable. If the application infrastructure is not organized in such a way that gives it the ability to scale, a re-factor may be necessary instead.&lt;/p&gt;
&lt;h3 id=&#34;re-platform&#34;&gt;Re-platform&lt;/h3&gt;
&lt;p&gt;If a component of our current application set up isn&amp;rsquo;t working out well for us, we&amp;rsquo;re probably going to want to re-platform. In this case, we&amp;rsquo;re making a change to at least one component of our architecture; for example, switching our database from Oracle to MySQL on &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;Amazon Relational Database Service&lt;/a&gt; (RDS).&lt;/p&gt;
&lt;p&gt;Like moving from a small apartment in Tokyo to an equally small apartment in New York, a re-platform doesn&amp;rsquo;t change the basic nature of our application, but does change its appearance and environment. In the database change example, we&amp;rsquo;ll have all the same data, just organized or formatted a little differently. In most cases, we won&amp;rsquo;t have to make these changes manually. A tool such as &lt;a href=&#34;https://aws.amazon.com/dms/&#34;&gt;Amazon Database Migration Service&lt;/a&gt; (DMS) can help to seamlessly shift our data over to the new database.&lt;/p&gt;
&lt;p&gt;We might re-platform in order to enable us to better meet a business demand in the future, such as scaling up, integrating with other technological components, or choosing a more modern technology stack.&lt;/p&gt;
&lt;h3 id=&#34;re-factor&#34;&gt;Re-factor&lt;/h3&gt;
&lt;p&gt;A move in which we re-factor our application is necessarily more complicated than our other options, however, it may provide the most overall benefit for companies or applications that have reason to make this type of move. As with code, refactoring is done when fundamental changes need to be made in order for our application to meet a business need. The specifics necessarily differ case-by-case, but typically involve changes to architectural components or how those components relate to one another. This type of move may also involve changing application code in order to optimize the application&amp;rsquo;s performance in a cloud environment. We can think of it like moving out from our parent&amp;rsquo;s basement in the suburbs and getting a nice townhouse in the city. There&amp;rsquo;s no way we&amp;rsquo;re taking that ancient hand-me-down sofa, so we&amp;rsquo;ll need some new furniture, and for our neighbour&amp;rsquo;s sake, probably window dressings.&lt;/p&gt;
&lt;p&gt;Refactoring may enable us to modernize a dated application, or make it more efficient in general. With greater efficiency, we can better take advantage of services that cloud providers typically offer, like bursting resources or attaining deep analytical insight.&lt;/p&gt;
&lt;p&gt;If a re-factor is necessary but time is scarce, it may be better to re-host or re-platform first, then re-factor later. That way, we&amp;rsquo;ll have a job well done later instead of a hasty, botched migration (and more problems) sooner.&lt;/p&gt;
&lt;h2 id=&#34;what-to-take-and-what-to-clean-up&#34;&gt;What to take, and what to clean up&lt;/h2&gt;
&lt;p&gt;Over the years of living in one place, stuff tends to pile up unnoticed in nooks and crannies. When moving house, it&amp;rsquo;s usually a great opportunity to sort everything out and decide what is useful enough to keep, and what should be discarded or given away. Moving to the cloud is a similarly great opportunity to do the same when it comes to our application.&lt;/p&gt;
&lt;p&gt;While cloud storage is inexpensive nowadays, there may be some things that don&amp;rsquo;t make sense to store any longer, or at least not keep stored with our primary application. If data cannot be discarded due to policy or regulations, we may choose a different storage class to house data that we don&amp;rsquo;t expect to need anytime soon outside of our main application.&lt;/p&gt;
&lt;p&gt;In the case of &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon&amp;rsquo;s Simple Storage Service&lt;/a&gt; (S3), we can choose to use different &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/&#34;&gt;storage classes&lt;/a&gt; that accomplish this goal. While the data that our business relies on every day can take advantage of the Standard class 99.99% availability, data meant for long-term cold storage such as archival backups can be put into the Glacier class, which has longer retrieval time and lower cost.&lt;/p&gt;
&lt;h2 id=&#34;the-right-type-and-size&#34;&gt;The right type and size&lt;/h2&gt;
&lt;p&gt;Choosing the type and size of cloud infrastructure appropriate for our business is usually the part that can be the most confusing. How should we predict, in a new environment or for a growing company, the computing power we&amp;rsquo;ll need?&lt;/p&gt;
&lt;p&gt;Part of the beauty of not procuring hardware on our own is that won&amp;rsquo;t have to make predictions like these. Using cloud storage and instances, expanding or scaling back resources can be done in a matter of minutes, sometimes seconds. With managed services, it can even be done automatically for us. With the proper support for scalability in our application, it&amp;rsquo;s like having a magical house that instantly generates any type of room and amenity we need at that moment. The ability to continually ensure that we&amp;rsquo;re using appropriate, cost-effective resources is at our fingertips, and often clearly visualized in charts and dashboards.&lt;/p&gt;
&lt;p&gt;For applications new to the cloud, some leeway for experimentation may be necessary. While cloud services enables us to quickly spin up and try out different architectures, there&amp;rsquo;s no guarantee that all of those set ups will work well for our application. For example, running a single instance may be &lt;a href=&#34;http://einaregilsson.com/serverless-15-percent-slower-and-eight-times-more-expensive/&#34;&gt;less expensive than going serverless&lt;/a&gt;, but we&amp;rsquo;d be hard pressed to know this until we tried it out.&lt;/p&gt;
&lt;p&gt;As a starting point, we simply need enough storage and computing power to support the application as it is currently running, today. For example, in the case of storage, consider the size of the current database - the actual database data, not the total storage capacity of hardware on-premises. For a detailed cost exploration, AWS even offers a &lt;a href=&#34;https://calculator.s3.amazonaws.com/index.html&#34;&gt;Simple Monthly Calculator&lt;/a&gt; with use case samples to help guide expectations.&lt;/p&gt;
&lt;h2 id=&#34;do-test-runs-before-the-big-day&#34;&gt;Do test runs before the big day&lt;/h2&gt;
&lt;p&gt;Running a trial cloud migration may be an odd concept, but it is an essential component to ensuring that the move goes as planned with minimal service interruption. Imagine the time and energy that would be saved in the moving house example if we could automate test runs! Invariably, some box or still-hung picture is forgotten and left out of the main truck, necessitating additional trips in other vehicles. With multiple chances to ensure we&amp;rsquo;ve got it down pat, we minimize the possibility that our move causes any break in normal day-to-day business.&lt;/p&gt;
&lt;p&gt;Generally, to do a test run, we create a duplicate version of our application. The more we can duplicate, the more thorough the test run will be, especially if our data is especially large. Though duplication may seem tedious, working with the actual components we intend to migrate is essential to ensuring the migration goes as planned. After all, if we only did a moving-house test run with one box, it wouldn&amp;rsquo;t be very representative.&lt;/p&gt;
&lt;p&gt;Test runs can help to validate our migration plan against any challenges we may encounter. These challenges might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downtime restrictions;&lt;/li&gt;
&lt;li&gt;Encrypting data in transit and immediately when at rest on the target;&lt;/li&gt;
&lt;li&gt;Schema conversion to a new target schema (the &lt;a href=&#34;https://aws.amazon.com/dms/schema-conversion-tool/&#34;&gt;AWS Schema Conversion Tool&lt;/a&gt; can also help);&lt;/li&gt;
&lt;li&gt;Access to databases, such as through firewalls or VPNs;&lt;/li&gt;
&lt;li&gt;Developing a process to ensure that all the data successfully migrated, such as by using a hash function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test runs also help to give us a more accurate picture of the overall time that a migration will take, as well as affording us the opportunity to fine-tune it. Factors that may affect the overall speed of a migration include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sizes of the source and target instances;&lt;/li&gt;
&lt;li&gt;Available bandwidth for moving data;&lt;/li&gt;
&lt;li&gt;Schema configurations; and&lt;/li&gt;
&lt;li&gt;Transaction pressure on the source, such as changes to the data and the volume of incoming transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the duplicate application has been migrated via one or more &lt;a href=&#34;https://aws.amazon.com/cloud-data-migration/&#34;&gt;options&lt;/a&gt;, we test the heck out of the application that&amp;rsquo;s now running in the cloud to ensure it performs as expected. Ideally, on the big day, we&amp;rsquo;d follow this same general process to move up-to-date duplicate data, and then seamlessly point the &amp;ldquo;real&amp;rdquo; application or web address to the new location in the cloud. This means that our customers experience near-zero downtime; essentially, only the amount of time that the change in location-pointing would need to propagate to their device.&lt;/p&gt;
&lt;p&gt;In the case of very large or complex applications with many components or many teams working together at the same time, a more gradual approach may be more appropriate than the &amp;ldquo;Big Bang&amp;rdquo; approach, and may help to mitigate risk of any interruptions. This means migrating in stages, component by component, and running tests between stages to ensure that all parts of the application are communicating with each other as expected.&lt;/p&gt;
&lt;h2 id=&#34;preparation-is-essential-to-a-smooth-migration&#34;&gt;Preparation is essential to a smooth migration&lt;/h2&gt;
&lt;p&gt;I hope this article has enabled a more practical understanding of how cloud migration can be achieved. With thorough preparation, it&amp;rsquo;s possible to take advantage of all the cloud has to offer, with minimal hassle to get there.&lt;/p&gt;
&lt;p&gt;My thanks to the AWS Solutions Architects who presented at Pop-Up Loft and shared their knowledge on these topics, in particular: Chandra Kapireddy, Stephen Moon, John Franklin, Michael Alpaugh, and Priyanka Mahankali.&lt;/p&gt;
&lt;p&gt;One last nugget of wisdom, courtesy of John: &amp;ldquo;Friends don&amp;rsquo;t let friends use DMS to create schema objects.&amp;rdquo;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to set up OpenVPN on AWS EC2 and fix DNS leaks on Ubuntu 18.04 LTS</title><link>https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</link><pubDate>Mon, 26 Aug 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</guid><description>A guide for setting up your own private VPN service, and understanding and fixing a DNS leak.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/cover_hudf0a9e712aaa7cfff13d04d6bd5de865_250170_640x0_resize_box_2.png" width="640" height="388"/>
&lt;p&gt;While rolling your own Virtual Private Network (VPN) is far more complicated than choosing a VPN provider from someone&amp;rsquo;s &amp;ldquo;best VPN 2019&amp;rdquo; list, the more I learn about why someone should use a VPN at all, the less appealing the latter option becomes. Besides the dangers of trusting a fake VPN app or falling victim to a lookalike URL, even &lt;em&gt;legit&lt;/em&gt; VPN service providers have pressures and motivations that may not be aligned with the privacy you hope to be purchasing.&lt;/p&gt;
&lt;p&gt;Usually, the point of using a VPN is to gain a layer of privacy by disguising your location. If you aren&amp;rsquo;t currently using one, you can see what the Internet knows about where you are at &lt;a href=&#34;https://dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;. You&amp;rsquo;ll see a big hello, your IP address, and your location. If that&amp;rsquo;s a little unsettling, know that a VPN can help to shield your location and online activities from wandering eyes and opportunistic advertisers. The former might be a too-curious or even malicious public-WiFi-cafe-goer, but the latter, counterintuitively, might be your own household Internet Service Provider (ISP).&lt;/p&gt;
&lt;p&gt;Using a VPN means that the Internet can&amp;rsquo;t easily see your location, and your ISP can&amp;rsquo;t see your unencrypted web traffic (and neither can your curious coffee shop neighbor). Your ISP &lt;em&gt;can&lt;/em&gt; see the amount of data you&amp;rsquo;re sending, in its encrypted form, and that you&amp;rsquo;re sending it to your VPN server - but that&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;Unless you have a &lt;a href=&#34;https://dnsleaktest.com/what-is-a-dns-leak.html&#34;&gt;DNS leak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are still using your ISP&amp;rsquo;s DNS server, they are still able to see all the URLs the server is resolving for you. So they&amp;rsquo;ll know you asked for &lt;code&gt;lastminutebackwax.com&lt;/code&gt;, although they won&amp;rsquo;t be able to decrypt the data that was exchanged with the site. (Is it just me, or does that seem even worse, somehow?)&lt;/p&gt;
&lt;p&gt;Setting up your own instance and VPN service offers some peace of mind over trusting yet another company to do right with your data. Note that a VPN will &lt;em&gt;not&lt;/em&gt; give you complete online anonymity; there are many other ways your Internet presence can be tracked and your location discovered. However, if properly set up, without DNS leaks, you&amp;rsquo;ll have about as much Internet privacy as can be afforded without using &lt;a href=&#34;https://en.wikipedia.org/wiki/Tor_(anonymity_network)&#34;&gt;Tor&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-our-vpn&#34;&gt;Setting up our VPN&lt;/h1&gt;
&lt;p&gt;This post will cover how to set up the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE/&#34;&gt;OpenVPN Access Server&lt;/a&gt; product on AWS Marketplace, running on an &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2 instance&lt;/a&gt;. Then, we&amp;rsquo;ll look at how to fix a &lt;a href=&#34;https://gitlab.gnome.org/GNOME/NetworkManager-openvpn/issues/10&#34;&gt;known NetworkManager bug in Ubuntu 18.04 that might cause DNS leaks&lt;/a&gt;. The whole process should take about fifteen minutes, so grab a ☕ and let&amp;rsquo;s do some adulting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: IDs and IP addresses shown for demonstration in this tutorial are invalid.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-launch-the-openvpn-access-server-on-aws-marketplace&#34;&gt;1. Launch the OpenVPN Access Server on AWS Marketplace&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt; is available on AWS Marketplace. The Bring Your Own License (BYOL) model doesn&amp;rsquo;t actually require a license for up to two connected devices; to connect more clients, you can get &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile/ref=srh_res_product_vendor?ie=UTF8&amp;amp;id=aac3a8a3-2823-483c-b5aa-60022894b89d&#34;&gt;bundled billing&lt;/a&gt; for five, ten, or twenty-five clients, or &lt;a href=&#34;https://openvpn.net/pricing/&#34;&gt;purchase a minimum of ten OpenVPN licenses a la carte&lt;/a&gt; for $15/device/year. For most of us, the two free connected devices will suffice; and if using an EC2 Micro instance, our set up will be &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS Free Tier eligible&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Start by clicking &amp;ldquo;Continue to Subscribe&amp;rdquo; for the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt;, which will bring you to a page that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1-subscribe.jpg#screenshot&#34; alt=&#34;Subscription details page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue to Configuration.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2-configure.jpg#screenshot&#34; alt=&#34;Configure this software page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the EC2 instance type in the right side bar (and consequently, the Monthly Estimate) isn&amp;rsquo;t the one we want - that&amp;rsquo;s okay, we can change it soon. Just ensure that the &amp;ldquo;Region&amp;rdquo; chosen is where we want the instance to be located. Generally, the closer it is to the physical location of your client (your laptop, in this case), the faster your VPN will be. Click &amp;ldquo;Continue to Launch.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3-launch.jpg#screenshot&#34; alt=&#34;Launch this software page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On this page, we&amp;rsquo;ll change three things:&lt;/p&gt;
&lt;h3 id=&#34;1-the-ec2-instance-type&#34;&gt;1. The EC2 Instance type&lt;/h3&gt;
&lt;p&gt;Different types of EC2 (Elastic Compute Cloud) instances will offer us different levels of computing power. If you plan to use your instance for something more than just this VPN, you may want to choose something with higher memory or storage capacity, depending on how you plan to use it. We can view each instance offering on the &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/&#34;&gt;Amazon EC2 Instance Types page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For simple VPN use, the &lt;code&gt;t2.nano&lt;/code&gt; or &lt;code&gt;t2.micro&lt;/code&gt; instances are likely sufficient. Only the Micro instance is Free Tier eligible.&lt;/p&gt;
&lt;h3 id=&#34;2-the-security-group-settings&#34;&gt;2. The Security Group settings&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&#34;&gt;Security Group&lt;/a&gt; is a profile, or collection of settings, that Amazon uses to control access to our instance. If you&amp;rsquo;ve set up other AWS products before, you may already have some groups with their own rules defined. We should be careful to understand the reasons for our Security Group settings, as these define how public or private our instance is, and consequently, who has access to it.&lt;/p&gt;
&lt;p&gt;If we click &amp;ldquo;Create New Based on Seller Settings,&amp;rdquo; the OpenVPN server defines some recommended settings for a default Security Group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4-security-group.jpg#screenshot&#34; alt=&#34;Security group settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The default recommended settings are all &lt;code&gt;0.0.0.0/0&lt;/code&gt; for TCP ports 22, 943, 443, and 945, and UDP port 1194. OpenVPN offers an &lt;a href=&#34;https://openvpn.net/vpn-server-resources/amazon-web-services-ec2-byol-appliance-quick-start-guide/#Instance_Launch_Options&#34;&gt;explanation of how the ports are used&lt;/a&gt; on their website. With the default settings, all these ports are left open to support various features of the OpenVPN server. We may wish to restrict access to these ports to a specific IP address or block of addresses (like that of your own ISP) to increase the security of our instance. However, if your IP address frequently changes (like when you travel and connect to a different WiFi network), restricting the ports may not be as helpful as we hope.&lt;/p&gt;
&lt;p&gt;In any case, our instance will require SSH keys to connect to, and the OpenVPN server will be password protected. Unless you have other specific security goals, it&amp;rsquo;s fine to accept the default settings for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give the Security Group a name and brief description, so we know what it&amp;rsquo;s for. Then click &amp;ldquo;Save.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;3-the-key-pair-settings&#34;&gt;3. The Key Pair settings&lt;/h3&gt;
&lt;p&gt;The aforementioned SSH keys are access credentials that we&amp;rsquo;ll use to connect to our instance. We can &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair&#34;&gt;create a key pair&lt;/a&gt; in this section, or you can choose a key pair you may already be using with AWS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5-keys.jpg#screenshot&#34; alt=&#34;Key Pair Settings link&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To create a new set of access credentials, click &amp;ldquo;Create a key pair in EC2&amp;rdquo; to open a new window. Then, click the &amp;ldquo;Create Key Pair&amp;rdquo; blue button. Once you give your key pair a name, it will be created and the private key will automatically download to your machine. It&amp;rsquo;s a file ending with the extension &lt;code&gt;.pem&lt;/code&gt;. Store this key in a secure place on your computer. We&amp;rsquo;ll need to refer to it when we connect to our new EC2 instance.&lt;/p&gt;
&lt;p&gt;We can return to the previous window to select the key pair we just created. If it doesn&amp;rsquo;t show up, hit the little &amp;ldquo;refresh&amp;rdquo; icon next to the drop-down. Once it&amp;rsquo;s selected, hit the shiny yellow &amp;ldquo;Launch&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;We should see a message like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;6-launched.jpg#screenshot&#34; alt=&#34;Launch success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great stuff! Now that our instance exists, let&amp;rsquo;s make sure we can access it and start up our VPN. For a shortcut to the next step, click on the &amp;ldquo;EC2 Console&amp;rdquo; link in the success message.&lt;/p&gt;
&lt;h2 id=&#34;2-associate-an-elastic-ip&#34;&gt;2. Associate an Elastic IP&lt;/h2&gt;
&lt;p&gt;Amazon&amp;rsquo;s &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&#34;&gt;Elastic IP Addresses&lt;/a&gt; provides us with a public IPv4 address controlled by our account, unlike the public IP address tied to our EC2 instance. It&amp;rsquo;s considered a best practice to create one and associate it with our VPN instance. If anything should go wrong with our instance, or if we want to use a new instance for our VPN in the future, the Elastic IP can be disassociated from the current instance and reassociated with our new one. This makes the transition seamless for our connected clients. Think of the Elastic IP like a web domain address that we register - we can point it at whatever we choose.&lt;/p&gt;
&lt;p&gt;We can create a new Elastic IP address on the &lt;a href=&#34;https://console.aws.amazon.com/ec2/&#34;&gt;Amazon EC2 Console&lt;/a&gt;. If you clicked the link from the success message above, we&amp;rsquo;re already there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;7-ec2.jpg#screenshot&#34; alt=&#34;EC2 console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you have more than one instance, take note of the Instance ID of the one we&amp;rsquo;ve just launched.&lt;/p&gt;
&lt;p&gt;In the left sidebar under &amp;ldquo;Network &amp;amp; Security,&amp;rdquo; choose &amp;ldquo;Elastic IPs.&amp;rdquo; Then click the blue &amp;ldquo;Allocate new address&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;8-elasticip.jpg#screenshot&#34; alt=&#34;Allocate new address page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Choose &amp;ldquo;Amazon Pool,&amp;rdquo; then click &amp;ldquo;Allocate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;9-elasticip.jpg#screenshot&#34; alt=&#34;Allocate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! We can click &amp;ldquo;Close&amp;rdquo; to return to the Elastic IP console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;10-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have an Elastic IP, let&amp;rsquo;s associate it with our instance. Select the IP address, then click &amp;ldquo;Actions,&amp;rdquo; and choose &amp;ldquo;Associate address.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;11-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP with instance&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ensure the &amp;ldquo;Instance&amp;rdquo; option is selected, then click the drop-down menu. We should see our EC2 instance ID there. Select it, then click &amp;ldquo;Associate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;12-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! Now that we&amp;rsquo;ll be able to access our VPN instance, let&amp;rsquo;s get our VPN service up and running.&lt;/p&gt;
&lt;h2 id=&#34;3-initialize-openvpn-on-the-ec2-server&#34;&gt;3. Initialize OpenVPN on the EC2 server&lt;/h2&gt;
&lt;p&gt;First, we&amp;rsquo;ll need to connect to the EC2 instance via our terminal. We&amp;rsquo;ll use the private key we created earlier.&lt;/p&gt;
&lt;p&gt;Open a new terminal window and navigate to the directory containing the private key &lt;code&gt;.pem&lt;/code&gt; file. We&amp;rsquo;ll need to set its permissions with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo chmod &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; &amp;lt;name&amp;gt;.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to substitute &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; with the name of your key.&lt;/p&gt;
&lt;p&gt;This sets the file permissions to &lt;code&gt;-r--------&lt;/code&gt; so that it can only be read by the user (you). It may help to protect the private key from read and write operations by other users, but more pertinently, will prevent AWS from throwing an error when we try to connect to our instance.&lt;/p&gt;
&lt;p&gt;We can now do just that by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -i &amp;lt;name&amp;gt;.pem openvpnas@&amp;lt;elastic ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user &lt;code&gt;openvpnas&lt;/code&gt; is set up by the OpenVPN Access Server to allow us to connect to our instance. Replace &lt;code&gt;&amp;lt;elastic ip&amp;gt;&lt;/code&gt; with the Elastic IP address we just associated.&lt;/p&gt;
&lt;p&gt;We may get a message saying that the authenticity of our host can&amp;rsquo;t be established. As long as we&amp;rsquo;ve typed the Elastic IP correctly, we can go ahead and answer &amp;ldquo;yes&amp;rdquo; to the prompt.&lt;/p&gt;
&lt;p&gt;Upon the initial connection to the OpenVPN instance, a set up wizard called &amp;ldquo;Initial Configuration Tool&amp;rdquo; should automatically run. (If, for some reason, it doesn&amp;rsquo;t, or you panic-mashed a button, we can restart it with &lt;code&gt;sudo ovpn-init –ec2&lt;/code&gt;.) We&amp;rsquo;ll be asked to accept the agreement, then the wizard will help to walk us through some configuration settings for our VPN server.&lt;/p&gt;
&lt;p&gt;You may generally accept the default settings, however, there are a couple questions you may like to answer knowledgeably. They are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Should client traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; Answering &amp;ldquo;yes&amp;rdquo; to this option can prevent &lt;a href=&#34;https://en.wikipedia.org/wiki/Split_tunneling&#34;&gt;split tunneling&lt;/a&gt;, a situation in which you may bypass the VPN when connected to WiFi networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should client DNS traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; This setting can help prevent DNS leaks by specifying that DNS requests should be handled by the VPN. If you answer &amp;ldquo;yes&amp;rdquo; to the previous question, it will be enabled regardless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When asked for our &amp;ldquo;OpenVPN-AS license key&amp;rdquo;, we can leave it blank to use the VPN with up to two clients. If you&amp;rsquo;ve purchased a key, enter it here.&lt;/p&gt;
&lt;p&gt;Once the configuration wizard finishes running, we should see the message &amp;ldquo;Initial Configuration Complete!&amp;rdquo; Before we move on, we should set a password for our server&amp;rsquo;s administration account. To do this, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo passwd openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enter your chosen password twice. Now we&amp;rsquo;re ready to get connected!&lt;/p&gt;
&lt;p&gt;To close the ssh connection, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-connect-the-client-to-the-vpn&#34;&gt;4. Connect the client to the VPN&lt;/h2&gt;
&lt;p&gt;To connect our client (in this case, our laptop) to the VPN and start reaping the benefits, we&amp;rsquo;ll need to do two things; first, obtain our connection profile; second, install the &lt;code&gt;openvpn&lt;/code&gt; daemon.&lt;/p&gt;
&lt;h3 id=&#34;1-get-your-ovpn-connection-profile&#34;&gt;1. Get your &lt;code&gt;.ovpn&lt;/code&gt; connection profile&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll need to download a connection profile for ourselves; this is like a personal configuration file with information, including keys, that the VPN server will need to allow our connection. We can do this by logging in with the password we just set at our Elastic IP address, port 943. This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://&amp;lt;elastic ip&amp;gt;:943/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;https&lt;/code&gt; part is important; without it, the instance won&amp;rsquo;t send any data.&lt;/p&gt;
&lt;p&gt;When we go to this URL, we may see a page warning us that this site&amp;rsquo;s certificate issuer is unknown or invalid. As long as we&amp;rsquo;ve typed our Elastic IP correctly, it&amp;rsquo;s safe to proceed. If you&amp;rsquo;re using Firefox, click &amp;ldquo;Advanced,&amp;rdquo; and then &amp;ldquo;Accept the Risk and Continue.&amp;rdquo; In Chrome, click &amp;ldquo;Advanced,&amp;rdquo; then &amp;ldquo;Proceed to &amp;hellip;&amp;rdquo; the elastic IP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;13-warning.jpg#screenshot&#34; alt=&#34;Security warning page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Log in with the username &lt;code&gt;openvpn&lt;/code&gt; and the password we just set. We&amp;rsquo;ll now be presented with a link to download our user-locked connection profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;14-profile.jpg#screenshot&#34; alt=&#34;Connection profile download page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we click the link, a file named &lt;code&gt;client.ovpn&lt;/code&gt; will download.&lt;/p&gt;
&lt;h3 id=&#34;2-install-and-start-openvpn-on-your-ubuntu-18-04-client&#34;&gt;2. Install and start &lt;code&gt;openvpn&lt;/code&gt; on your Ubuntu 18.04 client&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;openvpn&lt;/code&gt; daemon will allow our client to connect to our VPN server. It can be installed through the default Ubuntu repositories. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for OpenVPN to automatically start when we boot up our computer, we&amp;rsquo;ll need to rename and move the connection profile file. I suggest using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;symlink&lt;/a&gt; to accomplish this, as it leaves our original file more easily accessible for editing, and allows us to store it in any directory we choose. We can create a symlink by running this command in the directory where our file is located:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ln -s client.ovpn /etc/openvpn/&amp;lt;name&amp;gt;.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a symbolic link for the connection profile in the appropriate folder for &lt;code&gt;systemd&lt;/code&gt; to find it. The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be anything. When the Linux kernel has booted, &lt;code&gt;systemd&lt;/code&gt; is used to initialize the services and daemons that the user has set up to run; one of these will now be OpenVPN. Renaming the file with the extension &lt;code&gt;.conf&lt;/code&gt; will let the &lt;code&gt;openvpn&lt;/code&gt; daemon know to use it as our connection file.&lt;/p&gt;
&lt;p&gt;For now, we can manually start and connect to OpenVPN by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo openvpn --config client.ovpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll be asked for a username and password, which will be the same credentials we used before. Once the service finishes starting up, we&amp;rsquo;ll see &amp;ldquo;Initialization Sequence Complete.&amp;rdquo; If we now visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;, we should see the Elastic IP and the location of our EC2 server. Yay!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re on a later version of Ubuntu, you may check for DNS leaks by clicking on one of the &amp;ldquo;test&amp;rdquo; buttons. If all the ISPs shown are Amazon and none are your own service provider&amp;rsquo;s, congratulations! No leaks! You can move on to &lt;a href=&#34;#3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;Step 3 in the second section&lt;/a&gt; below, after which, you&amp;rsquo;ll be finished.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using Ubuntu 18.04 LTS, however, we&amp;rsquo;re not yet done.&lt;/p&gt;
&lt;h1 id=&#34;what-a-dns-leak-looks-like&#34;&gt;What a DNS leak looks like&lt;/h1&gt;
&lt;p&gt;To see what a DNS leak looks like, click on one of the &amp;ldquo;test&amp;rdquo; buttons on the &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test page&lt;/a&gt;. When we do, we&amp;rsquo;ll see not only our Amazon.com IP addresses, but also our own ISP and location.&lt;/p&gt;
&lt;p&gt;We can also see the leak by running &lt;code&gt;systemd-resolve --status&lt;/code&gt; in our terminal. Our results will contain two lines under different interfaces that both have entries for DNS Servers. It&amp;rsquo;ll look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Link &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tun0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: DNS
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.0.2
DNS Domain: ~.
Link &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;wlp4s0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: none
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1
DNS Domain: ~.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://unix.stackexchange.com/questions/434916/how-to-fix-openvpn-dns-leak&#34;&gt;DNS leak problem in Ubuntu 18.04&lt;/a&gt; stems from Ubuntu&amp;rsquo;s DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt;, failing to properly handle our OpenVPN configuration. In order to try and be a good, efficient DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt; will send DNS lookup requests in parallel to each interface that has a DNS server configuration, and then utilizes the fastest response. In our case, we only want to use our VPN&amp;rsquo;s DNS servers. Sorry, &lt;code&gt;systemd-resolved&lt;/code&gt;. You tried.&lt;/p&gt;
&lt;h1 id=&#34;how-to-fix-openvpn-dns-leak-on-ubuntu-18-04&#34;&gt;How to fix OpenVPN DNS leak on Ubuntu 18.04&lt;/h1&gt;
&lt;p&gt;Luckily, there is a fix that we can implement. We&amp;rsquo;ll need to install a few helpers from the Ubuntu repositories, update our configuration file, then set up OpenVPN using NetworkManager. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;1-install-some-helpers&#34;&gt;1. Install some helpers&lt;/h2&gt;
&lt;p&gt;To properly integrate OpenVPN with &lt;code&gt;systemd-resolved&lt;/code&gt;, we&amp;rsquo;ll need a bit more help. In a terminal, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install -y openvpn-systemd-resolved network-manager-openvpn network-manager-openvpn-gnome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install a helper script that integrates OpenVPN and &lt;code&gt;systemd-resolved&lt;/code&gt;, a NetworkManager plugin for OpenVPN, and its GUI counterpart for GNOME desktop environment.&lt;/p&gt;
&lt;h2 id=&#34;2-add-dns-implementation-to-your-connection-profile&#34;&gt;2. Add DNS implementation to your connection profile&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need to edit the connection profile file we downloaded earlier. Since it&amp;rsquo;s symbolically linked, we can accomplish this by changing the &lt;code&gt;.ovpn&lt;/code&gt; file, wherever it&amp;rsquo;s stored. Run &lt;code&gt;vim &amp;lt;name&amp;gt;.ovpn&lt;/code&gt; to open it in Vim, then add the following lines at the bottom. Explanation in the comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Allow OpenVPN to call user-defined scripts&lt;/span&gt;
script-security &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Tell systemd-resolved to send all DNS queries over the VPN&lt;/span&gt;
dhcp-option DOMAIN-ROUTE .
&lt;span class=&#34;c1&#34;&gt;# Use the update-systemd-resolved script when TUN/TAP device is opened,&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and also run the script on restarts and before the TUN/TAP device is closed&lt;/span&gt;
up /etc/openvpn/update-systemd-resolved
up-restart
down /etc/openvpn/update-systemd-resolved
down-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full list of OpenVPN options, see &lt;a href=&#34;https://openvpn.net/community-resources/reference-manual-for-openvpn-2-1/&#34;&gt;OpenVPN Scripting and Environment Variables&lt;/a&gt;. You may also like &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;&gt;more information about TUN/TAP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;3. Set up OpenVPN as NetworkManager system connection&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the GUI to set up our VPN with NetworkManager. Open up Network Settings, which should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;15-networksettings.png#screenshot&#34; alt=&#34;Network Settings window on Ubuntu 18.04&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then click the &amp;ldquo;+&amp;rdquo; button. On the window that pops up, counterintuitively, choose &amp;ldquo;Import from file&amp;hellip;&amp;rdquo; instead of the OpenVPN option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;16-importvpn.jpg#screenshot&#34; alt=&#34;Add VPN window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Navigate to, and then select, your &lt;code&gt;.ovpn&lt;/code&gt; file. We should now see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;17-vpnsettings.png#screenshot&#34; alt=&#34;The filled VPN connection settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Add your username and password for the server (&lt;code&gt;openvpn&lt;/code&gt; and the password we set in &lt;a href=&#34;#3-initialize-openvpn-on-the-ec2-server&#34;&gt;the first section&amp;rsquo;s Step 3&lt;/a&gt;), and your user key password (the same one again, if you&amp;rsquo;ve followed this tutorial), then click the &amp;ldquo;Add&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id=&#34;4-edit-your-openvpn-networkmanager-configuration&#34;&gt;4. Edit your OpenVPN NetworkManager configuration&lt;/h2&gt;
&lt;p&gt;Nearly there! Now that we&amp;rsquo;ve added the VPN as a NetworkManager connection, we&amp;rsquo;ll need to make a quick change to it. We can see a list of NetworkManager connections by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls -la /etc/NetworkManager/system-connections/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one for our VPN is probably called &lt;code&gt;openvpn&lt;/code&gt;, so let&amp;rsquo;s edit it by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo vim /etc/NetworkManager/system-connections/openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;code&gt;[ipv4]&lt;/code&gt;, we&amp;rsquo;ll need to add the line &lt;code&gt;dns-priority=-42&lt;/code&gt;. It should end up looking like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;18-connsettings.jpg#screenshot&#34; alt=&#34;Connection settings for ipv4&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Setting a negative number is a workaround that prioritizes this DNS server. The actual number is arbitrary (&lt;code&gt;-1&lt;/code&gt; should also work) but I like 42. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;h2 id=&#34;5-restart-connect-profit&#34;&gt;5. Restart, connect, profit!!!&lt;/h2&gt;
&lt;p&gt;In a terminal, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo service network-manager restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the Network Settings, click the magic button that turns on the VPN:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;19-vpnon.jpg#screenshot&#34; alt=&#34;Network Settings window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt; and click on &amp;ldquo;Extended test&amp;rdquo; to verify the fix. If everything&amp;rsquo;s working properly, we should now see a list containing only our VPN ISP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;20-noleaks.png#screenshot&#34; alt=&#34;Successful DNS leak test results&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;rsquo;re done! Congratulations on rolling your very own VPN server and stopping DNS leaks with OpenVPN. Enjoy surfing in (relative) privacy. Now your only worry at the local coffeeshop is who&amp;rsquo;s watching you surf from the seat behind you.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/cover_hudf0a9e712aaa7cfff13d04d6bd5de865_250170_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Why I&#39;m automatically deleting my old tweets using AWS Lambda</title><link>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</link><pubDate>Thu, 12 Apr 2018 10:51:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</guid><description>From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.</description><content:encoded>
&lt;p&gt;From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/#ephemeral-tweets&#34;&gt;&lt;em&gt;Click here to skip to the code part.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;stuff-and-opinions&#34;&gt;Stuff and opinions&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve only been a one-bag nomad for a little over a year and a half. Before that, I lived as most people do in an apartment or a house. I owned furniture, more clothing than I strictly needed, and enough &amp;ldquo;stuff&amp;rdquo; to fill at least a few moving boxes. If I went to live somewhere else, moving for school or family or work, I packed up all my things and brought them with me. Over the years, I accumulated more and more stuff.&lt;/p&gt;
&lt;p&gt;Adopting what many would call a minimalist lifestyle has rapidly changed a lot of my longstanding views. Giving away all my stuff (an idea I once thought to be interesting in principle but practically a little bit ridiculous) has become normal. It&amp;rsquo;s normal for me, now, to not own things that I don&amp;rsquo;t use on a regular basis. I don&amp;rsquo;t keep wall shelves packed with old books or dishes or clothing or childhood toys because those items aren&amp;rsquo;t relevant to me anymore. I just keep fond memories, instead.&lt;/p&gt;
&lt;p&gt;Imagine, for a moment, that I still lived in a house. Imagine that in that house, on the fridge, is a drawing I made when I was six-years-old. In the bottom right corner of that drawing scribbled in green crayon are the words &amp;ldquo;broccoli is dumb - Victoria, Age 6.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you were in my house and saw that drawing on the fridge, would you assume that the statement &amp;ldquo;broccoli is dumb&amp;rdquo; comprised an accurate and current account of my opinions on broccoli? Of course not. I was six when I wrote that. I&amp;rsquo;ve had plenty of time to change my mind.&lt;/p&gt;
&lt;h1 id=&#34;social-media-isn-t-social&#34;&gt;Social media isn&amp;rsquo;t social&lt;/h1&gt;
&lt;p&gt;I have a friend whom I&amp;rsquo;ve known since we were both in kindergarten. We went through grade school together, then spoke to and saw each other on infrequent occasions across the years. We&amp;rsquo;re both adults now. Sometimes when we chat, we&amp;rsquo;ll recall some amusing memory from when we were younger. The nature of memory being what it is, I have no illusion that what we recall is recounted with much accuracy. Our impressions of things that happened - mistakes we made and moments of victory alike - are coloured by the experiences we&amp;rsquo;ve had since then, and all the things we&amp;rsquo;ve learned. An awkward moment at a school colleague&amp;rsquo;s birthday party becomes an example of a child learning to socialize, instead of the world-ending moment of embarrassment it probably felt like at the time.&lt;/p&gt;
&lt;p&gt;This is how memory works. In a sense, it gets updated, as well it should. People living in small communities remember things that their neighbour did many years ago, but recall them in the context of who their neighbour is now, and what their current relationship is like. This re-colouring of history is an important part of how people &lt;a href=&#34;https://www.smithsonianmag.com/science-nature/how-our-brains-make-memories-14466850/&#34;&gt;heal&lt;/a&gt;, &lt;a href=&#34;http://news.feinberg.northwestern.edu/2014/02/memory_rewrite/&#34;&gt;make good decisions&lt;/a&gt;, and &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709095/&#34;&gt;socialize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Social media does not do this. Your perfectly preserved tweet from five days or five years ago can be recalled with absolute accuracy. For most people, this is not particularly worrying. We tend to tweet about pretty mundane things - things that pop into mind when we&amp;rsquo;re bored and want someone to notice us. Individually, usually, our old tweets are pretty insignificant. In aggregate, however, they paint a pretty complete picture of a person&amp;rsquo;s random, unintentionally telling thoughts. This is the problem.&lt;/p&gt;
&lt;p&gt;The assumption made of things written in social media and on Twitter specifically is a very different assumption than you might make about someone&amp;rsquo;s notepad scribble from last week. I&amp;rsquo;m not endeavoring to speculate why - I&amp;rsquo;ve just seen enough cases of someone getting publicly flogged for something they posted years ago to know that it does happen. This is weird. If you wouldn&amp;rsquo;t assume that a notepad scribble from last week or a crayon drawing from decades ago reflects the essence of who someone is &lt;em&gt;now,&lt;/em&gt; why would you assume that an old tweet does?&lt;/p&gt;
&lt;p&gt;You are not the same person you were last month - you&amp;rsquo;ve seen things, read things, understood and learned things that have, in some small way, changed you. While a person may have the same sense of self and identity through most of their life, even this grows and changes over the years. We change our opinions, our desires, our habits. We are not stagnant beings, and we should not let ourselves be represented as such, however unintentionally.&lt;/p&gt;
&lt;h1 id=&#34;ephemeral-tweets&#34;&gt;Ephemeral tweets&lt;/h1&gt;
&lt;p&gt;If you look at my Twitter profile page today, you&amp;rsquo;ll see fewer tweets there than you have fingers (I hope). I&amp;rsquo;m using &lt;a href=&#34;https://github.com/victoriadrake/ephemeral&#34;&gt;ephemeral&lt;/a&gt; - a lightweight utility I wrote for use on &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; - to delete all my tweets older than a few days. I&amp;rsquo;m doing this for the same reason that I don&amp;rsquo;t hang on to stuff that I no longer use - that stuff isn&amp;rsquo;t relevant to me anymore. It doesn&amp;rsquo;t represent me, either.&lt;/p&gt;
&lt;p&gt;The code that makes up ephemeral is written in Go. AWS Lambda creates an environment for each Lambda function, so ephemeral utilizes environment variables for your private Twitter API keys and the maximum age of the tweets you want to keep, represented in hours, like &lt;code&gt;72h&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessTokenSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;maxTweetAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MAX_TWEET_AGE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;logger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;missing required environment variable &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program uses the &lt;a href=&#34;https://github.com/ChimeraCoder/anaconda&#34;&gt;anaconda&lt;/a&gt; library. It fetches your timeline up to the Twitter API&amp;rsquo;s limit of 200 tweets per request, then compares each tweet&amp;rsquo;s date of creation to your &lt;code&gt;MAX_TWEET_AGE&lt;/code&gt; variable to decide whether it&amp;rsquo;s old enough to be deleted. After deleting all the expired tweets, the Lambda function terminates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deleteFromTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anaconda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TwitterApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not get timeline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CreatedAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Couldn&amp;#39;t parse time &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DeleteTweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DELETED: Age - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to delete! &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No more tweets to delete.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read the full code &lt;a href=&#34;https://github.com/victoriadrake/ephemeral/blob/master/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a use case like this, AWS Lambda has a free tier that costs nothing. If you&amp;rsquo;re any level of developer, it&amp;rsquo;s an extremely useful tool to become familiar with. For a full walkthrough with screenshots of how to set up a Lambda function that tweets for you, you can read &lt;a href=&#34;https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/&#34;&gt;this article&lt;/a&gt;. The set up for ephemeral is the same, it just has an opposite function. :)&lt;/p&gt;
&lt;p&gt;I forked ephemeral from Adam Drake&amp;rsquo;s &lt;a href=&#34;https://github.com/adamdrake/harold&#34;&gt;Harold&lt;/a&gt;, a Twitter tool that has many useful functions beyond keeping your timeline trimmed. If you have more than 200 tweets to delete at first pass, please use Harold to do that first. You can run Harold with the &lt;code&gt;deletetimeline&lt;/code&gt; flag from your terminal.&lt;/p&gt;
&lt;p&gt;You may like to first &lt;a href=&#34;https://twitter.com/settings/your_twitter_data&#34;&gt;download all your tweets before deleting them&lt;/a&gt; for sentimental value.&lt;/p&gt;
&lt;h1 id=&#34;why-use-twitter-at-all&#34;&gt;Why use Twitter at all?&lt;/h1&gt;
&lt;p&gt;In anticipation of the question, let me say that yes, I do use Twitter besides just as a bucket for my Lambda functions to fill and empty. It has its benefits, most related to what I perceive to be its original intended purpose: to be a means of near-instant communication for short, digestible pieces of information reaching a widespread pool of people.&lt;/p&gt;
&lt;p&gt;I use it as a way to keep tabs on what&amp;rsquo;s happening &lt;em&gt;right now.&lt;/em&gt; I use it to comment on, joke about, and commiserate with things tweeted by the people I follow &lt;em&gt;right now.&lt;/em&gt; By keeping my timeline restricted to only the most recent few days, I feel like I&amp;rsquo;m using Twitter more like it was meant to be used: a way to join the conversation and see what&amp;rsquo;s happening in the world &lt;em&gt;right now&lt;/em&gt; - instead of just another place to amass more &amp;ldquo;stuff.&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Running a free Twitter bot on AWS Lambda</title><link>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</link><pubDate>Mon, 05 Mar 2018 10:29:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</guid><description>How to save some time with automated link sharing on Twitter - for free!</description><content:encoded>
&lt;img src="https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;If you read &lt;a href=&#34;https://victoria.dev/blog/about-time/&#34;&gt;About time&lt;/a&gt;, you&amp;rsquo;ll know that I&amp;rsquo;m a big believer in spending time now on building things that save time in the future. To this end I built a simple Twitter bot in Go that would occasionally post links to my articles and keep my account interesting even when I&amp;rsquo;m too busy to use it. The tweets help drive traffic to my sites, and I don&amp;rsquo;t have to lift a finger.&lt;/p&gt;
&lt;p&gt;I ran the bot on an Amazon EC2 instance for about a month. My AWS usage has historically been pretty inexpensive (less than the price of a coffee in most of North America), so I was surprised when the little instance I was using racked up a bill 90% bigger than the month before. I don&amp;rsquo;t think AWS is expensive, to be clear, but still&amp;hellip; I&amp;rsquo;m cheap. I want my Twitter bot, and I want it for less.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d been meaning to explore AWS Lamda, and figured this was a good opportunity. Unlike an EC2 instance that is constantly running (and charging you for it), Lambda charges you per request and according to the duration of time your function takes to run. There&amp;rsquo;s a free tier, too, and the first 1 million requests, plus a certain amount of compute time, are free. Roughly translated to running a Twitter bot that posts for you, say, twice a day, your monthly cost for using Lambda would total&amp;hellip; carry the one&amp;hellip; nothing. I&amp;rsquo;ve been running my Lambda function for a couple weeks now, completely free.&lt;/p&gt;
&lt;p&gt;When recently it came to me to take the reigns of the &lt;a href=&#34;https://twitter.com/freeCodeCampTO&#34;&gt;@freeCodeCampTO&lt;/a&gt; Twitter, I decided to employ a similar strategy, and also use this opportunity to document the process for you, dear reader.&lt;/p&gt;
&lt;p&gt;So if you&amp;rsquo;re currently using a full-time running instance for a task that could be served by a cron job, this is the article for you. I&amp;rsquo;ll cover how to write your function for Lambda, how to get it set up to run automatically, and as a sweet little bonus, a handy bash script that updates your function from the command line whenever you need to make a change. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;is-lambda-right-for-you&#34;&gt;Is Lambda right for you?&lt;/h1&gt;
&lt;p&gt;When I wrote the code for my Twitter bot in Go, I intended to have it run on an AWS instance and borrowed heavily from &lt;a href=&#34;https://github.com/campoy/justforfunc/tree/master/14-twitterbot&#34;&gt;Francesc&amp;rsquo;s awesome Just for Func episode&lt;/a&gt;. Some time later I modified it to randomly choose an article from my RSS feeds and tweet the link, twice a day. I wanted to do something similar for the @freeCodeCampTO bot, and have it tweet an inspiring quote about programming every morning.&lt;/p&gt;
&lt;p&gt;This is a good use case for Lambda because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The program should execute once&lt;/li&gt;
&lt;li&gt;It runs on a regular schedule, using time as a trigger&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t need to run constantly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The important thing to keep in mind is that Lambda runs a function once in response to an event that you define. The most widely applicable trigger is a simple cron expression, but there are many other trigger events you can hook up. You can get an overview &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;write-a-lambda-function&#34;&gt;Write a Lambda function&lt;/h1&gt;
&lt;p&gt;I found this really straightforward to do in Go. First, grab the &lt;a href=&#34;https://github.com/aws/aws-lambda-go&#34;&gt;aws-lambda-go&lt;/a&gt; library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/aws/aws-lambda-go/lambda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then make this your &lt;code&gt;func main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tweetFeed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;tweetFeed&lt;/code&gt; is the name of the function that makes everything happen. While I won&amp;rsquo;t go into writing the whole Twitter bot here, you can view my code &lt;a href=&#34;https://gist.github.com/victoriadrake/7859dab68df87e28f40d6715d08383c7&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-aws-lambda&#34;&gt;Setting up AWS Lambda&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m assuming you already have an AWS account. If not, first things first here: &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-create-your-function&#34;&gt;1. Create your function&lt;/h2&gt;
&lt;p&gt;Find AWS Lambda in the list of services, then look for this shiny button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-01.png#screenshot&#34; alt=&#34;Create function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to author a function from scratch. Name your function, then under &lt;strong&gt;Runtime&lt;/strong&gt; choose &amp;ldquo;Go 1.x&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Role name&lt;/strong&gt; write any name you like. It&amp;rsquo;s a required field but irrelevant for this use case.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Create function.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-02.png#screenshot&#34; alt=&#34;Author from scratch&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-configure-your-function&#34;&gt;2. Configure your function&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll see a screen for configuring your new function. Under &lt;strong&gt;Handler&lt;/strong&gt; enter the name of your Go program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-03.png#screenshot&#34; alt=&#34;Configure your function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you scroll down, you&amp;rsquo;ll see a spot to enter environment variables. This is a great place to enter the Twitter API tokens and secrets, using the variable names that your program expects. The AWS Lambda function will create the environment for you using the variables you provide here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-04.png#screenshot&#34; alt=&#34;Environment variables&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No further settings are necessary for this use case. Click &lt;strong&gt;Save&lt;/strong&gt; at the top of the page.&lt;/p&gt;
&lt;h2 id=&#34;3-upload-your-code&#34;&gt;3. Upload your code&lt;/h2&gt;
&lt;p&gt;You can upload your function code as a zip file on the configuration screen. Since we&amp;rsquo;re using Go, you&amp;rsquo;ll want to &lt;code&gt;go build&lt;/code&gt; first, then zip the resulting executable before uploading that to Lambda.&lt;/p&gt;
&lt;p&gt;&amp;hellip;Of course I&amp;rsquo;m not going to do that manually every time I want to tweak my function. That&amp;rsquo;s what &lt;code&gt;awscli&lt;/code&gt; and this bash script is for!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go build &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;zip fcc-tweet.zip fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;aws lambda update-function-code --function-name fcc-tweet --zip-file fileb://fcc-tweet.zip &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever I make a tweak, I just run &lt;code&gt;bash update.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not already using &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS Command Line Interface&lt;/a&gt;, do &lt;code&gt;pip install awscli&lt;/code&gt; and thank me later. Find instructions for getting set up and configured in a few minutes &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;here&lt;/a&gt; under &lt;strong&gt;Quick Configuration&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-test-your-function&#34;&gt;4. Test your function&lt;/h2&gt;
&lt;p&gt;Wanna see it go? Of course you do! Click &amp;ldquo;Configure test events&amp;rdquo; in the dropdown at the top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-05.png#screenshot&#34; alt=&#34;Configure test events&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since you&amp;rsquo;ll use a time-based trigger for this function, you don&amp;rsquo;t need to enter any code to define test events in the popup window. Simply write any name under &lt;strong&gt;Event name&lt;/strong&gt; and empty the JSON in the field below. Then click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-06.png#screenshot&#34; alt=&#34;Configuring an empty test event&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Test&lt;/strong&gt; at the top of the page, and if everything is working correctly you should see&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-07.png#screenshot&#34; alt=&#34;Test success notification&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-set-up-cloudwatch-events&#34;&gt;5. Set up CloudWatch Events&lt;/h2&gt;
&lt;p&gt;To run our function as we would a cron job - as a regularly scheduled time-based event - we&amp;rsquo;ll use CloudWatch. Click &lt;strong&gt;CloudWatch Events&lt;/strong&gt; in the &lt;strong&gt;Designer&lt;/strong&gt; sidebar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-08.png#screenshot&#34; alt=&#34;CloudWatch Events trigger&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Configure triggers&lt;/strong&gt;, you&amp;rsquo;ll create a new rule. Choose a descriptive name for your rule without spaces or punctuation, and ensure &lt;strong&gt;Schedule expression&lt;/strong&gt; is selected. Then input the time you want your program to run as a &lt;em&gt;rate expression&lt;/em&gt;, or cron expression.&lt;/p&gt;
&lt;p&gt;A cron expression looks like this: &lt;code&gt;cron(0 12 * * ? *)&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Minutes&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Day of month&lt;/th&gt;
&lt;th&gt;Month&lt;/th&gt;
&lt;th&gt;Day of week&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;In English&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Run at noon (UTC) every day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more on how to write your cron expressions, read &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html&#34;&gt;this.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To find out what the current time in UTC is, click &lt;a href=&#34;https://codepen.io/victoriadrake/full/OQabar/&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want your program to run twice a day, say once at 10am and again at 3pm, you&amp;rsquo;ll need to set two separate CloudWatch Events triggers and cron expression rules.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-09.png#screenshot&#34; alt=&#34;Set cron expression rule&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;watch-it-go&#34;&gt;Watch it go&lt;/h1&gt;
&lt;p&gt;That&amp;rsquo;s all you need to get your Lambda function up and running! Now you can sit back, relax, and do more important things than share your RSS links on Twitter.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Moving to a new domain without breaking old links with AWS &amp; Disqus</title><link>https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</link><pubDate>Wed, 10 Jan 2018 08:56:20 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</guid><description>I moved my site&#39;s blog to its own domain without breaking old links or losing comments. Here&#39;s how.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/cover_aws-moving_hu21a1b010075379d4e5c1954a648363b3_119465_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;I started blogging about my nomadic travels last year, and so far the habit has stuck. Like all side projects, I won&amp;rsquo;t typically invest heavily in setting up web properties before I can be reasonably certain that such an investment is worth my time or enjoyment. In other words: don&amp;rsquo;t buy the domain until you&amp;rsquo;ve proven to yourself that you&amp;rsquo;ll stick with it!&lt;/p&gt;
&lt;p&gt;After some months of regular posting I felt I was ready to commit (short courtship, I know, but we&amp;rsquo;re all adults here) and I bought a dedicated domain, &lt;a href=&#34;https://heronebag.com&#34;&gt;herOneBag.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until recently, my #NomadLyfe blog was just a subdirectory of my main personal site. Now it&amp;rsquo;s all grown up and ready to strike out into the world alone! Here&amp;rsquo;s the setup for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;li&gt;Disqus for comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like a walk-through for how to set up a new domain with this structure, it&amp;rsquo;s over here: &lt;a href=&#34;https://victoria.dev/verbose/aws-static-site/&#34;&gt;Hosting your static site with AWS S3, Route 53, and CloudFront&lt;/a&gt;. In this post, I&amp;rsquo;ll just detail how I managed to move my blog to the new site without breaking the old links or losing any comments.&lt;/p&gt;
&lt;h1 id=&#34;preserve-old-links-with-redirection-rules&#34;&gt;Preserve old links with redirection rules&lt;/h1&gt;
&lt;p&gt;I wanted to avoid breaking links that have been posted around the web by forwarding visitors to the new URL. The change looks like this:&lt;/p&gt;
&lt;p&gt;Old URL: &lt;code&gt;https://victoria.dev/meta/5-bag-lessons/&lt;/code&gt;&lt;br /&gt;
New URL: &lt;code&gt;https://heronebag.com/blog/5-bag-lessons/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see that the domain name as well as the subdirectory have changed, but the slug for the blog post remains the same. (I love static sites.)&lt;/p&gt;
&lt;p&gt;To redirect links from the old site, we&amp;rsquo;ll need to set redirection rules in the old site&amp;rsquo;s S3 bucket. AWS provides a way to set up a conditional redirect. This is set in the &amp;ldquo;Redirection rules&amp;rdquo; section of your S3 bucket&amp;rsquo;s properties, under &amp;ldquo;Static website hosting.&amp;rdquo; You can &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects&#34;&gt;find the documentation here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-redirect.png#screenshot&#34; alt=&#34;Redirection rules placement&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a few examples given, but none that represent the redirect I want. In addition to changing the prefix of the object key, we&amp;rsquo;re also changing the domain. The latter is achieved with the &lt;code&gt;&amp;lt;HostName&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;To redirect requests for the old blog URL to the new top level domain, we&amp;rsquo;ll use the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRules&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;KeyPrefixEquals&amp;gt;&lt;/span&gt;oldblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/KeyPrefixEquals&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;HostName&amp;gt;&lt;/span&gt;newdomain.com&lt;span class=&#34;nt&#34;&gt;&amp;lt;/HostName&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;newblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This rule ensures that requests for &lt;code&gt;olddomain.com/oldblog/specific-blog-post&lt;/code&gt; will redirect to &lt;code&gt;newdomain.com/newblog/specific-blog-post&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;migrate-disqus-comments&#34;&gt;Migrate Disqus comments&lt;/h1&gt;
&lt;p&gt;Disqus provides a tool for migrating the comment threads from your old blog site to the new one. You can find it in your Disqus admin tools at &lt;code&gt;your-short-name.disqus.com/admin/discussions/migrate/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To migrate posts from the old blog address to the new one, we&amp;rsquo;ll use the URL mapper tool. Click &amp;ldquo;Start URL mapper,&amp;rdquo; then &amp;ldquo;you can download a CSV here.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-disqus.png#screenshot&#34; alt=&#34;URL mapping for Disqus.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Disqus has decent instructions for how this tool works, and you can &lt;a href=&#34;https://help.disqus.com/customer/en/portal/articles/912757-url-mapper&#34;&gt;read them here.&lt;/a&gt; Basically, you&amp;rsquo;ll input the new blog URLs into the second column of the CSV file you downloaded, then pass it back to Disqus to process. If you&amp;rsquo;re using a program to edit the CSV, be sure to save the resulting file in CSV format.&lt;/p&gt;
&lt;p&gt;Unless you have a bazillion URLs, the tool works pretty quickly, and you&amp;rsquo;ll get an email when it&amp;rsquo;s finished. Don&amp;rsquo;t forget to update the name of your site in the Disqus admin, too.&lt;/p&gt;
&lt;h1 id=&#34;transfer-other-settings&#34;&gt;Transfer other settings&lt;/h1&gt;
&lt;p&gt;Update links in your social profiles and any other sites you may have around the web. If you&amp;rsquo;re using other services attached to your website like Google Analytics or IFTTT, don&amp;rsquo;t forget to update those details too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/cover_aws-moving_hu21a1b010075379d4e5c1954a648363b3_119465_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hosting your static site with AWS S3, Route 53, and CloudFront</title><link>https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</link><pubDate>Wed, 13 Dec 2017 20:46:12 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</guid><description>A guide to using Amazon Web Services to serve your site with HTTPS. For (almost) free.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/cover_aws-questions_hua0b9a94223402b1678baf2512b6d4b77_78246_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;Some time ago I decided to stop freeloading on GitHub pages and move one of my sites to Amazon Web Services (AWS). It turns out that I&amp;rsquo;m still mostly freeloading (yay free tier) so it amounted to a learning experience. Here are the components that let me host and serve the site at my custom domain with HTTPS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set all that up most of a year ago. At the time, I found the AWS documentation to be rather fragmented and inconvenient to follow - it was hard to find what you were looking for without knowing what a specific setting might be called, or where it was, or if it existed at all. When I recently set up a new site and stumbled through this process again, I didn&amp;rsquo;t find it any easier. Hopefully this post can help to collect the relevant information into a more easily followed process and serve as an accompanying guide to save future me (and you) some time.&lt;/p&gt;
&lt;p&gt;Rather than replace existing documentation, this post is meant to supplement it. Think of me as your cool tech-savvy friend on the phone with you at 4am, troubleshooting your website. (Please don&amp;rsquo;t actually call me at 4am.) I&amp;rsquo;ll walk through the set up while providing links for the documentation that was ultimately helpful (mostly so I can find it again later&amp;hellip;).&lt;/p&gt;
&lt;h1 id=&#34;hosting-a-static-site-with-amazon-s3-and-a-custom-domain&#34;&gt;Hosting a static site with Amazon S3 and a custom domain&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re starting from scratch, you&amp;rsquo;ll need an AWS account. It behooves you to get one, even if you don&amp;rsquo;t like paying for services - there&amp;rsquo;s a free tier that will cover most of the experimental stuff you&amp;rsquo;re going to want to do in the first year, and even the things I do pay for cost me less than a dollar a month. You can sign up at &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting your static site hosted and available at your custom domain is your first mission, should you choose to accept it. &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&#34;&gt;Your instructions are here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating the buckets for site hosting on S3 is the most straightforward part of this process in my opinion, and the AWS documentation walkthrough covers what you&amp;rsquo;ll need to do quite well. It gets a little unclear around &lt;em&gt;Step 3: Create and Configure Amazon Route 53 Hosted Zone&lt;/em&gt;, so come back and read on once you&amp;rsquo;ve reached that point. I&amp;rsquo;ll make some tea in the meantime.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Ready? Cool. See, I&amp;rsquo;m here for you.&lt;/p&gt;
&lt;h1 id=&#34;set-up-route-53&#34;&gt;Set up Route 53&lt;/h1&gt;
&lt;p&gt;The majority of the work in this section amounts to creating the correct record sets for your custom domain. If you&amp;rsquo;re already familiar with how record sets work, the documentation is a bit of a slog. Here&amp;rsquo;s how it should look when you&amp;rsquo;re finished:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-recordsets.png#screenshot&#34; alt=&#34;Route 53 record sets.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;NS&amp;rdquo; and &amp;ldquo;SOA&amp;rdquo; records are created automatically for you. The only records you need to create are the &amp;ldquo;A&amp;rdquo; records.&lt;/p&gt;
&lt;p&gt;Hop over to &lt;a href=&#34;https://console.aws.amazon.com/route53/home&#34;&gt;Route 53&lt;/a&gt; and follow &lt;a href=&#34;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html&#34;&gt;this walkthrough&lt;/a&gt; to create a &amp;ldquo;hosted zone.&amp;rdquo; The value of the &lt;strong&gt;NS&lt;/strong&gt; (Name Servers) records are what you&amp;rsquo;ll have to provide to your domain name registrar (wherever you bought your custom domain, such as this super subtle &lt;a href=&#34;https://affiliate.namecheap.com/?affId=109417&#34;&gt;Namecheap.com affiliate link&lt;/a&gt; right here.)&lt;/p&gt;
&lt;p&gt;If you created two buckets in the first section (one for &lt;code&gt;yourdomain.com&lt;/code&gt; and one for &lt;code&gt;www.yourdomain.com&lt;/code&gt;), you&amp;rsquo;ll need two separate A records in Route 53. Initially, these have the value of the endpoints for your matching S3 buckets (looks like &lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;). Later, you&amp;rsquo;ll change them to your CloudFront domain name.&lt;/p&gt;
&lt;p&gt;If you went with Namecheap as your registrar, &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record&#34;&gt;Step 4&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-namecheapdns.png#screenshot&#34; alt=&#34;Namecheap&#39;s Custom DNS settings.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Waiting is the hardest part&amp;hellip; I&amp;rsquo;ve gotten into the habit of working on another project or setting up the DNS change before going to bed so that changes have time to propagate without me feeling like I need to fiddle with it. ^^;&lt;/p&gt;
&lt;p&gt;When the transfer&amp;rsquo;s ready, you&amp;rsquo;ll see your site at &lt;code&gt;http://yourdomain.com&lt;/code&gt;. Next, you&amp;rsquo;ll want to set up CloudFront so that becomes &lt;code&gt;https://yourdomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;set-up-cloudfront-and-ssl&#34;&gt;Set up CloudFront and SSL&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-cloudfront-walkthrough.html&#34;&gt;Here are the instructions for setting up CloudFront.&lt;/a&gt; There are a few important points to make sure you don&amp;rsquo;t miss on the &amp;ldquo;Create Distribution&amp;rdquo; page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name:&lt;/strong&gt; Make sure to use your S3 bucket endpoint, and not select the bucket from the dropdown menu that appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewer Protocol Policy:&lt;/strong&gt; If you want requests for &lt;code&gt;http://yourdomain.com&lt;/code&gt; to always result in &lt;code&gt;https://yourdomain.com&lt;/code&gt;, choose &amp;ldquo;Redirect HTTP to HTTPS.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternate Domain Names:&lt;/strong&gt; Enter &lt;code&gt;yourdomain.com&lt;/code&gt; and &lt;code&gt;www.yourdomain.com&lt;/code&gt; on separate lines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL Certificate:&lt;/strong&gt; See below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; Enter the name of the html file that should be returned when your users go to &lt;code&gt;https://yourdomain.com&lt;/code&gt;. This is usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssl-certificate&#34;&gt;SSL Certificate&lt;/h2&gt;
&lt;p&gt;To show your content with HTTPS at your custom domain, you&amp;rsquo;ll need to choose &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can easily get an SSL Certificate with AWS Certificate Manager. Click on &amp;ldquo;Request or Import a Certificate with ACM&amp;rdquo; to get started in a new window.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request.html&#34;&gt;Here are instructions for setting up a certificate.&lt;/a&gt; I don&amp;rsquo;t think they&amp;rsquo;re very good, personally. Don&amp;rsquo;t worry, I got you.&lt;/p&gt;
&lt;p&gt;To account for &amp;ldquo;www.yourdomain.com&amp;rdquo; as well as any subdomains, you&amp;rsquo;ll want to add two domain names to the certificate, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmdomains.png#screenshot&#34; alt=&#34;Adding domain names to ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Next.&amp;rdquo; You&amp;rsquo;ll be asked to choose a validation method. Choose &amp;ldquo;DNS validation&amp;rdquo; and click &amp;ldquo;Review.&amp;rdquo; If everything is as it should be, click &amp;ldquo;Confirm and request.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a page, &amp;ldquo;Validation&amp;rdquo; that looks like this. You&amp;rsquo;ll have to click the little arrow next to both domain names to get the important information to show:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmvalidation.png#screenshot&#34; alt=&#34;Validation instructions for ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under both domain names, click the button for &amp;ldquo;Create record in Route 53.&amp;rdquo; This will automatically create a CNAME record set in Route 53 with the given values, which ACM will then check in order to validate that you own those domains. You could create the records manually, if you wanted to for some reason. I don&amp;rsquo;t know, maybe you&amp;rsquo;re killing time. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue.&amp;rdquo; You&amp;rsquo;ll see a console that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmcertificates.png#screenshot&#34; alt=&#34;List of certificates you own.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It may take some time for the validation to complete, at which point the &amp;ldquo;Pending validation&amp;rdquo; status will change to &amp;ldquo;Issued.&amp;rdquo; Again with the waiting. You can close this window to return to the CloudFront set up. Once the certificate is validated, you&amp;rsquo;ll see it in the dropdown menu under &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can click &amp;ldquo;Create Distribution&amp;rdquo; to finish setting up CloudFront.&lt;/p&gt;
&lt;p&gt;In your CloudFront Distributions console, you&amp;rsquo;ll see &amp;ldquo;In Progress&amp;rdquo; until AWS has done its thing. Once it&amp;rsquo;s done, it&amp;rsquo;ll change to &amp;ldquo;Deployed.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;one-last-thing&#34;&gt;One last thing&lt;/h2&gt;
&lt;p&gt;Return to your &lt;a href=&#34;https://console.aws.amazon.com/route53/&#34;&gt;Route 53 console&lt;/a&gt; and click on &amp;ldquo;Hosted zones&amp;rdquo; in the sidebar, then your domain name from the list. For both A records, change the &amp;ldquo;Alias Target&amp;rdquo; from the S3 endpoint to your CloudFront distribution domain, which should look something like &lt;code&gt;dj4p1rv6mvubz.cloudfront.net&lt;/code&gt;. It appears in the dropdown after you clear the field.&lt;/p&gt;
&lt;h1 id=&#34;you-re-done&#34;&gt;You&amp;rsquo;re done!&lt;/h1&gt;
&lt;p&gt;Well, usually. If you navigate to your new HTTPS domain and don&amp;rsquo;t see your beautiful new site where it should be, here are some things you can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check S3 bucket policy - ensure that the bucket for &lt;code&gt;yourdomain.com&lt;/code&gt; in the &lt;a href=&#34;https://s3.console.aws.amazon.com/s3/home&#34;&gt;S3 console&lt;/a&gt; shows &amp;ldquo;Public&amp;rdquo; in the &amp;ldquo;Access&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;Check S3 bucket index document - In the &amp;ldquo;Properties&amp;rdquo; tab for the bucket, then &amp;ldquo;Static website hosting&amp;rdquo;. Usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Check CloudFront Origin - the &amp;ldquo;Origin&amp;rdquo; column in the &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home&#34;&gt;CloudFront Console&lt;/a&gt; should show the S3 bucket&amp;rsquo;s endpoint (&lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;), not the bucket name (&lt;code&gt;yourdomain.com.s3.amazonaws.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Check CloudFront Default Root Object - clicking on the distribution name should take you to a details page that shows &amp;ldquo;Default Root Object&amp;rdquo; in the list with the value that you set, usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Wait. Sometimes changes take up to 48hrs to propagate. ¯\_(ツ)_/¯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope that helps you get set up with your new static site on AWS! Feel free to &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;share your link&lt;/a&gt; with me, I&amp;rsquo;d love to see what you&amp;rsquo;ve created. :)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/cover_aws-questions_hua0b9a94223402b1678baf2512b6d4b77_78246_640x0_resize_box_2.png" type="image/jpg"/></item></channel></rss>