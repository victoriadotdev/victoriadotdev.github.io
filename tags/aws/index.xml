<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Aws on Victoria Drake - victoria.dev</title><link>https://victoria.dev/tags/aws/</link><description>Recent content in Aws on Victoria Drake - victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Thu, 12 Apr 2018 10:51:15 -0500</lastBuildDate><atom:link href="https://victoria.dev/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I&#39;m automatically deleting my old tweets using AWS Lambda</title><link>https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</link><pubDate>Thu, 12 Apr 2018 10:51:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</guid><description>From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/ephemeral_hu7a60cd7f63e776114f0719c46b26bd2e_46291_640x0_resize_q75_box.jpg" width="640" height="320"/>
&lt;p&gt;From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/#ephemeral-tweets&#34;&gt;&lt;em&gt;Click here to skip to the code part.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;stuff-and-opinions&#34;&gt;Stuff and opinions&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve only been a one-bag nomad for a little over a year and a half. Before that, I lived as most people do in an apartment or a house. I owned furniture, more clothing than I strictly needed, and enough &amp;ldquo;stuff&amp;rdquo; to fill at least a few moving boxes. If I went to live somewhere else, moving for school or family or work, I packed up all my things and brought them with me. Over the years, I accumulated more and more stuff.&lt;/p&gt;
&lt;p&gt;Adopting what many would call a minimalist lifestyle has rapidly changed a lot of my longstanding views. Giving away all my stuff (an idea I once thought to be interesting in principle but practically a little bit ridiculous) has become normal. It&amp;rsquo;s normal for me, now, to not own things that I don&amp;rsquo;t use on a regular basis. I don&amp;rsquo;t keep wall shelves packed with old books or dishes or clothing or childhood toys because those items aren&amp;rsquo;t relevant to me anymore. I just keep fond memories, instead.&lt;/p&gt;
&lt;p&gt;Imagine, for a moment, that I still lived in a house. Imagine that in that house, on the fridge, is a drawing I made when I was six-years-old. In the bottom right corner of that drawing scribbled in green crayon are the words &amp;ldquo;broccoli is dumb - Victoria, Age 6.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you were in my house and saw that drawing on the fridge, would you assume that the statement &amp;ldquo;broccoli is dumb&amp;rdquo; comprised an accurate and current account of my opinions on broccoli? Of course not. I was six when I wrote that. I&amp;rsquo;ve had plenty of time to change my mind.&lt;/p&gt;
&lt;h1 id=&#34;social-media-isn-t-social&#34;&gt;Social media isn&amp;rsquo;t social&lt;/h1&gt;
&lt;p&gt;I have a friend whom I&amp;rsquo;ve known since we were both in kindergarten. We went through grade school together, then spoke to and saw each other on infrequent occasions across the years. We&amp;rsquo;re both adults now. Sometimes when we chat, we&amp;rsquo;ll recall some amusing memory from when we were younger. The nature of memory being what it is, I have no illusion that what we recall is recounted with much accuracy. Our impressions of things that happened - mistakes we made and moments of victory alike - are coloured by the experiences we&amp;rsquo;ve had since then, and all the things we&amp;rsquo;ve learned. An awkward moment at a school colleague&amp;rsquo;s birthday party becomes an example of a child learning to socialize, instead of the world-ending moment of embarrassment it probably felt like at the time.&lt;/p&gt;
&lt;p&gt;This is how memory works. In a sense, it gets updated, as well it should. People living in small communities remember things that their neighbour did many years ago, but recall them in the context of who their neighbour is now, and what their current relationship is like. This re-colouring of history is an important part of how people &lt;a href=&#34;https://www.smithsonianmag.com/science-nature/how-our-brains-make-memories-14466850/&#34;&gt;heal&lt;/a&gt;, &lt;a href=&#34;http://news.feinberg.northwestern.edu/2014/02/memory_rewrite/&#34;&gt;make good decisions&lt;/a&gt;, and &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709095/&#34;&gt;socialize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Social media does not do this. Your perfectly preserved tweet from five days or five years ago can be recalled with absolute accuracy. For most people, this is not particularly worrying. We tend to tweet about pretty mundane things - things that pop into mind when we&amp;rsquo;re bored and want someone to notice us. Individually, usually, our old tweets are pretty insignificant. In aggregate, however, they paint a pretty complete picture of a person&amp;rsquo;s random, unintentionally telling thoughts. This is the problem.&lt;/p&gt;
&lt;p&gt;The assumption made of things written in social media and on Twitter specifically is a very different assumption than you might make about someone&amp;rsquo;s notepad scribble from last week. I&amp;rsquo;m not endeavoring to speculate why - I&amp;rsquo;ve just seen enough cases of someone getting publicly flogged for something they posted years ago to know that it does happen. This is weird. If you wouldn&amp;rsquo;t assume that a notepad scribble from last week or a crayon drawing from decades ago reflects the essence of who someone is &lt;em&gt;now,&lt;/em&gt; why would you assume that an old tweet does?&lt;/p&gt;
&lt;p&gt;You are not the same person you were last month - you&amp;rsquo;ve seen things, read things, understood and learned things that have, in some small way, changed you. While a person may have the same sense of self and identity through most of their life, even this grows and changes over the years. We change our opinions, our desires, our habits. We are not stagnant beings, and we should not let ourselves be represented as such, however unintentionally.&lt;/p&gt;
&lt;h1 id=&#34;ephemeral-tweets&#34;&gt;Ephemeral tweets&lt;/h1&gt;
&lt;p&gt;If you look at my Twitter profile page today, you&amp;rsquo;ll see fewer tweets there than you have fingers (I hope). I&amp;rsquo;m using &lt;a href=&#34;https://github.com/victoriadrake/ephemeral&#34;&gt;ephemeral&lt;/a&gt; - a lightweight utility I wrote for use on &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; - to delete all my tweets older than a few days. I&amp;rsquo;m doing this for the same reason that I don&amp;rsquo;t hang on to stuff that I no longer use - that stuff isn&amp;rsquo;t relevant to me anymore. It doesn&amp;rsquo;t represent me, either.&lt;/p&gt;
&lt;p&gt;The code that makes up ephemeral is written in Go. AWS Lambda creates an environment for each Lambda function, so ephemeral utilizes environment variables for your private Twitter API keys and the maximum age of the tweets you want to keep, represented in hours, like &lt;code&gt;72h&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessTokenSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;maxTweetAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MAX_TWEET_AGE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;logger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;missing required environment variable &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program uses the &lt;a href=&#34;https://github.com/ChimeraCoder/anaconda&#34;&gt;anaconda&lt;/a&gt; library. It fetches your timeline up to the Twitter API&amp;rsquo;s limit of 200 tweets per request, then compares each tweet&amp;rsquo;s date of creation to your &lt;code&gt;MAX_TWEET_AGE&lt;/code&gt; variable to decide whether it&amp;rsquo;s old enough to be deleted. After deleting all the expired tweets, the Lambda function terminates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deleteFromTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anaconda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TwitterApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not get timeline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CreatedAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Couldn&amp;#39;t parse time &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DeleteTweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DELETED: Age - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to delete! &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No more tweets to delete.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read the full code &lt;a href=&#34;https://github.com/victoriadrake/ephemeral/blob/master/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a use case like this, AWS Lambda has a free tier that costs nothing. If you&amp;rsquo;re any level of developer, it&amp;rsquo;s an extremely useful tool to become familiar with. For a full walkthrough with screenshots of how to set up a Lambda function that tweets for you, you can read &lt;a href=&#34;https://victoria.dev/verbose/free-twitter-bot-aws-lambda/&#34;&gt;this article&lt;/a&gt;. The set up for ephemeral is the same, it just has an opposite function. :)&lt;/p&gt;
&lt;p&gt;I forked ephemeral from Adam Drake&amp;rsquo;s &lt;a href=&#34;https://github.com/adamdrake/harold&#34;&gt;Harold&lt;/a&gt;, a Twitter tool that has many useful functions beyond keeping your timeline trimmed. If you have more than 200 tweets to delete at first pass, please use Harold to do that first. You can run Harold with the &lt;code&gt;deletetimeline&lt;/code&gt; flag from your terminal.&lt;/p&gt;
&lt;p&gt;You may like to first &lt;a href=&#34;https://twitter.com/settings/your_twitter_data&#34;&gt;download all your tweets before deleting them&lt;/a&gt; for sentimental value.&lt;/p&gt;
&lt;h1 id=&#34;why-use-twitter-at-all&#34;&gt;Why use Twitter at all?&lt;/h1&gt;
&lt;p&gt;In anticipation of the question, let me say that yes, I do use Twitter besides just as a bucket for my Lambda functions to fill and empty. It has its benefits, most related to what I perceive to be its original intended purpose: to be a means of near-instant communication for short, digestible pieces of information reaching a widespread pool of people.&lt;/p&gt;
&lt;p&gt;I use it as a way to keep tabs on what&amp;rsquo;s happening &lt;em&gt;right now.&lt;/em&gt; I use it to comment on, joke about, and commiserate with things tweeted by the people I follow &lt;em&gt;right now.&lt;/em&gt; By keeping my timeline restricted to only the most recent few days, I feel like I&amp;rsquo;m using Twitter more like it was meant to be used: a way to join the conversation and see what&amp;rsquo;s happening in the world &lt;em&gt;right now&lt;/em&gt; - instead of just another place to amass more &amp;ldquo;stuff.&amp;rdquo;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/ephemeral_hu7a60cd7f63e776114f0719c46b26bd2e_46291_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Running a free Twitter bot on AWS Lambda</title><link>https://victoria.dev/verbose/running-a-free-twitter-bot-on-aws-lambda/</link><pubDate>Mon, 05 Mar 2018 10:29:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/running-a-free-twitter-bot-on-aws-lambda/</guid><description>How to save some time with automated link sharing on Twitter - for free!</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;If you read &lt;a href=&#34;https://victoria.dev/verbose/about-time/&#34;&gt;About time&lt;/a&gt;, you&amp;rsquo;ll know that I&amp;rsquo;m a big believer in spending time now on building things that save time in the future. To this end I built a simple Twitter bot in Go that would occasionally post links to my articles and keep my account interesting even when I&amp;rsquo;m too busy to use it. The tweets help drive traffic to my sites, and I don&amp;rsquo;t have to lift a finger.&lt;/p&gt;
&lt;p&gt;I ran the bot on an Amazon EC2 instance for about a month. My AWS usage has historically been pretty inexpensive (less than the price of a coffee in most of North America), so I was surprised when the little instance I was using racked up a bill 90% bigger than the month before. I don&amp;rsquo;t think AWS is expensive, to be clear, but still&amp;hellip; I&amp;rsquo;m cheap. I want my Twitter bot, and I want it for less.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d been meaning to explore AWS Lamda, and figured this was a good opportunity. Unlike an EC2 instance that is constantly running (and charging you for it), Lambda charges you per request and according to the duration of time your function takes to run. There&amp;rsquo;s a free tier, too, and the first 1 million requests, plus a certain amount of compute time, are free. Roughly translated to running a Twitter bot that posts for you, say, twice a day, your monthly cost for using Lambda would total&amp;hellip; carry the one&amp;hellip; nothing. I&amp;rsquo;ve been running my Lambda function for a couple weeks now, completely free.&lt;/p&gt;
&lt;p&gt;When recently it came to me to take the reigns of the &lt;a href=&#34;https://twitter.com/freeCodeCampTO&#34;&gt;@freeCodeCampTO&lt;/a&gt; Twitter, I decided to employ a similar strategy, and also use this opportunity to document the process for you, dear reader.&lt;/p&gt;
&lt;p&gt;So if you&amp;rsquo;re currently using a full-time running instance for a task that could be served by a cron job, this is the article for you. I&amp;rsquo;ll cover how to write your function for Lambda, how to get it set up to run automatically, and as a sweet little bonus, a handy bash script that updates your function from the command line whenever you need to make a change. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;is-lambda-right-for-you&#34;&gt;Is Lambda right for you?&lt;/h1&gt;
&lt;p&gt;When I wrote the code for my Twitter bot in Go, I intended to have it run on an AWS instance and borrowed heavily from &lt;a href=&#34;https://github.com/campoy/justforfunc/tree/master/14-twitterbot&#34;&gt;Francesc&amp;rsquo;s awesome Just for Func episode&lt;/a&gt;. Some time later I modified it to randomly choose an article from my RSS feeds and tweet the link, twice a day. I wanted to do something similar for the @freeCodeCampTO bot, and have it tweet an inspiring quote about programming every morning.&lt;/p&gt;
&lt;p&gt;This is a good use case for Lambda because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The program should execute once&lt;/li&gt;
&lt;li&gt;It runs on a regular schedule, using time as a trigger&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t need to run constantly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The important thing to keep in mind is that Lambda runs a function once in response to an event that you define. The most widely applicable trigger is a simple cron expression, but there are many other trigger events you can hook up. You can get an overview &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;write-a-lambda-function&#34;&gt;Write a Lambda function&lt;/h1&gt;
&lt;p&gt;I found this really straightforward to do in Go. First, grab the &lt;a href=&#34;https://github.com/aws/aws-lambda-go&#34;&gt;aws-lambda-go&lt;/a&gt; library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/aws/aws-lambda-go/lambda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then make this your &lt;code&gt;func main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tweetFeed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;tweetFeed&lt;/code&gt; is the name of the function that makes everything happen. While I won&amp;rsquo;t go into writing the whole Twitter bot here, you can view my code &lt;a href=&#34;https://gist.github.com/victoriadrake/7859dab68df87e28f40d6715d08383c7&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-aws-lambda&#34;&gt;Setting up AWS Lambda&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m assuming you already have an AWS account. If not, first things first here: &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-create-your-function&#34;&gt;1. Create your function&lt;/h2&gt;
&lt;p&gt;Find AWS Lambda in the list of services, then look for this shiny button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-01.png#screenshot&#34; alt=&#34;Create function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to author a function from scratch. Name your function, then under &lt;strong&gt;Runtime&lt;/strong&gt; choose &amp;ldquo;Go 1.x&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Role name&lt;/strong&gt; write any name you like. It&amp;rsquo;s a required field but irrelevant for this use case.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Create function.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-02.png#screenshot&#34; alt=&#34;Author from scratch&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-configure-your-function&#34;&gt;2. Configure your function&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll see a screen for configuring your new function. Under &lt;strong&gt;Handler&lt;/strong&gt; enter the name of your Go program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-03.png#screenshot&#34; alt=&#34;Configure your function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you scroll down, you&amp;rsquo;ll see a spot to enter environment variables. This is a great place to enter the Twitter API tokens and secrets, using the variable names that your program expects. The AWS Lambda function will create the environment for you using the variables you provide here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-04.png#screenshot&#34; alt=&#34;Environment variables&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No further settings are necessary for this use case. Click &lt;strong&gt;Save&lt;/strong&gt; at the top of the page.&lt;/p&gt;
&lt;h2 id=&#34;3-upload-your-code&#34;&gt;3. Upload your code&lt;/h2&gt;
&lt;p&gt;You can upload your function code as a zip file on the configuration screen. Since we&amp;rsquo;re using Go, you&amp;rsquo;ll want to &lt;code&gt;go build&lt;/code&gt; first, then zip the resulting executable before uploading that to Lambda.&lt;/p&gt;
&lt;p&gt;&amp;hellip;Of course I&amp;rsquo;m not going to do that manually every time I want to tweak my function. That&amp;rsquo;s what &lt;code&gt;awscli&lt;/code&gt; and this bash script is for!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go build &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;zip fcc-tweet.zip fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;aws lambda update-function-code --function-name fcc-tweet --zip-file fileb://fcc-tweet.zip &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever I make a tweak, I just run &lt;code&gt;bash update.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not already using &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS Command Line Interface&lt;/a&gt;, do &lt;code&gt;pip install awscli&lt;/code&gt; and thank me later. Find instructions for getting set up and configured in a few minutes &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;here&lt;/a&gt; under &lt;strong&gt;Quick Configuration&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-test-your-function&#34;&gt;4. Test your function&lt;/h2&gt;
&lt;p&gt;Wanna see it go? Of course you do! Click &amp;ldquo;Configure test events&amp;rdquo; in the dropdown at the top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-05.png#screenshot&#34; alt=&#34;Configure test events&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since you&amp;rsquo;ll use a time-based trigger for this function, you don&amp;rsquo;t need to enter any code to define test events in the popup window. Simply write any name under &lt;strong&gt;Event name&lt;/strong&gt; and empty the JSON in the field below. Then click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-06.png#screenshot&#34; alt=&#34;Configuring an empty test event&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Test&lt;/strong&gt; at the top of the page, and if everything is working correctly you should see&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-07.png#screenshot&#34; alt=&#34;Test success notification&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-set-up-cloudwatch-events&#34;&gt;5. Set up CloudWatch Events&lt;/h2&gt;
&lt;p&gt;To run our function as we would a cron job - as a regularly scheduled time-based event - we&amp;rsquo;ll use CloudWatch. Click &lt;strong&gt;CloudWatch Events&lt;/strong&gt; in the &lt;strong&gt;Designer&lt;/strong&gt; sidebar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-08.png#screenshot&#34; alt=&#34;CloudWatch Events trigger&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Configure triggers&lt;/strong&gt;, you&amp;rsquo;ll create a new rule. Choose a descriptive name for your rule without spaces or punctuation, and ensure &lt;strong&gt;Schedule expression&lt;/strong&gt; is selected. Then input the time you want your program to run as a &lt;em&gt;rate expression&lt;/em&gt;, or cron expression.&lt;/p&gt;
&lt;p&gt;A cron expression looks like this: &lt;code&gt;cron(0 12 * * ? *)&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Minutes&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Day of month&lt;/th&gt;
&lt;th&gt;Month&lt;/th&gt;
&lt;th&gt;Day of week&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;In English&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Run at noon (UTC) every day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more on how to write your cron expressions, read &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html&#34;&gt;this.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To find out what the current time in UTC is, click &lt;a href=&#34;https://codepen.io/victoriadrake/full/OQabar/&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want your program to run twice a day, say once at 10am and again at 3pm, you&amp;rsquo;ll need to set two separate CloudWatch Events triggers and cron expression rules.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-09.png#screenshot&#34; alt=&#34;Set cron expression rule&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;watch-it-go&#34;&gt;Watch it go&lt;/h1&gt;
&lt;p&gt;That&amp;rsquo;s all you need to get your Lambda function up and running! Now you can sit back, relax, and do more important things than share your RSS links on Twitter.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Moving to a new domain without breaking old links with AWS &amp; Disqus</title><link>https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</link><pubDate>Wed, 10 Jan 2018 08:56:20 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</guid><description>I moved my site&#39;s blog to its own domain without breaking old links or losing comments. Here&#39;s how.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/aws-disqus_hucedde38cd1f739c46e3bccc9c4f34706_35414_640x0_resize_box_2.png" width="640" height="252"/>
&lt;p&gt;I started blogging about my nomadic travels last year, and so far the habit has stuck. Like all side projects, I won&amp;rsquo;t typically invest heavily in setting up web properties before I can be reasonably certain that such an investment is worth my time or enjoyment. In other words: don&amp;rsquo;t buy the domain until you&amp;rsquo;ve proven to yourself that you&amp;rsquo;ll stick with it!&lt;/p&gt;
&lt;p&gt;After some months of regular posting I felt I was ready to commit (short courtship, I know, but we&amp;rsquo;re all adults here) and I bought a dedicated domain, &lt;a href=&#34;https://heronebag.com&#34;&gt;herOneBag.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until recently, my #NomadLyfe blog was just a subdirectory of my main personal site. Now it&amp;rsquo;s all grown up and ready to strike out into the world alone! Here&amp;rsquo;s the setup for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;li&gt;Disqus for comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like a walk-through for how to set up a new domain with this structure, it&amp;rsquo;s over here: &lt;a href=&#34;https://victoria.dev/verbose/aws-static-site/&#34;&gt;Hosting your static site with AWS S3, Route 53, and CloudFront&lt;/a&gt;. In this post, I&amp;rsquo;ll just detail how I managed to move my blog to the new site without breaking the old links or losing any comments.&lt;/p&gt;
&lt;h1 id=&#34;preserve-old-links-with-redirection-rules&#34;&gt;Preserve old links with redirection rules&lt;/h1&gt;
&lt;p&gt;I wanted to avoid breaking links that have been posted around the web by forwarding visitors to the new URL. The change looks like this:&lt;/p&gt;
&lt;p&gt;Old URL: &lt;code&gt;https://victoria.dev/meta/5-bag-lessons/&lt;/code&gt;&lt;br /&gt;
New URL: &lt;code&gt;https://heronebag.com/blog/5-bag-lessons/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see that the domain name as well as the subdirectory have changed, but the slug for the blog post remains the same. (I love static sites.)&lt;/p&gt;
&lt;p&gt;To redirect links from the old site, we&amp;rsquo;ll need to set redirection rules in the old site&amp;rsquo;s S3 bucket. AWS provides a way to set up a conditional redirect. This is set in the &amp;ldquo;Redirection rules&amp;rdquo; section of your S3 bucket&amp;rsquo;s properties, under &amp;ldquo;Static website hosting.&amp;rdquo; You can &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects&#34;&gt;find the documentation here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-redirect.png#screenshot&#34; alt=&#34;Redirection rules placement&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a few examples given, but none that represent the redirect I want. In addition to changing the prefix of the object key, we&amp;rsquo;re also changing the domain. The latter is achieved with the &lt;code&gt;&amp;lt;HostName&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;To redirect requests for the old blog URL to the new top level domain, we&amp;rsquo;ll use the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRules&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;KeyPrefixEquals&amp;gt;&lt;/span&gt;oldblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/KeyPrefixEquals&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;HostName&amp;gt;&lt;/span&gt;newdomain.com&lt;span class=&#34;nt&#34;&gt;&amp;lt;/HostName&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;newblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This rule ensures that requests for &lt;code&gt;olddomain.com/oldblog/specific-blog-post&lt;/code&gt; will redirect to &lt;code&gt;newdomain.com/newblog/specific-blog-post&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;migrate-disqus-comments&#34;&gt;Migrate Disqus comments&lt;/h1&gt;
&lt;p&gt;Disqus provides a tool for migrating the comment threads from your old blog site to the new one. You can find it in your Disqus admin tools at &lt;code&gt;your-short-name.disqus.com/admin/discussions/migrate/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To migrate posts from the old blog address to the new one, we&amp;rsquo;ll use the URL mapper tool. Click &amp;ldquo;Start URL mapper,&amp;rdquo; then &amp;ldquo;you can download a CSV here.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-disqus.png#screenshot&#34; alt=&#34;URL mapping for Disqus.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Disqus has decent instructions for how this tool works, and you can &lt;a href=&#34;https://help.disqus.com/customer/en/portal/articles/912757-url-mapper&#34;&gt;read them here.&lt;/a&gt; Basically, you&amp;rsquo;ll input the new blog URLs into the second column of the CSV file you downloaded, then pass it back to Disqus to process. If you&amp;rsquo;re using a program to edit the CSV, be sure to save the resulting file in CSV format.&lt;/p&gt;
&lt;p&gt;Unless you have a bazillion URLs, the tool works pretty quickly, and you&amp;rsquo;ll get an email when it&amp;rsquo;s finished. Don&amp;rsquo;t forget to update the name of your site in the Disqus admin, too.&lt;/p&gt;
&lt;h1 id=&#34;transfer-other-settings&#34;&gt;Transfer other settings&lt;/h1&gt;
&lt;p&gt;Update links in your social profiles and any other sites you may have around the web. If you&amp;rsquo;re using other services attached to your website like Google Analytics or IFTTT, don&amp;rsquo;t forget to update those details too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/aws-disqus_hucedde38cd1f739c46e3bccc9c4f34706_35414_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hosting your static site with AWS S3, Route 53, and CloudFront</title><link>https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</link><pubDate>Wed, 13 Dec 2017 20:46:12 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</guid><description>A guide to using Amazon Web Services to serve your site with HTTPS. For (almost) free.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/aws-acmcertificates_huac5689bd49ae0e9521775d5c4704e40f_49209_640x0_resize_box_2.png" width="640" height="353"/>
&lt;p&gt;Some time ago I decided to stop freeloading on GitHub pages and move one of my sites to Amazon Web Services (AWS). It turns out that I&amp;rsquo;m still mostly freeloading (yay free tier) so it amounted to a learning experience. Here are the components that let me host and serve the site at my custom domain with HTTPS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set all that up most of a year ago. At the time, I found the AWS documentation to be rather fragmented and inconvenient to follow - it was hard to find what you were looking for without knowing what a specific setting might be called, or where it was, or if it existed at all. When I recently set up a new site and stumbled through this process again, I didn&amp;rsquo;t find it any easier. Hopefully this post can help to collect the relevant information into a more easily followed process and serve as an accompanying guide to save future me (and you) some time.&lt;/p&gt;
&lt;p&gt;Rather than replace existing documentation, this post is meant to supplement it. Think of me as your cool tech-savvy friend on the phone with you at 4am, troubleshooting your website. (Please don&amp;rsquo;t actually call me at 4am.) I&amp;rsquo;ll walk through the set up while providing links for the documentation that was ultimately helpful (mostly so I can find it again later&amp;hellip;).&lt;/p&gt;
&lt;h1 id=&#34;hosting-a-static-site-with-amazon-s3-and-a-custom-domain&#34;&gt;Hosting a static site with Amazon S3 and a custom domain&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re starting from scratch, you&amp;rsquo;ll need an AWS account. It behooves you to get one, even if you don&amp;rsquo;t like paying for services - there&amp;rsquo;s a free tier that will cover most of the experimental stuff you&amp;rsquo;re going to want to do in the first year, and even the things I do pay for cost me less than a dollar a month. You can sign up at &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting your static site hosted and available at your custom domain is your first mission, should you choose to accept it. &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&#34;&gt;Your instructions are here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating the buckets for site hosting on S3 is the most straightforward part of this process in my opinion, and the AWS documentation walkthrough covers what you&amp;rsquo;ll need to do quite well. It gets a little unclear around &lt;em&gt;Step 3: Create and Configure Amazon Route 53 Hosted Zone&lt;/em&gt;, so come back and read on once you&amp;rsquo;ve reached that point. I&amp;rsquo;ll make some tea in the meantime.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Ready? Cool. See, I&amp;rsquo;m here for you.&lt;/p&gt;
&lt;h1 id=&#34;set-up-route-53&#34;&gt;Set up Route 53&lt;/h1&gt;
&lt;p&gt;The majority of the work in this section amounts to creating the correct record sets for your custom domain. If you&amp;rsquo;re already familiar with how record sets work, the documentation is a bit of a slog. Here&amp;rsquo;s how it should look when you&amp;rsquo;re finished:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-recordsets.png#screenshot&#34; alt=&#34;Route 53 record sets.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;NS&amp;rdquo; and &amp;ldquo;SOA&amp;rdquo; records are created automatically for you. The only records you need to create are the &amp;ldquo;A&amp;rdquo; records.&lt;/p&gt;
&lt;p&gt;Hop over to &lt;a href=&#34;https://console.aws.amazon.com/route53/home&#34;&gt;Route 53&lt;/a&gt; and follow &lt;a href=&#34;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html&#34;&gt;this walkthrough&lt;/a&gt; to create a &amp;ldquo;hosted zone.&amp;rdquo; The value of the &lt;strong&gt;NS&lt;/strong&gt; (Name Servers) records are what you&amp;rsquo;ll have to provide to your domain name registrar (wherever you bought your custom domain, such as this super subtle &lt;a href=&#34;https://affiliate.namecheap.com/?affId=109417&#34;&gt;Namecheap.com affiliate link&lt;/a&gt; right here.)&lt;/p&gt;
&lt;p&gt;If you created two buckets in the first section (one for &lt;code&gt;yourdomain.com&lt;/code&gt; and one for &lt;code&gt;www.yourdomain.com&lt;/code&gt;), you&amp;rsquo;ll need two separate A records in Route 53. Initially, these have the value of the endpoints for your matching S3 buckets (looks like &lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;). Later, you&amp;rsquo;ll change them to your CloudFront domain name.&lt;/p&gt;
&lt;p&gt;If you went with Namecheap as your registrar, &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record&#34;&gt;Step 4&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-namecheapdns.png#screenshot&#34; alt=&#34;Namecheap&#39;s Custom DNS settings.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Waiting is the hardest part&amp;hellip; I&amp;rsquo;ve gotten into the habit of working on another project or setting up the DNS change before going to bed so that changes have time to propagate without me feeling like I need to fiddle with it. ^^;&lt;/p&gt;
&lt;p&gt;When the transfer&amp;rsquo;s ready, you&amp;rsquo;ll see your site at &lt;code&gt;http://yourdomain.com&lt;/code&gt;. Next, you&amp;rsquo;ll want to set up CloudFront so that becomes &lt;code&gt;https://yourdomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;set-up-cloudfront-and-ssl&#34;&gt;Set up CloudFront and SSL&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-cloudfront-walkthrough.html&#34;&gt;Here are the instructions for setting up CloudFront.&lt;/a&gt; There are a few important points to make sure you don&amp;rsquo;t miss on the &amp;ldquo;Create Distribution&amp;rdquo; page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name:&lt;/strong&gt; Make sure to use your S3 bucket endpoint, and not select the bucket from the dropdown menu that appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewer Protocol Policy:&lt;/strong&gt; If you want requests for &lt;code&gt;http://yourdomain.com&lt;/code&gt; to always result in &lt;code&gt;https://yourdomain.com&lt;/code&gt;, choose &amp;ldquo;Redirect HTTP to HTTPS.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternate Domain Names:&lt;/strong&gt; Enter &lt;code&gt;yourdomain.com&lt;/code&gt; and &lt;code&gt;www.yourdomain.com&lt;/code&gt; on separate lines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL Certificate:&lt;/strong&gt; See below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; Enter the name of the html file that should be returned when your users go to &lt;code&gt;https://yourdomain.com&lt;/code&gt;. This is usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssl-certificate&#34;&gt;SSL Certificate&lt;/h2&gt;
&lt;p&gt;To show your content with HTTPS at your custom domain, you&amp;rsquo;ll need to choose &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can easily get an SSL Certificate with AWS Certificate Manager. Click on &amp;ldquo;Request or Import a Certificate with ACM&amp;rdquo; to get started in a new window.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request.html&#34;&gt;Here are instructions for setting up a certificate.&lt;/a&gt; I don&amp;rsquo;t think they&amp;rsquo;re very good, personally. Don&amp;rsquo;t worry, I got you.&lt;/p&gt;
&lt;p&gt;To account for &amp;ldquo;www.yourdomain.com&amp;rdquo; as well as any subdomains, you&amp;rsquo;ll want to add two domain names to the certificate, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmdomains.png#screenshot&#34; alt=&#34;Adding domain names to ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Next.&amp;rdquo; You&amp;rsquo;ll be asked to choose a validation method. Choose &amp;ldquo;DNS validation&amp;rdquo; and click &amp;ldquo;Review.&amp;rdquo; If everything is as it should be, click &amp;ldquo;Confirm and request.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a page, &amp;ldquo;Validation&amp;rdquo; that looks like this. You&amp;rsquo;ll have to click the little arrow next to both domain names to get the important information to show:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmvalidation.png#screenshot&#34; alt=&#34;Validation instructions for ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under both domain names, click the button for &amp;ldquo;Create record in Route 53.&amp;rdquo; This will automatically create a CNAME record set in Route 53 with the given values, which ACM will then check in order to validate that you own those domains. You could create the records manually, if you wanted to for some reason. I don&amp;rsquo;t know, maybe you&amp;rsquo;re killing time. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue.&amp;rdquo; You&amp;rsquo;ll see a console that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmcertificates.png#screenshot&#34; alt=&#34;List of certificates you own.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It may take some time for the validation to complete, at which point the &amp;ldquo;Pending validation&amp;rdquo; status will change to &amp;ldquo;Issued.&amp;rdquo; Again with the waiting. You can close this window to return to the CloudFront set up. Once the certificate is validated, you&amp;rsquo;ll see it in the dropdown menu under &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can click &amp;ldquo;Create Distribution&amp;rdquo; to finish setting up CloudFront.&lt;/p&gt;
&lt;p&gt;In your CloudFront Distributions console, you&amp;rsquo;ll see &amp;ldquo;In Progress&amp;rdquo; until AWS has done its thing. Once it&amp;rsquo;s done, it&amp;rsquo;ll change to &amp;ldquo;Deployed.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;one-last-thing&#34;&gt;One last thing&lt;/h2&gt;
&lt;p&gt;Return to your &lt;a href=&#34;https://console.aws.amazon.com/route53/&#34;&gt;Route 53 console&lt;/a&gt; and click on &amp;ldquo;Hosted zones&amp;rdquo; in the sidebar, then your domain name from the list. For both A records, change the &amp;ldquo;Alias Target&amp;rdquo; from the S3 endpoint to your CloudFront distribution domain, which should look something like &lt;code&gt;dj4p1rv6mvubz.cloudfront.net&lt;/code&gt;. It appears in the dropdown after you clear the field.&lt;/p&gt;
&lt;h1 id=&#34;you-re-done&#34;&gt;You&amp;rsquo;re done!&lt;/h1&gt;
&lt;p&gt;Well, usually. If you navigate to your new HTTPS domain and don&amp;rsquo;t see your beautiful new site where it should be, here are some things you can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check S3 bucket policy - ensure that the bucket for &lt;code&gt;yourdomain.com&lt;/code&gt; in the &lt;a href=&#34;https://s3.console.aws.amazon.com/s3/home&#34;&gt;S3 console&lt;/a&gt; shows &amp;ldquo;Public&amp;rdquo; in the &amp;ldquo;Access&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;Check S3 bucket index document - In the &amp;ldquo;Properties&amp;rdquo; tab for the bucket, then &amp;ldquo;Static website hosting&amp;rdquo;. Usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Check CloudFront Origin - the &amp;ldquo;Origin&amp;rdquo; column in the &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home&#34;&gt;CloudFront Console&lt;/a&gt; should show the S3 bucket&amp;rsquo;s endpoint (&lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;), not the bucket name (&lt;code&gt;yourdomain.com.s3.amazonaws.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Check CloudFront Default Root Object - clicking on the distribution name should take you to a details page that shows &amp;ldquo;Default Root Object&amp;rdquo; in the list with the value that you set, usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Wait. Sometimes changes take up to 48hrs to propagate. ¯\_(ツ)_/¯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope that helps you get set up with your new static site on AWS! Feel free to &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;share your link&lt;/a&gt; with me, I&amp;rsquo;d love to see what you&amp;rsquo;ve created. :)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/aws-acmcertificates_huac5689bd49ae0e9521775d5c4704e40f_49209_640x0_resize_box_2.png" type="image/jpg"/></item></channel></rss>