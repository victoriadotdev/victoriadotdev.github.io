<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on victoria.dev</title><link>https://victoria.dev/tags/python/</link><description>Recent content in python on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria Drake)</managingEditor><webMaster>hello@victoria.dev (Victoria Drake)</webMaster><lastBuildDate>Tue, 09 Feb 2021 05:34:48 -0500</lastBuildDate><atom:link href="https://victoria.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Do I raise or return errors in Python?</title><link>https://victoria.dev/blog/do-i-raise-or-return-errors-in-python/</link><pubDate>Tue, 09 Feb 2021 05:34:48 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/do-i-raise-or-return-errors-in-python/</guid><description>I hear this question a lot: &amp;ldquo;Do I raise or return this error in Python?&amp;rdquo;
This is probably because the right answer will depend on your situation and the goals of your application logic. Either choice can help you ensure your Python code doesn&amp;rsquo;t fail silently, saving you and your teammates from having to hunt down deeply entrenched errors.
Here&amp;rsquo;s the difference between raise and return when handling failures in Python, and how to ensure your code doesn&amp;rsquo;t fail silently.</description></item><item><title>Increase developer confidence with a great Django test suite</title><link>https://victoria.dev/blog/increase-developer-confidence-with-a-great-django-test-suite/</link><pubDate>Thu, 01 Oct 2020 05:50:37 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/increase-developer-confidence-with-a-great-django-test-suite/</guid><description>If you regard writing tests as a lame checkbox task, nothing could be farther from the truth. Done correctly, tests are one of your application&amp;rsquo;s most valuable assets.
The Django framework in particular offers your team the opportunity to create an efficient testing practice, based on the Python standard library unittest. Proper tests in Django are fast to write, faster to run, and can offer you a seamless continuous integration solution for taking the pulse of your developing application.</description></item><item><title>Django project best practices to keep your developers happy</title><link>https://victoria.dev/blog/django-project-best-practices-to-keep-your-developers-happy/</link><pubDate>Tue, 22 Sep 2020 04:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/django-project-best-practices-to-keep-your-developers-happy/</guid><description>Do you want your team to enjoy your development workflow? Do you think building software should be fun and existentially fulfilling? If so, this is the post for you!
I&amp;rsquo;ve been developing with Django for years, and I&amp;rsquo;ve never been happier with my Django project set up than I am right now. Here&amp;rsquo;s how I&amp;rsquo;m making a day of developing with Django the most relaxing and enjoyable development experience possible for myself and my engineering team.</description></item><item><title>Manipulating data with Django migrations</title><link>https://victoria.dev/blog/manipulating-data-with-django-migrations/</link><pubDate>Mon, 14 Sep 2020 02:12:57 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/manipulating-data-with-django-migrations/</guid><description>Growing, successful applications are a lovely problem to have. As a product develops, it tends to accumulate complication the way your weekend cake project accumulates layers of frosting. Thankfully, Django, my favorite batteries-included framework, handles complexity pretty well.
Django models help humans work with data in a way that makes sense to our brains, and the framework offers plenty of classes you can inherit to help you rapidly develop a robust application from scratch.</description></item><item><title>Writing efficient Django</title><link>https://victoria.dev/blog/writing-efficient-django/</link><pubDate>Thu, 09 Jul 2020 04:02:47 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/writing-efficient-django/</guid><description>I like Django. It&amp;rsquo;s a well-considered and intuitive framework with a name I can pronounce out loud. You can use it to to quickly spin up a weekend-sized project, and you can still use it to run full-blown production applications at scale. I&amp;rsquo;ve done both these things, and over the years I&amp;rsquo;ve discovered how to use some of Django&amp;rsquo;s features for maximum efficiency. These are:
Class-based versus function-based views Django models Retrieving objects with queries Let&amp;rsquo;s look at how these tools let you create a performant Django application that&amp;rsquo;s pleasant to build and maintain.</description></item><item><title>Multithreaded Python: slithering through an I/O bottleneck</title><link>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</link><pubDate>Fri, 28 Feb 2020 09:31:02 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</guid><description>I recently developed a project that I called Hydra: a multithreaded link checker written in Python. Unlike many Python site crawlers I found while researching, Hydra uses only standard libraries, with no external dependencies like BeautifulSoup. It&amp;rsquo;s intended to be run as part of a CI/CD process, so part of its success depended on being fast.
Multiple threads in Python is a bit of a bitey subject (not sorry) in that the Python interpreter doesn&amp;rsquo;t actually let multiple threads execute at the same time.</description></item><item><title>Breaking bottlenecks üçæ</title><link>https://victoria.dev/blog/breaking-bottlenecks/</link><pubDate>Tue, 25 Feb 2020 12:50:29 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/breaking-bottlenecks/</guid><description>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &amp;ldquo;ums&amp;rdquo; that may have occurred. You can view the slides here.
I&amp;rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&amp;rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&amp;rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world.</description></item><item><title>Iteration in Python: for, list, and map</title><link>https://victoria.dev/blog/iteration-in-python-for-list-and-map/</link><pubDate>Wed, 18 Jan 2017 21:58:28 +0700</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/iteration-in-python-for-list-and-map/</guid><description>Iteration in Python can be a little hard to understand. Subtle differences in terminology like iteration, iterator, iterating, and iterable aren&amp;rsquo;t the most beginner-friendly.
When tackling new concepts, I find concrete examples to be most useful. I&amp;rsquo;ll share some in this post and discuss appropriate situations for each. (Pun intended.)
For loop First, in pseudocode:
for iterating_variable in iterable: statement(s) I find for loops to be the most readable way to iterate in Python.</description></item><item><title>The basics of streaming with Twitter API</title><link>https://victoria.dev/blog/the-basics-of-streaming-with-twitter-api/</link><pubDate>Fri, 06 Jan 2017 16:39:29 +0700</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/the-basics-of-streaming-with-twitter-api/</guid><description>Twitter has begun asking users to apply to use the API, presumably to cut down on unpalatable uses. This article is still relevant, however, no longer represents the best way to get started with Twitter API streaming. For more on the current API, please see the Twitter API Docs. This post covers my initial adventures in exploring Twitter&amp;rsquo;s Streaming API. I&amp;rsquo;ll talk about:
Getting started making a Twitter Streaming program using a template Problems arising from programming in Python with Windows 10 and Unicode Refining the search function You can follow along with my template on Github.</description></item></channel></rss>