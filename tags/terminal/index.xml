<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Terminal on victoria.dev</title><link>https://victoria.dev/tags/terminal/</link><description>Recent content in Terminal on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Wed, 21 Aug 2019 09:17:02 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/terminal/index.xml" rel="self" type="application/rss+xml"/><item><title>How to do twice as much with half the keystrokes using `.bashrc`</title><link>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</link><pubDate>Wed, 21 Aug 2019 09:17:02 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</guid><description>An overview of time-saving aliases, functions, and creating a useful Bash prompt.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/cover_huc91640f9694e31ff03eab28f9c840023_19597_640x0_resize_box_2.png" width="640" height="245"/>
&lt;p&gt;In my &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&#34;&gt;recent post about setting up Ubuntu with Bash scripts&lt;/a&gt;, I briefly alluded to the magic of &lt;code&gt;.bashrc&lt;/code&gt;. This didn&amp;rsquo;t really do it justice, so here&amp;rsquo;s a quick post that offers a bit more detail about what the Bash configuration file can do.&lt;/p&gt;
&lt;p&gt;My current configuration hugely improves my workflow, and saves me well over 50% of the keystrokes I would have to employ without it! Let&amp;rsquo;s look at some examples of aliases, functions, and prompt configurations that can improve our workflow by helping us be more efficient with fewer key presses.&lt;/p&gt;
&lt;h1 id=&#34;bash-aliases&#34;&gt;Bash aliases&lt;/h1&gt;
&lt;p&gt;A smartly written &lt;code&gt;.bashrc&lt;/code&gt; can save a whole lot of keystrokes. We can take advantage of this in the literal sense by using &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Aliases.html&#34;&gt;bash aliases&lt;/a&gt;, or strings that expand to larger commands. For an indicative example, here is a Bash alias for copying files in the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Always copy contents of directories (r)ecursively and explain (v) what was done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cp -rv&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;alias&lt;/code&gt; command defines the string we&amp;rsquo;ll type, followed by what that string will expand to. We can override existing commands like &lt;code&gt;cp&lt;/code&gt; above. On its own, the &lt;code&gt;cp&lt;/code&gt; command will only copy files, not directories, and succeeds silently. With this alias, we need not remember to pass those two flags, nor &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt; the location of our copied file to confirm that it&amp;rsquo;s there! Now, just those two key presses (for &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;) will do all of that for us.&lt;/p&gt;
&lt;p&gt;Here are a few more &lt;code&gt;.bashrc&lt;/code&gt; aliases for passing flags with common functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# List contents with colors for file types, (A)lmost all hidden files (without . and ..), in (C)olumns, with class indicators (F)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ls --color=auto -ACF&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# List contents with colors for file types, (a)ll hidden entries (including . and ..), use (l)ong listing format, with class indicators (F)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ls --color=auto -alF&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Explain (v) what was done when moving a file&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mv -v&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Create any non-existent (p)arent directories and explain (v) what was done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mkdir -pv&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Always try to (c)ontinue getting a partially-downloaded file&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;wget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wget -c&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aliases come in handy when we want to avoid typing long commands, too. Here are a few I use when working with Python environments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pym&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;python3 manage.py&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mkenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;python3 -m venv env&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;startenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source env/bin/activate &amp;amp;&amp;amp; which python3&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stopenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deactivate&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For further inspiration on ways Bash aliases can save time, I highly recommend &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-useful-bash-aliases-and-functions&#34;&gt;the examples in this article&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;bash-functions&#34;&gt;Bash functions&lt;/h1&gt;
&lt;p&gt;One downside of the aliases above is that they&amp;rsquo;re rather static - they&amp;rsquo;ll always expand to exactly the text declared. For a Bash alias that takes arguments, we&amp;rsquo;ll need to create a function. We can do this like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Show contents of the directory after changing to it&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;builtin&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
ls -ACF
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can&amp;rsquo;t begin to tally how many times I&amp;rsquo;ve typed &lt;code&gt;cd&lt;/code&gt; and then &lt;code&gt;ls&lt;/code&gt; immediately after to see the contents of the directory I&amp;rsquo;m now in. With this function set up, it all happens with just those two letters! The function takes the first argument, &lt;code&gt;$1&lt;/code&gt;, as the location to change directory to, then prints the contents of that directory in nicely formatted columns with file type indicators. The &lt;code&gt;builtin&lt;/code&gt; part is necessary to get Bash to allow us to override this default command.&lt;/p&gt;
&lt;p&gt;Bash functions are very useful when it comes to downloading or upgrading software, too. I previously spent at least a few minutes every couple weeks downloading the new extended version of the &lt;a href=&#34;https://gohugo.io/categories/releases&#34;&gt;static site generator Hugo&lt;/a&gt;, thanks to their excellent shipping frequency. With a function, I only need to pass in the version, and the upgrade happens in a few seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Hugo install or upgrade&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; gethugo &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/hugo_extended_&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;_Linux-64bit.tar.gz
tar xf tmp/hugo_extended_&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;_Linux-64bit.tar.gz -C tmp/
sudo mv -f tmp/hugo /usr/local/bin/
rm -rf tmp/
hugo version
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$@&lt;/code&gt; notation simply takes all the arguments given, replacing its spot in the function. To run the above function and download Hugo version 0.57.2, we use the command &lt;code&gt;gethugo 0.57.2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve got one for &lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;, too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; getgolang &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
sudo rm -rf /usr/local/go
wget -q -P tmp/ https://dl.google.com/go/go&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf tmp/go&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.linux-amd64.tar.gz
rm -rf tmp/
go version
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or how about a function that adds a remote origin URL for GitLab to the current repository?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; glab &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
git remote set-url origin --add git@gitlab.com:&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PWD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.git
git remote -v
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;glab username&lt;/code&gt;, we can create a new &lt;code&gt;origin&lt;/code&gt; URL for the current Git repository with our &lt;code&gt;username&lt;/code&gt; on GitLab.com. Pushing to a new remote URL &lt;a href=&#34;https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/#a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;automatically creates a new private GitLab repository&lt;/a&gt;, so this is a useful shortcut for creating backups!&lt;/p&gt;
&lt;p&gt;Bash functions are really only limited by the possibilities of scripting, of which there are, practically, few limits. If there&amp;rsquo;s anything we do on a frequent basis that requires typing a few lines into a terminal, we can probably create a Bash function for it!&lt;/p&gt;
&lt;h1 id=&#34;bash-prompt&#34;&gt;Bash prompt&lt;/h1&gt;
&lt;p&gt;Besides directory contents, it&amp;rsquo;s also useful to see the full path of the directory we&amp;rsquo;re in. The Bash prompt can show us this path, along with other useful information like our current Git branch. To make it more readable, we can define colours for each part of the prompt. Here&amp;rsquo;s how we can set up our prompt in &lt;code&gt;.bashrc&lt;/code&gt; to accomplish this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Colour codes are cumbersome, so let&amp;#39;s name them&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtcyn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;96m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Cyan&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtpur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;35m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Purple&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtwht&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;37m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# White&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtrst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Text Reset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Which (C)olour for what part of the prompt?&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtcyn&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;gitC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtpur&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;pointerC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtwht&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtrst&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Get the name of our branch and put parenthesis around it&lt;/span&gt;
gitBranch&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
git branch &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;/^[^*]/d&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/* \(.*\)/(\1)/&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Build the prompt&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\w &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gitC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$(gitBranch) &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pointerC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~/github/myrepo &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; $&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naming the colours helps to easily identify where one colour starts and stops, and where the next one begins. The prompt that we see in our terminal is defined by the string following &lt;code&gt;export PS1&lt;/code&gt;, with each component of the prompt set with an &lt;a href=&#34;https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html&#34;&gt;escape sequence&lt;/a&gt;. Let&amp;rsquo;s break that down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; displays the current working directory,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\$(gitBranch)&lt;/code&gt; calls the &lt;code&gt;gitBranch&lt;/code&gt; function defined above, which displays the current Git branch,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\$&lt;/code&gt; will display a &amp;ldquo;$&amp;rdquo; if you are a normal user or in normal user mode, and a &amp;ldquo;#&amp;rdquo; if you are root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html&#34;&gt;full list of Bash escape sequences&lt;/a&gt; can help us display many more bits of information, including even the time and date! Bash prompts are highly customizable and individual, so feel free to set it up any way you please.&lt;/p&gt;
&lt;p&gt;Here are a few options that put information front and centre and can help us to work more efficiently.&lt;/p&gt;
&lt;h2 id=&#34;for-the-procrastination-averse&#34;&gt;For the procrastination-averse&lt;/h2&gt;
&lt;p&gt;Username and current time with seconds, in 24-hour HH:MM:SS format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;userC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\u &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;at \t &amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;user at 09:35:55 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for-those-who-always-like-to-know-where-they-stand&#34;&gt;For those who always like to know where they stand&lt;/h2&gt;
&lt;p&gt;Full file path on a separate line, and username:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\w&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\u:&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;~/github/myrepo
user:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for-the-minimalist&#34;&gt;For the minimalist&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can build many practical prompts with just the basic escape sequences; once we start to integrate functions with prompts, as in the Git branch example, things can get really complicated. Whether this amount of complication is an addition or a detriment to your productivity, only you can know for sure!&lt;/p&gt;
&lt;p&gt;Many fancy Bash prompts are possible with programs readily available with a quick search. I&amp;rsquo;ve intentionally not provided samples here because, well, if you can tend to get as excited about this stuff as I can, it might be a couple hours before you get back to what you were doing before you started reading this post, and I just can&amp;rsquo;t have that on my conscience. 🥺&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve hopefully struck a nice balance now between time invested and usefulness gained from our Bash configuration file! I hope you use your newly-recovered keystroke capacity for good.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/cover_huc91640f9694e31ff03eab28f9c840023_19597_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to set up a fresh Ubuntu desktop using only dotfiles and bash scripts</title><link>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</link><pubDate>Mon, 19 Aug 2019 07:58:18 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</guid><description>Configure settings, install programs, and customize your desktop environment with a single bash command.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/cover_hu7503ff9e94bb9ad2ad596a79338ed3ec_587274_640x0_resize_q75_box.jpg" width="640" height="354"/>
&lt;p&gt;One of my most favourite things about open source files on GitHub is the ability to see how others do (what some people might call) mundane things, like set up their &lt;code&gt;.bashrc&lt;/code&gt; and other dotfiles. While I&amp;rsquo;m not as enthusiastic about ricing as I was when I first came to the Linux side, I still get pretty excited when I find a config setting that makes things prettier and faster, and thus, better.&lt;/p&gt;
&lt;p&gt;I recently came across a few such things, particularly in &lt;a href=&#34;https://github.com/tomnomnom&#34;&gt;Tom Hudson&amp;rsquo;s&lt;/a&gt; dotfiles. Tom seems to like to script things, and some of those things include automatically setting up symlinks, and installing Ubuntu repository applications and other programs. This got me thinking. Could I automate the set up of a new machine to replicate my current one?&lt;/p&gt;
&lt;p&gt;Being someone generally inclined to take things apart in order to see how they work, I know I&amp;rsquo;ve messed up my laptop on occasion. (Usually when I&amp;rsquo;m away from home, and my backup harddrive isn&amp;rsquo;t.) On those rare but really inconvenient situations when my computer becomes a shell of its former self, (ba-dum-ching) it&amp;rsquo;d be quite nice to have a fast, simple way of putting Humpty Dumpty back together again, just the way I like.&lt;/p&gt;
&lt;p&gt;In contrast to creating a &lt;a href=&#34;https://askubuntu.com/questions/19901/how-to-make-a-disk-image-and-restore-from-it-later&#34;&gt;disk image and restoring it later&lt;/a&gt;, a collection of bash scripts is easier to create, maintain, and move around. They require no special utilities, only an external transportation method. It&amp;rsquo;s like passing along the recipe, instead of the whole bundt cake. (Mmm, cake.)&lt;/p&gt;
&lt;p&gt;Additionally, functionality like this would be super useful when setting up a virtual machine, or VM, or even just a virtual private server, or VPS. (Both of which, now that I write this, would probably make more forgiving targets for my more destructive experimentations&amp;hellip; live and learn!)&lt;/p&gt;
&lt;p&gt;Well, after some grepping and Googling and digging around, I now have a suite of scripts that can do this:&lt;/p&gt;
&lt;video controls=&#34;controls&#34; poster=&#34;cover.jpg&#34;&gt;
&lt;source src=&#34;setup.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;p&gt;This is the tail end of a test run of the set up scripts on a fresh Ubuntu desktop, loaded off a bootable USB. It had all my programs and settings restored in under three minutes!&lt;/p&gt;
&lt;p&gt;This post will cover how to achieve the automatic set up of a computer running Ubuntu Desktop (in my case, Ubuntu LTS 18.04) using bash scripts. The majority of the information covered is applicable to all the Linux desktop flavours, though some syntax may differ. The bash scripts cover three main areas: linking dotfiles, installing software from Ubuntu and elsewhere, and setting up the desktop environment. We&amp;rsquo;ll cover each of these areas and go over the important bits so that you can begin to craft your own scripts.&lt;/p&gt;
&lt;h1 id=&#34;dotfiles&#34;&gt;Dotfiles&lt;/h1&gt;
&lt;p&gt;Dotfiles are what most Linux enthusiasts call configuration files. They typically live in the user&amp;rsquo;s home directory (denoted in bash scripts with the &lt;a href=&#34;https://www.tldp.org/LDP/abs/html/internal.html#BUILTINREF&#34;&gt;builtin&lt;/a&gt; variable &lt;code&gt;$HOME&lt;/code&gt;) and control the appearance and behaviour of all kinds of programs. The file names begin with &lt;code&gt;.&lt;/code&gt;, which denotes hidden files in Linux (hence &amp;ldquo;dot&amp;rdquo; files). Here are some common dotfiles and ways in which they&amp;rsquo;re useful.&lt;/p&gt;
&lt;h2 id=&#34;bashrc&#34;&gt;&lt;code&gt;.bashrc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.bashrc&lt;/code&gt; file is a list of commands executed at startup by interactive, non-login shells. &lt;a href=&#34;https://www.tldp.org/LDP/abs/html/intandnonint.html&#34;&gt;Interactive vs non-interactive shells&lt;/a&gt; can be a little confusing, but aren&amp;rsquo;t necessary for us to worry about here. For our purposes, any time you open a new terminal, see a prompt, and can type commands into it, your &lt;code&gt;.bashrc&lt;/code&gt; was executed.&lt;/p&gt;
&lt;p&gt;Lines in this file can help improve your workflow by creating aliases that reduce keystrokes, or by displaying a helpful prompt with useful information. It can even run user-created programs, like &lt;a href=&#34;https://github.com/victoriadrake/eddie-terminal&#34;&gt;Eddie&lt;/a&gt;. For more ideas, you can have a look at &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/.bashrc&#34;&gt;my &lt;code&gt;.bashrc&lt;/code&gt; file on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;vimrc&#34;&gt;&lt;code&gt;.vimrc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.vimrc&lt;/code&gt; dotfile configures the champion of all text editors, &lt;a href=&#34;https://www.vim.org/about.php&#34;&gt;Vim&lt;/a&gt;. (If you haven&amp;rsquo;t yet wielded the powers of the keyboard shortcuts, I highly recommend &lt;a href=&#34;https://vim-adventures.com/&#34;&gt;a fun game to learn Vim with&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;.vimrc&lt;/code&gt;, we can set editor preferences such as display settings, colours, and custom keyboard shortcuts. You can take a look at &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/.vimrc&#34;&gt;my &lt;code&gt;.vimrc&lt;/code&gt; on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other dotfiles may be useful depending on the programs you use, such as &lt;code&gt;.gitconfig&lt;/code&gt; or &lt;code&gt;.tmux.conf&lt;/code&gt;. Exploring dotfiles on GitHub is a great way to get a sense of what&amp;rsquo;s available and useful to you!&lt;/p&gt;
&lt;h1 id=&#34;linking-dotfiles&#34;&gt;Linking dotfiles&lt;/h1&gt;
&lt;p&gt;We can use a script to create symbolic links, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link#POSIX_and_Unix-like_operating_systems&#34;&gt;symlinks&lt;/a&gt; for all our dotfiles. This allows us to keep all the files in a central repository, where they can easily be managed, while also providing a sort of placeholder in the spot that our programs expect the configuration file to be found. This is typically, but not always, the user home directory. For example, since I store my dotfiles on GitHub, I keep them in a directory with a path like &lt;code&gt;~/github/dotfiles/&lt;/code&gt; while the files themselves are symlinked, resulting in a path like &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To programmatically check for and handle any existing files and symlinks, then create new ones, we can use &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/symlink.sh&#34;&gt;this elegant shell script&lt;/a&gt;. I compliment it only because I blatantly stole the core of it from &lt;a href=&#34;https://github.com/tomnomnom/dotfiles/blob/master/setup.sh&#34;&gt;Tom&amp;rsquo;s setup script&lt;/a&gt;, so I can&amp;rsquo;t take the credit for how lovely it is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;symlink.sh&lt;/code&gt; script works by attempting to create symlinks for each dotfile in our &lt;code&gt;$HOME&lt;/code&gt;. It first checks to see if a symlink already exists, or if a regular file or directory with the same name exists. In the former case, the symlink is removed and remade; in the latter, the file or directory is renamed, then the symlink is made.&lt;/p&gt;
&lt;h1 id=&#34;installing-software&#34;&gt;Installing software&lt;/h1&gt;
&lt;p&gt;One of the beautiful things about exploring shell scripts is discovering how much can be achieved using only the command line. As someone whose first exposure to computers was through a graphical operating system, I find working in the terminal to be refreshingly fast.&lt;/p&gt;
&lt;p&gt;With Ubuntu, most programs we likely require are available through the default Ubuntu software repositories. We typically search for these with the command &lt;code&gt;apt search &amp;lt;program&amp;gt;&lt;/code&gt; and install them with &lt;code&gt;sudo apt install &amp;lt;program&amp;gt;&lt;/code&gt;. Some software we&amp;rsquo;d like may not be in the default repositories, or may not be offered there in the most current version. In these cases, we can still install these programs in Ubuntu using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Ubuntu#Package_Archives&#34;&gt;PPA, or Personal Package Archive&lt;/a&gt;. We&amp;rsquo;ll just have to be careful that the PPAs we choose are from the official sources.&lt;/p&gt;
&lt;p&gt;If a program we&amp;rsquo;d like doesn&amp;rsquo;t appear in the default repositories or doesn&amp;rsquo;t seem to have a PPA, we may still be able to install it via command line. A quick search for &amp;ldquo;&lt;program&gt; installation command line&amp;rdquo; should get some answers.&lt;/p&gt;
&lt;p&gt;Since bash scripts are just a collection of commands that we could run individually in the terminal, creating a script to install all our desired programs is as straightforward as putting all the commands into a script file. I chose to organize my installation scripts between the default repositories, which are installed by &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/aptinstall.sh&#34;&gt;my &lt;code&gt;aptinstall.sh&lt;/code&gt; script&lt;/a&gt;, and programs that involve external sources, handled with &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/programs.sh&#34;&gt;my &lt;code&gt;programs.sh&lt;/code&gt; script&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-the-desktop-environment&#34;&gt;Setting up the desktop environment&lt;/h1&gt;
&lt;p&gt;On the recent occasions when I&amp;rsquo;ve gotten a fresh desktop (intentionally or otherwise) I always seem to forget how long it takes to remember, find, and then change all the desktop environment settings. Keyboard shortcuts, workspaces, sound settings, night mode&amp;hellip; it adds up!&lt;/p&gt;
&lt;p&gt;Thankfully, all these settings have to be stored somewhere in a non-graphical format, which means that if we can discover how that&amp;rsquo;s done, we can likely find a way to easily manipulate the settings with a bash script. Lo and behold the terminal command, &lt;code&gt;gsettings list-recursively&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a heck of a lot of settings for GNOME desktop environment. We can make the list easier to scroll through (if, like me, you&amp;rsquo;re sometimes the type of person to say &amp;ldquo;Just let me look at everything and figure out what I want!&amp;rdquo;) by piping to &lt;code&gt;less&lt;/code&gt;: &lt;code&gt;gsettings list-recursively | less&lt;/code&gt;. Alternatively, if we have an inkling as to what we might be looking for, we can use &lt;code&gt;grep&lt;/code&gt;: &lt;code&gt;gsettings list-recursively | grep &#39;keyboard&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can manipulate our settings with the &lt;code&gt;gsettings set&lt;/code&gt; command. It can sometimes be difficult to find the syntax for the setting we want, so when we&amp;rsquo;re first building our script, I recommend using the GUI to make the changes, then finding the &lt;code&gt;gsettings&lt;/code&gt; line we changed and recording its value.&lt;/p&gt;
&lt;p&gt;For some inspiration, you can view &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/desktop.sh&#34;&gt;my &lt;code&gt;desktop.sh&lt;/code&gt; settings script on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;Having modular scripts (one for symlinks, two for installing programs, another for desktop settings) is useful for both keeping things organized and for being able to run some but not all of the automated set up. For instance, if I were to set up a VPS in which I only use the command line, I wouldn&amp;rsquo;t need to bother with installing graphical programs or desktop settings.&lt;/p&gt;
&lt;p&gt;In cases where I do want to run all the scripts, however, doing so one-by-one is a little tedious. Thankfully, since bash scripts can themselves be run by terminal commands, we can simply write another master script to run them all!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my master script to handle the set up of a new Ubuntu desktop machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
./symlink.sh
./aptinstall.sh
./programs.sh
./desktop.sh
&lt;span class=&#34;c1&#34;&gt;# Get all upgrades&lt;/span&gt;
sudo apt upgrade -y
&lt;span class=&#34;c1&#34;&gt;# See our bash changes&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;span class=&#34;c1&#34;&gt;# Fun hello&lt;/span&gt;
figlet &lt;span class=&#34;s2&#34;&gt;&amp;#34;... and we&amp;#39;re back!&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I threw in the upgrade line for good measure. It will make sure that the programs installed on our fresh desktop have the latest updates. Now a simple, single bash command will take care of everything!&lt;/p&gt;
&lt;p&gt;You may have noticed that, while our desktop now looks and runs familiarly, these scripts don&amp;rsquo;t cover one very important area: our files. Hopefully, you have a back up method for those that involves some form of reliable external hardware. If not, and if you tend to put your work in external repository hosts like GitHub or GitLab, I do have a way to &lt;a href=&#34;https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/&#34;&gt;automatically clone and back up your GitHub repositories with bash one-liners&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relying on external repository hosts doesn&amp;rsquo;t offer 100% coverage, however. Files that you wouldn&amp;rsquo;t put in an externally hosted repository (private or otherwise) consequently can&amp;rsquo;t be pulled. Git ignored objects that can&amp;rsquo;t be generated from included files, like private keys and secrets, will not be recreated. Those files, however, are likely small enough that you could fit a whole bunch on a couple encrypted USB flash drives (and if you don&amp;rsquo;t have private key backups, maybe you ought to do that first?).&lt;/p&gt;
&lt;p&gt;That said, I hope this post has given you at least some inspiration as to how dotfiles and bash scripts can help to automate setting up a fresh desktop. If you come up with some settings you find useful, please help others discover them by sharing your dotfiles, too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/cover_hu7503ff9e94bb9ad2ad596a79338ed3ec_587274_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</link><pubDate>Tue, 06 Aug 2019 10:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</guid><description>Using xargs and awk in Bash to automate managing remote-hosted repositories.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" width="640" height="343"/>
&lt;p&gt;Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into automatically re-creating my laptop with Bash scripts (post to come!), I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well. Here they are.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-clone-all-your-github-repositories&#34;&gt;A Bash one-liner to clone all your GitHub repositories&lt;/h1&gt;
&lt;p&gt;Caveat: you&amp;rsquo;ll need a list of the GitHub repositories you want to clone. The good thing about that is it gives you full agency to choose just the repositories you want on your machine, instead of going in whole-hog.&lt;/p&gt;
&lt;p&gt;You can easily clone GitHub repositories without entering your password each time by using HTTPS with your &lt;a href=&#34;https://help.github.com/en/articles/caching-your-github-password-in-git&#34;&gt;15-minute cached credentials&lt;/a&gt; or, my preferred method, by &lt;a href=&#34;https://help.github.com/en/articles/connecting-to-github-with-ssh&#34;&gt;connecting to GitHub with SSH&lt;/a&gt;. For brevity I&amp;rsquo;ll assume we&amp;rsquo;re going with the latter, and our SSH keys are set up.&lt;/p&gt;
&lt;p&gt;Given a list of GitHub URLs in the file &lt;code&gt;gh-repos.txt&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@github.com:username/first-repository.git
git@github.com:username/second-repository.git
git@github.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xargs -n1 git clone &amp;lt; gh-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clones all the repositories on the list into the current folder. This same one-liner works for GitLab repositories as well, if you substitute the appropriate URLs.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;There are two halves to this one-liner: the input, counterintuitively on the right side, and the part that makes stuff happen, on the left. We could make the order of these parts more intuitive (maybe?) by writing the same command like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;lt;gh-repos.txt xargs -n1 git clone &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a command for each line of our input, &lt;code&gt;gh-repos.txt&lt;/code&gt;, we use &lt;code&gt;xargs -n1&lt;/code&gt;. The tool &lt;code&gt;xargs&lt;/code&gt; reads items from input and executes any commands it finds (it will &lt;code&gt;echo&lt;/code&gt; if it doesn&amp;rsquo;t find any). By default, it assumes that items are separated by spaces; new lines also works and makes our list easier to read. The flag &lt;code&gt;-n1&lt;/code&gt; tells &lt;code&gt;xargs&lt;/code&gt; to use &lt;code&gt;1&lt;/code&gt; argument, or in our case, one line, per command. We build our command with &lt;code&gt;git clone&lt;/code&gt;, which &lt;code&gt;xargs&lt;/code&gt; then executes for each line. Ta-da.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;A Bash one-liner to create and push many repositories on GitLab&lt;/h1&gt;
&lt;p&gt;GitLab, unlike GitHub, lets us do this nifty thing where we don&amp;rsquo;t have to use the website to make a new repository first. We can &lt;a href=&#34;https://gitlab.com/help/gitlab-basics/create-project#push-to-create-a-new-project&#34;&gt;create a new GitLab repository from our terminal&lt;/a&gt;. The newly created repository defaults to being set as Private, so if we want to make it Public on GitLab, we&amp;rsquo;ll have to do that manually later.&lt;/p&gt;
&lt;p&gt;The GitLab docs tell us to push to create a new project using &lt;code&gt;git push --set-upstream&lt;/code&gt;, but I don&amp;rsquo;t find this to be very convenient for using GitLab as a backup. As I work with my repositories in the future, I&amp;rsquo;d like to run one command that pushes to both GitHub &lt;em&gt;and&lt;/em&gt; GitLab without additional effort on my part.&lt;/p&gt;
&lt;p&gt;To make this Bash one-liner work, we&amp;rsquo;ll also need a list of repository URLs for GitLab (ones that don&amp;rsquo;t exist yet). We can easily do this by copying our GitHub repository list, opening it up with Vim, and doing a &lt;a href=&#34;https://vim.fandom.com/wiki/Search_and_replace&#34;&gt;search-and-replace&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp gh-repos.txt gl-repos.txt
vim gl-repos.txt
:%s/&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;github&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;/gitlab/g
:wq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;gl-repos.txt&lt;/code&gt;, which looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@gitlab.com:username/first-repository.git
git@gitlab.com:username/second-repository.git
git@gitlab.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create these repositories on GitLab, add the URLs as remotes, and push our code to the new repositories by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hang tight and I&amp;rsquo;ll explain it; for now, take note that &lt;code&gt;~/FULL/PATH/&lt;/code&gt; should be the full path to the directory containing our GitHub repositories.&lt;/p&gt;
&lt;p&gt;We do have to make note of a couple assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the directory on your local machine that contains the repository is the same as the name of the repository in the URL (this will be the case if it was cloned with the one-liner above);&lt;/li&gt;
&lt;li&gt;Each repository is currently checked out to the branch you want pushed, ie. &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one-liner could be expanded to handle these assumptions, but it is the humble opinion of the author that at that point, we really ought to be writing a Bash script.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here-1&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;Our Bash one-liner uses each line (or URL) in the &lt;code&gt;gl-repos.txt&lt;/code&gt; file as input. With &lt;code&gt;awk&lt;/code&gt;, it splits off the name of the directory containing the repository on our local machine, and uses these pieces of information to build our larger command. If we were to &lt;code&gt;print&lt;/code&gt; the output of &lt;code&gt;awk&lt;/code&gt;, we&amp;rsquo;d see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/first-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/second-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/second-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/third-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/third-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at how we build this command.&lt;/p&gt;
&lt;h3 id=&#34;splitting-strings-with-awk&#34;&gt;Splitting strings with &lt;code&gt;awk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The tool &lt;code&gt;awk&lt;/code&gt; can split input based on &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Command-Line-Field-Separator.html&#34;&gt;field separators&lt;/a&gt;. The default separator is a whitespace character, but we can change this by passing the &lt;code&gt;-F&lt;/code&gt; flag. Besides single characters, we can also use a &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Regexp-Field-Splitting.html#Regexp-Field-Splitting&#34;&gt;regular expression field separator&lt;/a&gt;. Since our repository URLs have a set format, we can grab the repository names by asking for the substring between the slash character &lt;code&gt;/&lt;/code&gt; and the end of the URL, &lt;code&gt;.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to accomplish this is with our regex &lt;code&gt;\/|(\.git)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\/&lt;/code&gt; is an escaped &lt;code&gt;/&lt;/code&gt; character;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; means &amp;ldquo;or&amp;rdquo;, telling awk to match either expression;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(\.git)&lt;/code&gt; is the capture group at the end of our URL that matches &amp;ldquo;.git&amp;rdquo;, with an escaped &lt;code&gt;.&lt;/code&gt; character. This is a bit of a cheat, as &amp;ldquo;.git&amp;rdquo; isn&amp;rsquo;t strictly splitting anything (there&amp;rsquo;s nothing on the other side) but it&amp;rsquo;s an easy way for us to take this bit off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we&amp;rsquo;ve told &lt;code&gt;awk&lt;/code&gt; where to split, we can grab the right substring with the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Fields.html#index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator&#34;&gt;field operator&lt;/a&gt;. We refer to our fields with a &lt;code&gt;$&lt;/code&gt; character, then by the field&amp;rsquo;s column number. In our example, we want the second field, &lt;code&gt;$2&lt;/code&gt;. Here&amp;rsquo;s what all the substrings look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: git@gitlab.com:username
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: first-repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the whole string, or in our case, the whole URL, we use the field operator &lt;code&gt;$0&lt;/code&gt;. To write the command, we just substitute the field operators for the repository name and URL. Running this with &lt;code&gt;print&lt;/code&gt; as we&amp;rsquo;re building it can help to make sure we&amp;rsquo;ve got all the spaces right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print &amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;running-the-command&#34;&gt;Running the command&lt;/h3&gt;
&lt;p&gt;We build our command inside the parenthesis of &lt;code&gt;system()&lt;/code&gt;. By using this as the output of &lt;code&gt;awk&lt;/code&gt;, each command will run as soon as it is built and output. The &lt;code&gt;system()&lt;/code&gt; function creates a &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child process&lt;/a&gt; that executes our command, then returns once the command is completed. In plain English, this lets us perform the Git commands on each repository, one-by-one, without breaking from our main process in which &lt;code&gt;awk&lt;/code&gt; is doing things with our input file. Here&amp;rsquo;s our final command again, all put together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-our-backups&#34;&gt;Using our backups&lt;/h3&gt;
&lt;p&gt;By adding the GitLab URLs as remotes, we&amp;rsquo;ve simplified the process of pushing to both externally hosted repositories. If we run &lt;code&gt;git remote -v&lt;/code&gt; in one of our repository directories, we&amp;rsquo;ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, simply running &lt;code&gt;git push&lt;/code&gt; without arguments will push the current branch to both remote repositories.&lt;/p&gt;
&lt;p&gt;We should also note that &lt;code&gt;git pull&lt;/code&gt; will generally only try to pull from the remote repository you originally cloned from (the URL marked &lt;code&gt;(fetch)&lt;/code&gt; in our example above). Pulling from multiple Git repositories at the same time is possible, but complicated, and beyond the scope of this post. Here&amp;rsquo;s an &lt;a href=&#34;https://astrofloyd.wordpress.com/2015/05/05/git-pushing-to-and-pulling-from-multiple-remote-locations-remote-url-and-pushurl/&#34;&gt;explanation of pushing and pulling to multiple remotes&lt;/a&gt; to help get you started, if you&amp;rsquo;re curious. The &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34;&gt;Git documentation on remotes&lt;/a&gt; may also be helpful.&lt;/p&gt;
&lt;h1 id=&#34;to-elaborate-on-the-succinctness-of-bash-one-liners&#34;&gt;To elaborate on the succinctness of Bash one-liners&lt;/h1&gt;
&lt;p&gt;Bash one-liners, when understood, can be fun and handy shortcuts. At the very least, being aware of tools like &lt;code&gt;xargs&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; can help to automate and alleviate a lot of tediousness in our work. However, there are some downsides.&lt;/p&gt;
&lt;p&gt;In terms of an easy-to-understand, maintainable, and approachable tool, Bash one-liners suck. They&amp;rsquo;re usually more complicated to write than a Bash script using &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops, and certainly more complicated to read. It&amp;rsquo;s likely that when we write them, we&amp;rsquo;ll miss a single quote or closing parenthesis somewhere; and as I hope this post demonstrates, they can take quite a bit of explaining, too. So why use them?&lt;/p&gt;
&lt;p&gt;Imagine reading a recipe for baking a cake, step by step. You understand the methods and ingredients, and gather your supplies. Then, as you think about it, you begin to realize that if you just throw all the ingredients at the oven in precisely the right order, a cake will instantly materialize. You try it, and it works!&lt;/p&gt;
&lt;p&gt;That would be pretty satisfying, wouldn&amp;rsquo;t it?&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A quick guide to changing your GitHub username</title><link>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</link><pubDate>Sun, 28 Jul 2019 15:19:13 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</guid><description>Some additional steps to consider after making a change to your username on GitHub.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" width="640" height="421"/>
&lt;p&gt;This being the 2,38947234th and probably last time I&amp;rsquo;ll change my username, (marriage is permanent, right?) I thought I&amp;rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read &lt;a href=&#34;https://help.github.com/en/articles/changing-your-github-username&#34;&gt;official instructions on how to change your GitHub username&lt;/a&gt; here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider &lt;em&gt;afterwards.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;where-to-make-changes&#34;&gt;Where to make changes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Change username in &lt;a href=&#34;https://github.com/settings/admin&#34;&gt;GitHub account settings.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If using GitHub Pages, change name of your &amp;ldquo;username.github.io&amp;rdquo; repository.&lt;/li&gt;
&lt;li&gt;If using other services that point to your &amp;ldquo;username.github.io&amp;rdquo; repository address, update them.&lt;/li&gt;
&lt;li&gt;If using Netlify, you &lt;em&gt;may&lt;/em&gt; want to sign in and reconnect your repositories. (Mine still worked, but due to a possibly unrelated issue, I&amp;rsquo;m not positive.)&lt;/li&gt;
&lt;li&gt;Sign in to Travis CI and other integrations (find them in your repository Settings tab -&amp;gt; Integrations &amp;amp; services). This will update your username there.&lt;/li&gt;
&lt;li&gt;Update your local files and repository links with &lt;em&gt;very carefully executed&lt;/em&gt; &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands, and push back changes to GitHub.&lt;/li&gt;
&lt;li&gt;Redeploy any websites you may have with your updated GitHub link.&lt;/li&gt;
&lt;li&gt;Fix any links around the web to your profile, your repositories, or Gists you may have shared.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;local-file-updates&#34;&gt;Local file updates&lt;/h1&gt;
&lt;p&gt;Here are some suggestions for strings to search and replace your username in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;github.com/username&lt;/code&gt; (References to your GitHub page in READMEs or in website copy)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username.github.io&lt;/code&gt; (Links to your GitHub Page)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git@github.com:username&lt;/code&gt; (Git config remote ssh urls)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;travis-ci.com/username&lt;/code&gt; (Travis badges in READMEs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shields.io/github/.../username&lt;/code&gt; (Shields badges in READMEs, types include &lt;code&gt;contributors&lt;/code&gt;, &lt;code&gt;stars&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, and more)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can quickly identify where the above strings are located using this command for each string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -rnw -e &#39;foobar&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will recursively (&lt;code&gt;r&lt;/code&gt;) search all files for strings matching the whole (&lt;code&gt;w&lt;/code&gt;) pattern (&lt;code&gt;e&lt;/code&gt;) provided and prefix results with the line numbers (&lt;code&gt;n&lt;/code&gt;) so you can easily find them.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; can make these changes much faster. See &lt;a href=&#34;https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/&#34;&gt;this article on search and replace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy your new handle! (I hope it sticks.)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Two ways to deploy a public GitHub Pages site from a private Hugo repository</title><link>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</link><pubDate>Mon, 22 Apr 2019 10:05:15 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</guid><description>Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site - from a separate private repository.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hu1664dea80ddda6cad8243ace1910f619_558187_640x0_resize_q75_box.jpg" width="640" height="370"/>
&lt;p&gt;Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used Hugo to build my site for years, but until this past week I&amp;rsquo;d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place - and if you&amp;rsquo;re using GitHub Pages with the free version of GitHub, &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&#34;&gt;that place is public&lt;/a&gt;. That means that all my three-in-the-morning bright ideas and messy unfinished (and unfunny) drafts would be publicly available - and no amount of continuous convenience was going to convince me to do that.&lt;/p&gt;
&lt;p&gt;So I kept things separated, with Hugo&amp;rsquo;s messy behind-the-scenes stuff in a local Git repository, and the generated &lt;code&gt;public/&lt;/code&gt; folder pushing to my GitHub Pages remote repository. Each time I wanted to deploy my site, I&amp;rsquo;d have to get on my laptop and &lt;code&gt;hugo&lt;/code&gt; to build my site, then &lt;code&gt;cd public/ &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit&lt;/code&gt;&amp;hellip; etc etc. And all was well, except for the nagging feeling that there was a better way to do this.&lt;/p&gt;
&lt;p&gt;I wrote another article a little while back about &lt;a href=&#34;https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; to make changes to my repositories on my iPad whenever I&amp;rsquo;m out and about. It seemed off to me that I could do everything except deploy my site from my iPad, so I set out to change that.&lt;/p&gt;
&lt;p&gt;A couple three-in-the-morning bright ideas and a revoked access token later (oops), I now have not one but &lt;em&gt;two&lt;/em&gt; ways to deploy to my public GitHub Pages repository from an entirely separated, private GitHub repository. In this post, I&amp;rsquo;ll take you through achieving this with &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis CI&lt;/a&gt; or using &lt;a href=&#34;http://netlify.com/&#34;&gt;Netlify&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing hackish about it - my public GitHub Pages repository still looks the same as it does when I pushed to it locally from my terminal. Only now, I&amp;rsquo;m able to take advantage of a couple great deployment tools to have the site update whenever I push to my private repo, whether I&amp;rsquo;m on my laptop or out and about with my iPad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;im-on-a-bridge.jpg#center&#34; alt=&#34;Hashtag: you did not push from there&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;#YouDidNotPushFromThere&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;This article assumes you have working knowledge of Git and GitHub Pages. If not, you may like to spin off some browser tabs from my articles on &lt;a href=&#34;https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; and &lt;a href=&#34;https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/&#34;&gt;building a site with Hugo and GitHub Pages&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;private-to-public-github-pages-deployment-with-travis-ci&#34;&gt;Private-to-public GitHub Pages deployment with Travis CI&lt;/h1&gt;
&lt;p&gt;Travis CI has the built-in ability (♪) to &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/&#34;&gt;deploy to GitHub Pages&lt;/a&gt; following a successful build. They do a decent job in the docs of explaining how to add this feature, especially if you&amp;rsquo;ve used Travis CI before&amp;hellip; which I haven&amp;rsquo;t. Don&amp;rsquo;t worry, I did the bulk of the figuring-things-out for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Travis CI gets all its instructions from a configuration file in the root of your repository called &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You need to provide a &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;GitHub personal access token&lt;/a&gt; as a secure encrypted variable, which you can generate using &lt;code&gt;travis&lt;/code&gt; on the command line&lt;/li&gt;
&lt;li&gt;Once your script successfully finishes doing what you&amp;rsquo;ve told it to do (not necessarily what you &lt;em&gt;want&lt;/em&gt; it to do but that&amp;rsquo;s a whole other blog post), Travis will deploy your build directory to a repository you can specify with the &lt;code&gt;repo&lt;/code&gt; configuration variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-the-travis-configuration-file&#34;&gt;Setting up the Travis configuration file&lt;/h2&gt;
&lt;p&gt;Create a new configuration file for Travis with the filename &lt;code&gt;.travis.yml&lt;/code&gt; (note the leading &amp;ldquo;.&amp;rdquo;). These scripts are very customizable and I struggled to find a relevant example to use as a starting point - luckily, you don&amp;rsquo;t have that problem!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my basic &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;git&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;depth&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HUGO_VERSION=&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.54.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;matrix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;YOUR_ENCRYPTED_VARIABLE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wget&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-q&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tar&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mv&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~/bin/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--gc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--minify&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;provider&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pages&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;skip-cleanup&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;github-token&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;$GITHUB_TOKEN&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;keep-history&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local-dir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;public&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gh-username/gh-username.github.io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;target-branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;verbose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script downloads and installs Hugo, builds the site with the garbage collection and minify &lt;a href=&#34;https://gohugo.io/commands/hugo/#synopsis&#34;&gt;flags&lt;/a&gt;, then deploys the &lt;code&gt;public/&lt;/code&gt; directory to the specified &lt;code&gt;repo&lt;/code&gt; - in this example, your public GitHub Pages repository. You can read about each of the &lt;code&gt;deploy&lt;/code&gt; configuration options &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/#further-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables#defining-encrypted-variables-in-travisyml&#34;&gt;add the GitHub personal access token as an encrypted variable&lt;/a&gt;, you don&amp;rsquo;t need to manually edit your &lt;code&gt;.travis.yml&lt;/code&gt;. The &lt;code&gt;travis&lt;/code&gt; gem commands below will encrypt and add the variable for you when you run them in your repository directory.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;travis&lt;/code&gt; with &lt;code&gt;sudo gem install travis&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;generate your GitHub personal access token&lt;/a&gt;, copy it (it only shows up once!) and run the commands below in your repository root, substituting your token for the kisses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;travis login --pro --github-token xxxxxxxxxxxxxxxxxxxxxxxxxxx
travis encrypt &lt;span class=&#34;nv&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxx --add env.matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your encrypted token magically appears in the file. Once you&amp;rsquo;ve committed &lt;code&gt;.travis.yml&lt;/code&gt; to your private Hugo repository, Travis CI will run the script and if the build succeeds, will deploy your site to your public GitHub Pages repo. Magic!&lt;/p&gt;
&lt;p&gt;Travis will always run a build each time you push to your private repository. If you don&amp;rsquo;t want to trigger this behavior with a particular commit, &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build&#34;&gt;add the &lt;code&gt;skip&lt;/code&gt; command to your commit message&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yo that&amp;rsquo;s cool but I like Netlify.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Okay fine.&lt;/p&gt;
&lt;h1 id=&#34;deploying-to-a-separate-repository-with-netlify-and-make&#34;&gt;Deploying to a separate repository with Netlify and Make&lt;/h1&gt;
&lt;p&gt;We can get Netlify to do our bidding by using a Makefile, which we&amp;rsquo;ll run with Netlify&amp;rsquo;s build command.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what our &lt;code&gt;Makefile&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SHELL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;/bin/bash
&lt;span class=&#34;nv&#34;&gt;BASEDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;OUTPUTDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Removing public directory&amp;#34;&lt;/span&gt;
rm -rf &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;BASEDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;get_repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Getting public repository&amp;#34;&lt;/span&gt;
git clone https://github.com/gh-username/gh-username.github.io.git public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Generating site&amp;#34;&lt;/span&gt;
hugo --gc --minify
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Preparing commit&amp;#34;&lt;/span&gt;
@cd &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;you@youremail.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Name&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Deploy via Makefile&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push -f -q https://&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;GITHUB_TOKEN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;@github.com/gh-username/gh-username.github.io.git master
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pushed to remote&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To preserve the Git history of our separate GitHub Pages repository, we&amp;rsquo;ll first clone it, build our new Hugo site to it, and then push it back to the Pages repository. This script first removes any existing &lt;code&gt;public/&lt;/code&gt; folder that might contain files or a Git history. It then clones our Pages repository to &lt;code&gt;public/&lt;/code&gt;, builds our Hugo site (essentially updating the files in &lt;code&gt;public/&lt;/code&gt;), then takes care of committing the new site to the Pages repository.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;deploy&lt;/code&gt; section, you&amp;rsquo;ll notice lines starting with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. These are chained commands. Since Make &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Execution.html#Execution&#34;&gt;invokes a new sub-shell for each line&lt;/a&gt;, it starts over with every new line from our root directory. To get our &lt;code&gt;cd&lt;/code&gt; to stick and avoid running our Git commands in the project root directory, we&amp;rsquo;re chaining the commands and using the backslash character to &lt;a href=&#34;http://clarkgrubb.com/makefile-style-guide#breaking-long-lines&#34;&gt;break long lines&lt;/a&gt; for readability.&lt;/p&gt;
&lt;p&gt;By chaining our commands, we&amp;rsquo;re able to &lt;a href=&#34;https://stackoverflow.com/questions/6116548/how-to-tell-git-to-use-the-correct-identity-name-and-email-for-a-given-project&#34;&gt;configure our Git identity&lt;/a&gt;, add all our updated files, and create a commit for our Pages repository.&lt;/p&gt;
&lt;p&gt;Similarly to using Travis CI, we&amp;rsquo;ll need to pass in a &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;GitHub personal access token&lt;/a&gt; to push to our public GitHub Pages repository - only Netlify doesn&amp;rsquo;t provide a straightforward way to encrypt the token in our Makefile.&lt;/p&gt;
&lt;p&gt;Instead, we&amp;rsquo;ll use Netlify&amp;rsquo;s &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#build-environment-variables&#34;&gt;Build Environment Variables&lt;/a&gt;, which live safely in our site settings in the Netlify app. We can then call our token variable in the Makefile. We use it to push (quietly, to avoid printing the token in logs) to our Pages repository by &lt;a href=&#34;https://stackoverflow.com/questions/44773415/how-to-push-a-commit-to-github-from-a-circleci-build-using-a-personal-access-tok&#34;&gt;passing it in the remote URL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid printing the token in Netlify&amp;rsquo;s logs, we suppress &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Echoing.html#Echoing&#34;&gt;recipe echoing&lt;/a&gt; for that line with the leading &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;With your Makefile in the root of your private GitHub repository, you can set up Netlify to run it for you.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-netlify&#34;&gt;Setting up Netlify&lt;/h2&gt;
&lt;p&gt;Getting set up with Netlify via the &lt;a href=&#34;https://app.netlify.com/&#34;&gt;web UI&lt;/a&gt; is straightforward. Once you sign in with GitHub, choose the private GitHub repository where your Hugo site lives. The next page Netlify takes you to lets you enter deploy settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-new-site.png&#34; alt=&#34;Create a new site page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can specify the build command that will run your Makefile (&lt;code&gt;make all&lt;/code&gt; for this example). The branch to deploy and the publish directory don&amp;rsquo;t matter too much in our specific case, since we&amp;rsquo;re only concerned with pushing to a separate repository. You can enter the typical &lt;code&gt;master&lt;/code&gt; deploy branch and &lt;code&gt;public&lt;/code&gt; publish directory.&lt;/p&gt;
&lt;p&gt;Under &amp;ldquo;Advanced build settings&amp;rdquo; click &amp;ldquo;New variable&amp;rdquo; to add your GitHub personal access token as a Build Environment Variable. In our example, the variable name is &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. Click &amp;ldquo;Deploy site&amp;rdquo; to make the magic happen.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve already previously set up your repository with Netlify, find the settings for Continuous Deployment under Settings &amp;gt; Build &amp;amp; deploy.&lt;/p&gt;
&lt;p&gt;Netlify will build your site each time you push to the private repository. If you don&amp;rsquo;t want a particular commit to trigger a build, &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#skipping-a-deploy&#34;&gt;add &lt;code&gt;[skip ci]&lt;/code&gt; in your Git commit message&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;same-same-but-different&#34;&gt;Same same but different&lt;/h2&gt;
&lt;p&gt;One effect of using Netlify this way is that your site will be built in two places: one is the separate, public GitHub Pages repository that the Makefile pushes to, and the other is your Netlify site that deploys on their CDN from your linked private GitHub repository. The latter is useful if you&amp;rsquo;re going to play with &lt;a href=&#34;https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/&#34;&gt;Deploy Previews&lt;/a&gt; and other Netlify features, but those are outside the scope of this post.&lt;/p&gt;
&lt;p&gt;The main point is that your GitHub Pages site is now updated in your public repo. Yay!&lt;/p&gt;
&lt;h1 id=&#34;go-forth-and-deploy-fearlessly&#34;&gt;Go forth and deploy fearlessly&lt;/h1&gt;
&lt;p&gt;I hope the effect of this new information is that you feel more able to update your sites, wherever you happen to be. The possibilities are endless - at home on your couch with your laptop, out cafe-hopping with your iPad, or in the middle of a first date on your phone. Endless!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;date-deploy.jpg&#34; alt=&#34;Don&#39;t update your site from your phone on a date&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Don&amp;rsquo;t do stuff on your phone when you&amp;rsquo;re on a date. Not if you want a second one, anyway.&lt;/p&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hu1664dea80ddda6cad8243ace1910f619_558187_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Git commit practices your future self will thank you for</title><link>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</link><pubDate>Mon, 06 Aug 2018 08:54:56 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</guid><description>How squash commits, vimrc, and git tags can help you make great Git commits.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/cover_git-commit-art_hu3c5d7a1ac69b5f3a44f90a6688078cc1_89530_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?&lt;/p&gt;
&lt;p&gt;If, like me, there &lt;em&gt;might&lt;/em&gt; be one or two less than stellar ones, well, we&amp;rsquo;re only human. A nice part of being human is having the ability to learn new and complex things fairly quickly, and continuously improve ourselves. In that spirit, I&amp;rsquo;d like to share some things I&amp;rsquo;ve learned about creating clean, useful, and responsible Git commits.&lt;/p&gt;
&lt;h1 id=&#34;what-does-it-mean-to-commit-responsibly&#34;&gt;What does it mean to commit responsibly?&lt;/h1&gt;
&lt;p&gt;Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today. Being responsible can mean a lot of things to different people, so I enlisted some of &lt;a href=&#34;https://mastodon.technology/@victoria/&#34;&gt;mastodon.technology&lt;/a&gt; and &lt;a href=&#34;https://dev.to/victoria/what-does-it-mean-to-commit-responsibly-22mi&#34;&gt;dev.to&lt;/a&gt; to help round out my list. From those (really great) threads, I distilled these main points:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Committing responsibly&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide and/or use tests to avoid committing bugs or broken builds&lt;/li&gt;
&lt;li&gt;Write clean code that meets style specifications&lt;/li&gt;
&lt;li&gt;Use descriptive commit messages that reference related discussion&lt;/li&gt;
&lt;li&gt;Make only one change per commit and avoid including unrelated changes&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of the above is achieved through maintaining a short feedback loop that helps you improve your code quality while staying accountable to yourself. &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/&#34;&gt;I wrote another article&lt;/a&gt; that discusses this in detail, especially the part about &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/#block-out-time-for-code-review&#34;&gt;code review&lt;/a&gt;. Other items on this list have to do specifically with making commits in Git. There are some features of Git that can benefit us in these areas, as can harnessing tools like Vim. I&amp;rsquo;ll cover those topics here.&lt;/p&gt;
&lt;p&gt;If the majority of your Git commits so far have been created with something like &lt;code&gt;git commit -m &amp;quot;Bug fixes&amp;quot;&lt;/code&gt; then this is the article for you!&lt;/p&gt;
&lt;h1 id=&#34;write-great-git-commit-messages-with-a-template&#34;&gt;Write great Git commit messages with a template&lt;/h1&gt;
&lt;p&gt;I think &lt;a href=&#34;https://github.com/torvalds/subsurface-for-dirk/commit/b6590150d68df528efd40c889ba6eea476b39873&#34;&gt;Linus&lt;/a&gt; would be very happy if we didn&amp;rsquo;t use &lt;code&gt;git commit -m &amp;quot;Fix bug&amp;quot;&lt;/code&gt; in a public repository ever again. As very well put in &lt;a href=&#34;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;this classic post&lt;/a&gt; and &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;the seven rules of a great Git commit message&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A properly formed Git commit subject line should always be able to complete the following sentence:&lt;/p&gt;
&lt;p&gt;If applied, this commit will &lt;em&gt;your subject line here&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://who-t.blogspot.com/2009/12/on-commit-messages.html&#34;&gt;This other classic post&lt;/a&gt; also discusses three questions that the body of the commit message should answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why is it necessary?&lt;br /&gt;
How does it address the issue?&lt;br /&gt;
What effects does the patch have?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be a lot to remember to cover, but there&amp;rsquo;s a slick way to have these prompts at hand right when you need it. You can set up a commit message template by using the &lt;code&gt;commit.template&lt;/code&gt; &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&#34;&gt;configuration value&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To set it, configure Git to use a template file (for example, &lt;code&gt;.gitmessage&lt;/code&gt; in your home directory), then create the template file with Vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global commit.template ~/.gitmessage
vim ~/.gitmessage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run &lt;code&gt;git commit&lt;/code&gt; without the &lt;code&gt;-m&lt;/code&gt; message flag, the editor will open with our helpful template ready to go. Here&amp;rsquo;s my commit message template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# If applied, this commit will...
# [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]
# Why is it necessary? (Bug fix, feature, improvements?)
-
# How does the change address the issue?
-
# What side effects does this change have?
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m a fan of this format because commented lines are not included in the final message. I can simply fill in the blank lines with text and bullet points under the prompts, and it comes out looking something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fix #16 missing CSS variables
- Fix for unstyled elements
- Add background color, height for code blocks
- Only affects highlight class&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reference-related-discussion&#34;&gt;Reference related discussion&lt;/h2&gt;
&lt;p&gt;Issue trackers in &lt;a href=&#34;https://help.github.com/articles/closing-issues-using-keywords/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html&#34;&gt;Bitbucket&lt;/a&gt; both recognize the keywords &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;fix&lt;/code&gt;, and &lt;code&gt;resolve&lt;/code&gt; followed immediately by the issue or pull request number. These keywords conveniently help us close the referenced issue or pull request, and this helps maintain a clear trail of changes. &lt;a href=&#34;https://about.gitlab.com/2016/03/08/gitlab-tutorial-its-all-connected/&#34;&gt;GitLab&lt;/a&gt;, and issue trackers like &lt;a href=&#34;https://confluence.atlassian.com/jirasoftwarecloud/referencing-issues-in-your-development-work-777002789.html&#34;&gt;Jira&lt;/a&gt; offer similar functionalities.&lt;/p&gt;
&lt;h2 id=&#34;use-helpful-vim-settings-for-git-commit-messages&#34;&gt;Use helpful Vim settings for git commit messages&lt;/h2&gt;
&lt;p&gt;By adding a few lines to our Vim configuration, we can make writing great git commit messages easy. We can add these lines to &lt;code&gt;~/.vimrc&lt;/code&gt; to turn on syntax highlighting in general, and spell check and text wrapping for commit messages in particular:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vimrc&#34; data-lang=&#34;vimrc&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Filetype detection, plugins, and indent rules&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filetype&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plugin&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indent&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Syntax highlighting&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Spell check and line wrap just for git commit messages&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;autocmd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Filetype&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gitcommit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setlocal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spell&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;textwidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;72&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;rsquo;re curious, &lt;a href=&#34;https://gist.github.com/victoriadrake/81699ada73748ecf7603c7708a5385ff&#34;&gt;my full &lt;code&gt;~/.vimrc&lt;/code&gt; is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other editors have settings that can help us out as well. I came across &lt;a href=&#34;https://dev.to/shreyasminocha/how-i-do-my-git-commits-34d&#34;&gt;these for Sublime Text 3&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/vscode-docs/blob/master/docs/getstarted/tips-and-tricks.md#language-specific-settings&#34;&gt;language specific settings for VS Code&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;one-change-per-commit-how-to-squash-git-commits&#34;&gt;One change per commit: how to squash Git commits&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;git-commit-squash.png&#34; alt=&#34;A doodle of squash&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Still life Git&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get one thing out of the way first: rewriting Git history just for the sake of having a pretty tree, especially with public repositories, is generally not advisable. It&amp;rsquo;s kind of like going back in time, where changes you make to your version of the project cause it to look completely different from a version that someone else forked from a point in history that you&amp;rsquo;ve now erased - I mean, haven&amp;rsquo;t you seen &lt;em&gt;Back to the Future Part II&lt;/em&gt;? (If you&amp;rsquo;d rather maintain that only one &lt;em&gt;Back to the Future&lt;/em&gt; movie was ever made, thus sparing your future self from having to watch the sequels, I get it.)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the main point. If you&amp;rsquo;ve pushed messy commits to a public repository, I say go right ahead and leave them be, instead of complicating things further. (We all learn from our embarrassments, especially the public ones - I&amp;rsquo;m looking at you, past-Vicky.) If your messy commits currently only exist on your local version, great! We can tidy them up into one clean, well-described commit that we&amp;rsquo;ll be proud to push, and no one will be the wiser.&lt;/p&gt;
&lt;p&gt;There are a couple different ways to squash commits, and choosing the appropriate one depends on what we need to achieve.&lt;/p&gt;
&lt;p&gt;The following examples are illustrated using &lt;code&gt;git log --graph&lt;/code&gt;, with some options for brevity. We can set a handy alias to see this log format in our terminal with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global alias.plog &lt;span class=&#34;s2&#34;&gt;&amp;#34;log --graph --pretty=format:&amp;#39;%h -%d %s %n&amp;#39; --abbrev-commit --date=relative --branches&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we just do &lt;code&gt;git plog&lt;/code&gt; to see the pretty log.&lt;/p&gt;
&lt;h2 id=&#34;method-1-one-commit-to-rule-the-master-branch&#34;&gt;Method #1: one commit to rule the master branch&lt;/h2&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;re committing directly to master&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t intend to open a pull request to merge a feature&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t want to preserve history of branches or changes we haven&amp;rsquo;t yet pushed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method takes a Git tree that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 3e8fd79 - (HEAD -&amp;gt; master) Fix a thing
|
* 4f0d387 - Tweak something
|
* 0a6b8b3 - Merge branch &amp;#39;new-article&amp;#39;
|\
| * 33b5509 - (new-article) Update article again again
| |
| * 1782e63 - Update article again
| |
| * 3c5b6a8 - Update article
| |
* | f790737 - (master) Tweak unrelated article
|/
|
* 65af7e7 Add social media link
|
* 0e3fa32 (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And makes it look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 7f9a127 - (HEAD -&amp;gt; master) Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s how to do it - hold on to your hoverboards, it&amp;rsquo;s super complicated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset --soft origin/master
git commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yup that&amp;rsquo;s all. We can delete the unwanted branch with &lt;code&gt;git branch -D new-article&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;method-2-not-that-much&#34;&gt;Method #2: not &lt;em&gt;that&lt;/em&gt; much!&lt;/h2&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want to squash the last &lt;em&gt;x&lt;/em&gt; commits but not &lt;em&gt;all&lt;/em&gt; commits since &lt;code&gt;origin/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We want to open a pull request to merge a branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method takes a Git tree that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 13a070f - (HEAD -&amp;gt; new-article) Finish new article
|
* 78e728a - Edit article draft
|
* d62603c - Add example
|
* 1aeb20e - Update draft
|
* 5a8442a - Add new article draft
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And makes it look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 90da69a - (HEAD -&amp;gt; new-article) Add new article
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To squash the last five commits on branch &lt;code&gt;new-article&lt;/code&gt; into one, we use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset --soft HEAD~5
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;New message for the combined commit&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;--soft&lt;/code&gt; leaves our files untouched and staged, and &lt;code&gt;5&lt;/code&gt; can be thought of as &amp;ldquo;the number of previous commits I want to combine.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We can then do &lt;code&gt;git merge master&lt;/code&gt; and create our pull request.&lt;/p&gt;
&lt;h2 id=&#34;method-3-getting-picky&#34;&gt;Method #3: getting picky&lt;/h2&gt;
&lt;p&gt;Say we had a really confusing afternoon and our Git tree looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* dc89918 - (HEAD -&amp;gt; master) Add link
|
* 9b6780f - Update image asset
|
* 6379956 - Fix CSS bug
|
* 16ee1f3 - Merge master into branch
|\
| |
| * ccec365 - Update list page
| |
* | 033dee7 - Fix typo
| |
* | 90da69a - Add new article
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to retain some of this history, but clean up the commits. We also want to change the messages for some of the commits. To achieve this, we&amp;rsquo;ll use &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want to squash only some commits&lt;/li&gt;
&lt;li&gt;We want to edit previous commit messages&lt;/li&gt;
&lt;li&gt;We want to delete or reorder specific commits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git &lt;code&gt;rebase&lt;/code&gt; is a powerful tool, and handy once we&amp;rsquo;ve got the hang of it. To change all the commits since &lt;code&gt;origin/master&lt;/code&gt;, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase -i origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, we can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase -i 0e3fa32&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the commit hash is the last commit we want to retain as-is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; option lets us run the interactive rebase tool, which launches our editor with, essentially, a script for us to modify. We&amp;rsquo;ll see a list of our commits in reverse order to the git log, with the oldest at the top:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;pick 90da69a Add new article
pick 033dee7 Fix typo
pick ccec365 Update list page
pick 6379956 Fix CSS bug
pick 9b6780f Update image asset
pick dc89918 Add link
# Rebase 0e3fa32..dc89918 onto 0e3fa32 (6 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &amp;#34;squash&amp;#34;, but discard this commit&amp;#39;s log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
#
~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The comments give us a handy guide as to what we&amp;rsquo;re able to do. For now, let&amp;rsquo;s squash the commits with small changes into the more significant commits. In our editor, we change the script to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;pick 90da69a Add new article
squash 033dee7 Fix typo
pick ccec365 Update list page
squash 6379956 Fix CSS bug
squash 9b6780f Update image asset
squash dc89918 Add link&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we save the changes, the interactive tool continues to run. It will execute our instructions in sequence. In this case, we see the editor again with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# This is a combination of 2 commits.
# This is the 1st commit message:
Add new article
# This is the commit message #2:
Fix typo
# Please enter the commit message for your changes. Lines starting
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.
#
# interactive rebase in progress; onto 0e3fa32
# Last commands done (2 commands done):
# pick 90da69a Add new article
# squash 033dee7 Fix typo
# Next commands to do (4 remaining commands):
# pick ccec365 Update list page
# squash 6379956 Fix CSS bug
# You are currently rebasing branch &amp;#39;master&amp;#39; on &amp;#39;0e3fa32&amp;#39;.
#
# Changes to be committed:
# modified: ...
#
~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s our chance to create a new commit message for this first squash, if we want to. Once we save it, the interactive tool will go on to the next instructions. Unless&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;[detached HEAD 3cbad01] Add new article
1 file changed, 129 insertions(+), 19 deletions(-)
Auto-merging content/dir/file.md
CONFLICT (content): Merge conflict in content/dir/file.md
error: could not apply ccec365... Update list page
Resolve all conflicts manually, mark them as resolved with
&amp;#34;git add/rm &amp;lt;conflicted_files&amp;gt;&amp;#34;, then run &amp;#34;git rebase --continue&amp;#34;.
You can instead skip this commit: run &amp;#34;git rebase --skip&amp;#34;.
To abort and get back to the state before &amp;#34;git rebase&amp;#34;, run &amp;#34;git rebase --abort&amp;#34;.
Could not apply ccec365... Update list page&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, the tool offers some very helpful instructions. Once we fix the merge conflict, we can resume the process with &lt;code&gt;git rebase --continue&lt;/code&gt;. Our interactive rebase picks up where it left off.&lt;/p&gt;
&lt;p&gt;Once all the squashing is done, our Git tree looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 3564b8c - (HEAD -&amp;gt; master) Update list page
|
* 3cbad01 - Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Phew, much better.&lt;/p&gt;
&lt;h1 id=&#34;git-stash&#34;&gt;Git stash&lt;/h1&gt;
&lt;p&gt;If we&amp;rsquo;re in the middle of some work and it&amp;rsquo;s not a good time to commit, but we need to switch branches, &lt;a href=&#34;https://git-scm.com/book/en/v1/Git-Tools-Stashing&#34;&gt;stashing&lt;/a&gt; can be a good option. Stashing lets us save our unfinished work without needing to create a half-assed commit. It&amp;rsquo;s like that pile of paper on your desk representing all the stuff you&amp;rsquo;ve been in the middle of doing since two weeks ago. Yup, that one.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s as easy as typing &lt;code&gt;git stash&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Saved working directory and index state WIP on master: 3564b8c Update list page&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The dirty work we&amp;rsquo;re in the midst of is safely tucked away, and our working directory is clean - just as it was after our last commit. To see what&amp;rsquo;s in our stash stack, we do &lt;code&gt;git stash list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;stash@{0}: WIP on master: 3564b8c Update list page
stash@{1}: WIP on master: 90da69a Add new article
stash@{2}: WIP on cleanup: 0e3fa32 Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To restore our work in progress, we use &lt;code&gt;git stash apply&lt;/code&gt;. Git will try and apply our most recent stashed work. To apply an older stash, we use &lt;code&gt;git stash apply stash@{1}&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is the stash to apply. If changes since stashing our work prevent the stash from reapplying cleanly, Git will give us a merge conflict to resolve.&lt;/p&gt;
&lt;p&gt;Applying a stash doesn&amp;rsquo;t remove it from our list. To remove a stash from our stack, we do &lt;code&gt;git stash drop stash@{0}&lt;/code&gt; where &lt;code&gt;0&lt;/code&gt; is the one we want to remove.&lt;/p&gt;
&lt;p&gt;We can also use &lt;code&gt;git stash pop&lt;/code&gt; to apply the most recent stash and then immediately remove it from the stack.&lt;/p&gt;
&lt;h1 id=&#34;tag-release-versions-using-annotated-git-tags&#34;&gt;Tag release versions using annotated Git tags&lt;/h1&gt;
&lt;p&gt;In the spirit of having a beautiful, clean Git history, there&amp;rsquo;s one more thing we can do to help make our commit log inspire infinite joy in its viewers. If you&amp;rsquo;ve never heard of &lt;code&gt;git tag&lt;/code&gt;, your master branch history might look like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 0377782 - Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - Add main content (#6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be nice if it looked like this instead?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 0377782 - (tag: v2.1.0) Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - (tag: v2.0.0) Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - (tag: v1.1.0) Add main content (#6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can tag Git commits with anything, but tags are especially helpful for semantic versioning of releases. Sites like &lt;a href=&#34;https://help.github.com/articles/creating-releases/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ce/workflow/releases.html&#34;&gt;GitLab&lt;/a&gt; have pages for repositories that list tags, letting viewers of our project browse the release versions. This can be helpful for public projects to differentiate major releases, updates with bug fixes, or beta versions.&lt;/p&gt;
&lt;p&gt;There are two types of Git tags: lightweight and annotated. For adding a version tag to commits, we use annotated Git tags.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://git-scm.com/docs/git-tag&#34;&gt;Git tag documentation&lt;/a&gt; explains it this way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tag objects (created with -a, -s, or -u) are called &amp;ldquo;annotated&amp;rdquo; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &amp;ldquo;lightweight&amp;rdquo; tag is simply a name for an object (usually a commit object).&lt;/p&gt;
&lt;p&gt;Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can think of lightweight tags as bookmarks, and annotated tags as signed releases.&lt;/p&gt;
&lt;p&gt;For public repositories, annotated tags allow us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See who tagged the commit, which may differ from the commit author&lt;/li&gt;
&lt;li&gt;See all the tags with &lt;code&gt;git describe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Avoid conflicting tag names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create an annotated Git tag and attach it to our current (last) commit, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git tag -a v1.2.0 -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Clever release title&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tags the commit on our local repository. To push all annotated tags to the remote, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git push --follow-tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also set our Git configuration to push our annotated tags by default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global push.followTags true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we then want to skip pushing tags this time, we pass &lt;code&gt;--no-follow-tags&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;practice-responsible-commits&#34;&gt;Practice responsible commits&lt;/h1&gt;
&lt;p&gt;A little time invested in getting familiar with these tools and practices can make your commits even more useful and well-crafted. With a little practice, these processes will become second nature. You can make it even easier by creating a personal commit checklist on paper to keep handy while you work - or if that isn&amp;rsquo;t fun enough, &lt;a href=&#34;https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/&#34;&gt;make it an interactive pre-commit hook.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating clean, useful, and responsible Git commits says a lot about you. Especially in the current climate of remote work, Git commits may be a primary way that people interact with you over projects. With a little practice and effort, you can make your commit habits an even better reflection of your best work - work that is evidently created with care and pride.&lt;/p&gt;
&lt;h1 id=&#34;reference-links&#34;&gt;Reference links&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&#34;&gt;Git Tools - Rewriting History&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/docs/git-describe&#34;&gt;git-describe&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work&#34;&gt;Git Tools - Signing Your Work&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&#34;&gt;Customizing Git - Git Configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v1/Git-Tools-Stashing&#34;&gt;Git Tools - Stashing&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;Git Basics - Tagging&lt;/a&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/cover_git-commit-art_hu3c5d7a1ac69b5f3a44f90a6688078cc1_89530_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>An automatic interactive pre-commit checklist, in the style of infomercials</title><link>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</link><pubDate>Mon, 23 Jul 2018 09:38:09 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</guid><description>How to set up an interactive checklist using a Git pre-commit hook script.</description><content:encoded>
&lt;p&gt;What&amp;rsquo;s that, you say? You&amp;rsquo;ve become tired of regular old boring &lt;em&gt;paper checklists?&lt;/em&gt; Well, my friend, today is your lucky day! You, yes, &lt;em&gt;you,&lt;/em&gt; can become the proud owner of a brand-spanking-new &lt;em&gt;automatic interactive pre-commit hook checklist!&lt;/em&gt; You&amp;rsquo;re gonna love this! Your life will be so much easier! Just wait until your friends see you.&lt;/p&gt;
&lt;h1 id=&#34;what-s-a-pre-commit-hook&#34;&gt;What&amp;rsquo;s a pre-commit hook?&lt;/h1&gt;
&lt;p&gt;Did you know that nearly &lt;em&gt;1 out of 5 coders&lt;/em&gt; are too embarrassed to ask this question? Don&amp;rsquo;t worry, it&amp;rsquo;s perfectly normal. In the next 60 seconds we&amp;rsquo;ll tell you all you need to know to pre-commit with confidence.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;Git hook&lt;/a&gt; is a feature of Git that triggers custom scripts at useful moments. They can be used for all kinds of reasons to help you automate your work, and best of all, you already have them! In every repository that you initialize with &lt;code&gt;git init&lt;/code&gt;, you&amp;rsquo;ll have a set of example scripts living in &lt;code&gt;.git/hooks&lt;/code&gt;. They all end with &lt;code&gt;.sample&lt;/code&gt; and activating them is as easy as renaming the file to remove the &lt;code&gt;.sample&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;Git hooks are not copied when a repository is cloned, so you can make them as personal as you like.&lt;/p&gt;
&lt;p&gt;The useful moment in particular that we&amp;rsquo;ll talk about today is the &lt;em&gt;pre-commit&lt;/em&gt;. This hook is run after you do &lt;code&gt;git commit&lt;/code&gt;, and before you write a commit message. Exiting this hook with a non-zero status will abort the commit, which makes it extremely useful for last-minute quality checks. Or, a bit of fun. Why not both!&lt;/p&gt;
&lt;h1 id=&#34;how-do-i-get-a-pre-commit-checklist&#34;&gt;How do I get a pre-commit checklist?&lt;/h1&gt;
&lt;p&gt;I only want the best for my family and my commits, and that&amp;rsquo;s why I choose an interactive pre-commit checklist. Not only is it fun to use, it helps to keep my projects safe from unexpected off-spec mistakes!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s so easy! I just write a bash script that can read user input, and plop it into &lt;code&gt;.git/hooks&lt;/code&gt; as a file named &lt;code&gt;pre-commit&lt;/code&gt;. Then I do &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; to make it executable, and I&amp;rsquo;m done!&lt;/p&gt;
&lt;p&gt;Oh look, here comes an example bash script now!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Would you like to play a game?&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Read user input, assign stdin to keyboard&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Have you double checked that only relevant files were added? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please ensure the right files were added!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Has the documentation been updated? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please add or update the docs!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Do you know which issue or PR numbers to reference? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Better go check those tracking numbers!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;take-my-money&#34;&gt;Take my money!&lt;/h1&gt;
&lt;p&gt;Don&amp;rsquo;t delay! Take advantage &lt;em&gt;right now&lt;/em&gt; of this generous &lt;em&gt;one-time offer!&lt;/em&gt; An interactive pre-commit hook checklist can be yours, today, for the low, low price of&amp;hellip; free? Wait, who wrote this script?&lt;/p&gt;</content:encoded></item><item><title>Batch renaming images, including image resolution, with awk</title><link>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</link><pubDate>Mon, 20 Nov 2017 13:59:30 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</guid><description>How to batch rename images with custom values using file, awk, and rename - in rainbow colors!</description><content:encoded>
&lt;p&gt;The most recent item on my list of &amp;ldquo;Geeky things I did that made me feel pretty awesome&amp;rdquo; is an hour&amp;rsquo;s adventure that culminated in this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fr&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fr&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg
IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg
IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg
IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg
IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg
IMG_20170808_173450_971.jpg renamed as img_5_3024x3024.jpg
IMG_20170808_173536_034.jpg renamed as img_6_4032x3024.jpg
IMG_20170808_173602_732.jpg renamed as img_7_1617x1617.jpg
IMG_20170808_173645_339.jpg renamed as img_8_3024x3780.jpg
IMG_20170909_170146_585.jpg renamed as img_9_3036x3036.jpg
IMG_20170911_211522_543.jpg renamed as img_10_3036x3036.jpg
IMG_20170913_071608_288.jpg renamed as img_11_2760x2760.jpg
IMG_20170913_073205_522.jpg renamed as img_12_2738x2738.jpg
// ... etc etc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last item on the aforementioned list is &amp;ldquo;TODO: come up with a shorter title for this list.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I previously wrote about the power of command line tools like &lt;a href=&#34;https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/&#34;&gt;sed&lt;/a&gt;. This post expands on how to string all this magical functionality into one big, long, rainbow-coloured, viscous stream of awesome.&lt;/p&gt;
&lt;h2 id=&#34;rename-files&#34;&gt;Rename files&lt;/h2&gt;
&lt;p&gt;The tool that actually handles the renaming of our files is, appropriately enough, &lt;code&gt;rename&lt;/code&gt;. The syntax is: &lt;code&gt;rename -n &amp;quot;s/original_filename/new_filename/g&amp;quot; *&lt;/code&gt; where &lt;code&gt;-n&lt;/code&gt; does a dry-run, and substituting &lt;code&gt;-v&lt;/code&gt; would rename the files. The &lt;code&gt;s&lt;/code&gt; indicates our substitution string, and &lt;code&gt;g&lt;/code&gt; for &amp;ldquo;global&amp;rdquo; finds all occurrences of the string. The &lt;code&gt;*&lt;/code&gt; matches zero or more occurrences of our search-and-replace parameters.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll come back to this later.&lt;/p&gt;
&lt;h2 id=&#34;get-file-information&#34;&gt;Get file information&lt;/h2&gt;
&lt;p&gt;When I run &lt;code&gt;$ file IMG_20170808_172653_425.jpg&lt;/code&gt; in the image directory, I get this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;IMG_20170808_172653_425.jpg: JPEG image data, baseline, precision &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;, 4032x3024, frames &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we can get the image resolution (&amp;ldquo;4032x3024&amp;rdquo; above), we know that we&amp;rsquo;ll be able to use it in our new filename.&lt;/p&gt;
&lt;h2 id=&#34;isolate-the-information-we-want&#34;&gt;Isolate the information we want&lt;/h2&gt;
&lt;p&gt;I love &lt;code&gt;awk&lt;/code&gt; for its simplicity. It takes lines of text and makes individual bits of information available to us with built in variables that we can then refer to as column numbers denoted by &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. By default, &lt;code&gt;awk&lt;/code&gt; splits up columns on whitespace. To take the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
-------------------------------------------------------------------------------------------------------------
| IMG_20170808_172653_425.jpg: | JPEG | image | data, | baseline, | precision | 8, | 4032x3024, | frames | 3 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can denote different values to use as a splitter with, for example, &lt;code&gt;-F&#39;,&#39;&lt;/code&gt; if we wanted to use commas as the column divisions. For our current project, spaces are fine.&lt;/p&gt;
&lt;p&gt;There are a couple issues we need to solve before we can plug the information into our new filenames. Column &lt;code&gt;$1&lt;/code&gt; has the original filename we want, but there&amp;rsquo;s an extra &amp;ldquo;:&amp;rdquo; character on the end. We don&amp;rsquo;t need the &amp;ldquo;.jpg&amp;rdquo; either. Column &lt;code&gt;$8&lt;/code&gt; has an extra &amp;ldquo;,&amp;rdquo; that we don&amp;rsquo;t want as well. To get just to information we need, we&amp;rsquo;ll take a substring of the column with &lt;code&gt;substr()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr($1, 1, length($1)-5)&lt;/code&gt; - This gives us the file name from the beginning of the string to the end of the string, minus 5 characters (&amp;ldquo;length minus 5&amp;rdquo;).
&lt;code&gt;substr($8,1, length($8)-1)&lt;/code&gt; - This gives us the image size, without the extra comma (&amp;ldquo;length minus 1&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;avoid-duplicate-file-names&#34;&gt;Avoid duplicate file names&lt;/h2&gt;
&lt;p&gt;To ensure that two images with the same resolutions don&amp;rsquo;t create identical, competing file names, we&amp;rsquo;ll append a unique incrementing number to the filename.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BEGIN{a=0}&lt;/code&gt; - Using &lt;code&gt;BEGIN&lt;/code&gt; tells &lt;code&gt;awk&lt;/code&gt; to run the following code only once, at the (drumroll) beginning. Here, we&amp;rsquo;re declaring the variable &lt;code&gt;a&lt;/code&gt; to be &lt;code&gt;0&lt;/code&gt;.
&lt;code&gt;a++&lt;/code&gt; - Later in our code, at the appropriate spot for our file name, we call &lt;code&gt;a&lt;/code&gt; and increment it.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;awk&lt;/code&gt; prints a string, it concatenates everything that isn&amp;rsquo;t separated by a comma. &lt;code&gt;{print a b c}&lt;/code&gt; would create &amp;ldquo;abc&amp;rdquo; and &lt;code&gt;{print a,b,c}&lt;/code&gt; would create &amp;ldquo;a b c&amp;rdquo;, for example.&lt;/p&gt;
&lt;p&gt;We can add additional characters to our file name, such as an underscore, by inserting it in quotations: &lt;code&gt;&amp;quot;_&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;string-it-all-together&#34;&gt;String it all together&lt;/h2&gt;
&lt;p&gt;To feed the output of one command into another command, we use &amp;ldquo;pipe,&amp;rdquo; written as &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we only used pipe in this instance, all our data from &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; would get fed into &lt;code&gt;rename&lt;/code&gt; all at once, making for one very, very long and probably non-compiling file name. To run the &lt;code&gt;rename&lt;/code&gt; command line by line, we can use &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Similarly to &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; takes input and splits it into variables we can assign and use. In our code, it takes the first bit of output from &lt;code&gt;awk&lt;/code&gt; (the original file name) and assigns that the variable name &lt;code&gt;$fn&lt;/code&gt;. It takes the second output (our incrementing number and the image resolution) and assigns that to &lt;code&gt;$fr&lt;/code&gt;. The variable names are arbitrary; you can call them whatever you want.&lt;/p&gt;
&lt;p&gt;To run our &lt;code&gt;rename&lt;/code&gt; commands as if we&amp;rsquo;d manually entered them in the terminal one by one, we can use &lt;code&gt;echo $(some command)&lt;/code&gt;. Finally, &lt;code&gt;done&lt;/code&gt; ends our &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;bonus-round-rainbow-output&#34;&gt;Bonus round: rainbow output!&lt;/h2&gt;
&lt;p&gt;I wasn&amp;rsquo;t kidding with that &lt;a href=&#34;https://github.com/tehmaze/lolcat&#34;&gt;&amp;ldquo;rainbow-coloured&amp;rdquo; bit&amp;hellip;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s our full code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fs&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fs&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded></item><item><title>How to replace a string in a dozen old blog posts with one sed terminal command</title><link>https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/</link><pubDate>Sat, 06 May 2017 20:04:53 +0800</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/</guid><description>How to use sed to update a URL in all your old blog posts with simple find and replace.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/cover_sed_hu0a982320f6b8be4e2c17737e58dbed29_189790_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;&lt;em&gt;June 1, 2018: This post was previously titled &amp;ldquo;That time 30 seconds, StackOverflow, and sed saved me 30 minutes&amp;rdquo; and has since been revised and updated with more examples and a couple new doodles. It&amp;rsquo;s better now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve had more than a few usernames, URLs, and Twitter handles over the years. Whether it was changing to something that better reflected my current interests or briefly getting caught up in the &amp;ldquo;.io&amp;rdquo; domain craze, there always seemed to be a great reason for an Internet presence refresh. The downside to all this fresh rebranding is that it often means needing to update a lot of links. (If you want to redirect an old blog post URL, check out &lt;a href=&#34;https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/&#34;&gt;this article&lt;/a&gt; too!)&lt;/p&gt;
&lt;p&gt;This week, I launched my new website and changed my Twitter username to match. I was about to spend time manually going through all my old blog posts to find and update the URLs when this very future blog post popped up on my screen like &lt;a href=&#34;http://knowyourmeme.com/memes/clippy&#34;&gt;Clippy&lt;/a&gt; and shook its pixelated head disapprovingly.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a worthwhile new habit for you: anytime you find yourself going &amp;ldquo;Ughhh I have to do &lt;em&gt;that?&lt;/em&gt; It&amp;rsquo;ll take forever!&amp;rdquo; head on over to &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; and search for &amp;ldquo;terminal command (the thing you&amp;rsquo;re trying to do)”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sed-duck.png&#34; alt=&#34;Superhero DuckDuckGo doodle&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Superhero Duck is here to save your future hours!&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I found to save myself a whole bunch of mindless tedium.&lt;/p&gt;
&lt;h1 id=&#34;update-a-string-in-dozens-of-blog-posts-using-sed&#34;&gt;Update a string in dozens of blog posts using sed&lt;/h1&gt;
&lt;p&gt;Meet your new friend &lt;code&gt;sed&lt;/code&gt;. This amazingly powerful tool lives in your terminal and is available to be totally underused for things like finding and replacing strings in files. (I seem to have a habit of suggesting ways to totally underuse powerful tools, as in my exploration of how to &lt;a href=&#34;https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/&#34;&gt;use cron to create desktop notifications&lt;/a&gt;, but I digress.)&lt;/p&gt;
&lt;h2 id=&#34;current-directory-non-recursive&#34;&gt;Current directory, non-recursive&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Non-recursive&lt;/strong&gt; means sed won&amp;rsquo;t change files in any subdirectories of the current folder.&lt;/p&gt;
&lt;p&gt;Run this command to search all the files in your current directory and replace a given string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;// to replace &lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; with &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
$ sed -i -- &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s what each component of the command does:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; will change the original, and stands for &amp;ldquo;in-place.&amp;rdquo;&lt;br /&gt;
&lt;code&gt;s&lt;/code&gt; is for substitute, so we can find and replace.&lt;br /&gt;
&lt;code&gt;foo&lt;/code&gt; is the string we&amp;rsquo;ll be taking away,&lt;br /&gt;
&lt;code&gt;bar&lt;/code&gt; is the string we&amp;rsquo;ll use instead today.&lt;br /&gt;
&lt;code&gt;g&lt;/code&gt; as in &amp;ldquo;global&amp;rdquo; means &amp;ldquo;all occurrences, please.&amp;rdquo;&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt; denotes all file types. (No more rhymes. What a tease.)&lt;/p&gt;
&lt;p&gt;You can limit the operation to one file type, such as &lt;code&gt;txt&lt;/code&gt;, by using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sed -i -- &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; *.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;current-directory-and-subdirectories-recursive&#34;&gt;Current directory and subdirectories, recursive&lt;/h2&gt;
&lt;p&gt;We can supplement &lt;code&gt;sed&lt;/code&gt; with &lt;code&gt;find&lt;/code&gt; to expand our scope to all the current folder&amp;rsquo;s subdirectories. This will include any hidden files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To ignore hidden files (such as &lt;code&gt;.git&lt;/code&gt;) you can pass the negation modifier &lt;code&gt;-not -path &#39;*/\.*&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -not -path &lt;span class=&#34;s1&#34;&gt;&amp;#39;*/\.*&amp;#39;&lt;/span&gt; -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will exclude any file that has the string &lt;code&gt;/.&lt;/code&gt; in its path.&lt;/p&gt;
&lt;p&gt;Alternatively, you can limit the operation to file names that end in a certain extension, like Markdown:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*.md&amp;#34;&lt;/span&gt; -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;working-with-urls-change-the-separator&#34;&gt;Working with URLs: change the separator&lt;/h2&gt;
&lt;p&gt;In the case of needing to update a URL, the &lt;code&gt;/&lt;/code&gt; separator in your strings will need escaping. It ends up looking like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/https:\/\/www.oldurl.com\/blog/https:\/\/www.newurl.com\/blog/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can avoid some confusion and mistakes by changing the separator to any non-conflicting character. The character that follows the &lt;code&gt;s&lt;/code&gt; will be treated as the separator. In our case, using a &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; would do. This doesn&amp;rsquo;t require escaping and is much more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s_https://www.oldurl.com/blog_https://www.newurl.com/blog_g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;maybe-endless-possibilities&#34;&gt;(Maybe) endless possibilities!&lt;/h1&gt;
&lt;p&gt;There&amp;rsquo;s a lot more that &lt;code&gt;sed&lt;/code&gt; can do. I&amp;rsquo;ll be adding to this living post as I find more examples that are useful. For now, &lt;a href=&#34;http://www.folkstalk.com/2012/01/sed-command-in-unix-examples.html&#34;&gt;here are some other use cases&lt;/a&gt; that you may find handy.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/cover_sed_hu0a982320f6b8be4e2c17737e58dbed29_189790_640x0_resize_box_2.png" type="image/jpg"/></item></channel></rss>