<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terminal on victoria.dev</title><link>https://victoria.dev/tags/terminal/</link><description>Recent content in terminal on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria Drake)</managingEditor><webMaster>hello@victoria.dev (Victoria Drake)</webMaster><lastBuildDate>Mon, 15 Feb 2021 01:38:07 -0500</lastBuildDate><atom:link href="https://victoria.dev/tags/terminal/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a self-hosted chat service with your own Matrix server</title><link>https://victoria.dev/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/</link><pubDate>Mon, 15 Feb 2021 01:38:07 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/</guid><description>Matrix is an open standard for decentralized real-time communication. The specification is production-ready and bridges to tons of silo products like Slack, Gitter, Telegram, Discord, and even Facebook Messenger. This lets you use Matrix to link together disjoint communities in one place, or create an alternative communication method that works with, but is independent of, communication silos.
You can create your own self-hosted Matrix chat for as little as $3.50 USD per month on an AWS Lightsail instance.</description></item><item><title>Deceptively simple search-and-replace across multiple files</title><link>https://victoria.dev/blog/deceptively-simple-search-and-replace-across-multiple-files/</link><pubDate>Tue, 25 Aug 2020 04:48:39 -0600</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/deceptively-simple-search-and-replace-across-multiple-files/</guid><description>While a multitude of methods exist to search for and replace words in a single file, what do you do when you&amp;rsquo;ve got a string to update across multiple unrelated files, all with different names? You harness the power of command line tools, of course!
First, you&amp;rsquo;ll need to find all the files you want to change. Stringing together what are effectively search queries for find is really only limited by your imagination.</description></item><item><title>Look mom, I'm a GitHub Action Hero</title><link>https://victoria.dev/blog/look-mom-im-a-github-action-hero/</link><pubDate>Sat, 27 Jun 2020 09:06:33 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/look-mom-im-a-github-action-hero/</guid><description>GitHub recently interviewed me for their blog editorial entitled GitHub Action Hero: Victoria Drake. Here&amp;rsquo;s a behind-the-scenes peek at the original interview questions and my answers.
What is the name of your Action? Please include a link too. Among the several Actions I&amp;rsquo;ve built, I have two current favorites. One is hugo-remote, which lets you continuously deploy a Hugo static site from a private source repository to a public GitHub Pages repository.</description></item><item><title>Command line tricks for managing your messy open source repository</title><link>https://victoria.dev/blog/command-line-tricks-for-managing-your-messy-open-source-repository/</link><pubDate>Mon, 17 Feb 2020 08:05:06 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/command-line-tricks-for-managing-your-messy-open-source-repository/</guid><description>Effective collaboration, especially in open source software development, starts with effective organization. To make sure that nothing gets missed, the general rule, &amp;ldquo;one issue, one pull request&amp;rdquo; is a nice rule of thumb.
Instead of opening an issue with a large scope like, &amp;ldquo;Fix all the broken links in the documentation,&amp;rdquo; open source projects will have more luck attracting contributors with several smaller and more manageable issues. In the preceding example, you might scope broken links by section or by page.</description></item><item><title>The surprisingly difficult task of printing newlines in a terminal</title><link>https://victoria.dev/blog/the-surprisingly-difficult-task-of-printing-newlines-in-a-terminal/</link><pubDate>Wed, 04 Dec 2019 09:17:35 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/the-surprisingly-difficult-task-of-printing-newlines-in-a-terminal/</guid><description>Surprisingly, getting computers to give humans readable output is no easy feat. With the introduction of standard streams and specifically standard output, programs gained a way to talk to each other using plain text streams; humanizing and displaying stdout is another matter. Technology throughout the computing age has tried to solve this problem, from the use of ASCII characters in video computer displays to modern shell commands like echo and printf.</description></item><item><title>Bash and shell expansions: lazy list-making</title><link>https://victoria.dev/blog/bash-and-shell-expansions-lazy-list-making/</link><pubDate>Mon, 18 Nov 2019 07:07:24 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/bash-and-shell-expansions-lazy-list-making/</guid><description>It&amp;rsquo;s that time of year again! When stores start putting up colourful sparkly lit-up plastic bits, we all begin to feel a little festive, and by festive I mean let&amp;rsquo;s go shopping. Specifically, holiday gift shopping! (Gifts for yourself are still gifts, technically.)
Just so this doesn&amp;rsquo;t all go completely madcap, you ought to make some gift lists. Bash can help.
Brace expansion These are not braces: ()
Neither are these: []</description></item><item><title>A cron job that could save you from a ransomware attack</title><link>https://victoria.dev/blog/a-cron-job-that-could-save-you-from-a-ransomware-attack/</link><pubDate>Wed, 13 Nov 2019 08:27:31 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-cron-job-that-could-save-you-from-a-ransomware-attack/</guid><description>It&amp;rsquo;s 2019, and ransomware has become a thing.
Systems that interact with the public, like companies, educational institutions, and public services, are most susceptible. While delivery methods for ransomware vary from the physical realm to communication via social sites and email, all methods only require one person to make one mistake in order for ransomware to proliferate.
Ransomware, as you may have heard, is a malicious program that encrypts your files, rendering them unreadable and useless to you.</description></item><item><title>A lightweight, tool-agnostic CI/CD flow with GitHub Actions</title><link>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</link><pubDate>Mon, 28 Oct 2019 08:28:52 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</guid><description>Agnostic tooling is the clever notion that you should be able to run your code in various environments. With many continuous integration and continuous development (CI/CD) apps available, agnostic tooling gives developers a big advantage: portability.
Of course, having your CI/CD work everywhere is a tall order. Popular CI apps for GitHub repositories alone use a multitude of configuration languages spanning Groovy, YAML, TOML, JSON, and more&amp;hellip; all with differing syntax, of course.</description></item><item><title>A portable Makefile for continuous delivery with Hugo and GitHub Pages</title><link>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</link><pubDate>Mon, 21 Oct 2019 09:09:06 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</guid><description>Fun fact: I first launched this GitHub Pages site 1,018 days ago.
Since then, we&amp;rsquo;ve grown together. From early cringe-worthy commit messages, through eighty-six versions of Hugo, and up until last week, a less-than-streamlined multi-app continuous integration and deployment (CI/CD) workflow.
If you know me at all, you know I love to automate things. I&amp;rsquo;ve been using a combination of AWS Lambda, Netlify, and Travis CI to automatically build and publish this site.</description></item><item><title>How to quickly batch resize, compress, and convert images with a Bash one-liner</title><link>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</link><pubDate>Mon, 14 Oct 2019 08:27:49 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</guid><description>Part of my Hugo site continuous deployment workflow is the processing of 210 images, at time of writing.
Here&amp;rsquo;s my one-liner:
find public/ -not -path &amp;#34;*/static/*&amp;#34; \( -name &amp;#39;*.png&amp;#39; -o -name &amp;#39;*.jpg&amp;#39; -o -name &amp;#39;*.jpeg&amp;#39; \) -print0 | xargs -0 -P8 -n2 mogrify -strip -thumbnail &amp;#39;1000&amp;gt;&amp;#39; -format jpg I use find to target only certain image file formats in certain directories. With mogrify, part of ImageMagick, I resize only the images that are larger than a certain dimension, compress them, and strip the metadata.</description></item><item><title>How to do twice as much with half the keystrokes using `.bashrc`</title><link>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</link><pubDate>Wed, 21 Aug 2019 09:17:02 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</guid><description>In my recent post about setting up Ubuntu with Bash scripts, I briefly alluded to the magic of .bashrc. This didn&amp;rsquo;t really do it justice, so here&amp;rsquo;s a quick post that offers a bit more detail about what the Bash configuration file can do.
My current configuration hugely improves my workflow, and saves me well over 50% of the keystrokes I would have to employ without it! Let&amp;rsquo;s look at some examples of aliases, functions, and prompt configurations that can improve our workflow by helping us be more efficient with fewer key presses.</description></item><item><title>How to set up a fresh Ubuntu desktop using only dotfiles and bash scripts</title><link>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</link><pubDate>Mon, 19 Aug 2019 07:58:18 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</guid><description>One of my most favorite things about open source files on GitHub is the ability to see how others do (what some people might call) mundane things, like set up their .bashrc and other dotfiles. While I&amp;rsquo;m not as enthusiastic about ricing as I was when I first came to the Linux side, I still get pretty excited when I find a config setting that makes things prettier and faster, and thus, better.</description></item><item><title>How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</link><pubDate>Tue, 06 Aug 2019 10:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</guid><description>Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into automatically re-creating my laptop with Bash scripts, I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well.</description></item><item><title>A quick guide to changing your GitHub username</title><link>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</link><pubDate>Sun, 28 Jul 2019 15:19:13 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</guid><description>This being the 2,38947234th and probably last time I&amp;rsquo;ll change my username, (marriage is permanent, right?) I thought I&amp;rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read official instructions on how to change your GitHub username here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider afterwards.</description></item><item><title>Git commit practices your future self will thank you for</title><link>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</link><pubDate>Mon, 06 Aug 2018 08:54:56 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</guid><description>A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?
Here&amp;rsquo;s how you can create and maintain a clean and orderly Git commit history using message templates, learning how to squash commits, using git stash, and creating annotated commit tags.
What it means to commit responsibly Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today.</description></item><item><title>An automatic interactive pre-commit checklist, in the style of infomercials</title><link>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</link><pubDate>Mon, 23 Jul 2018 09:38:09 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</guid><description>What&amp;rsquo;s that, you say? You&amp;rsquo;ve become tired of regular old boring paper checklists? Well, my friend, today is your lucky day! You, yes, you, can become the proud owner of a brand-spanking-new automatic interactive pre-commit hook checklist! You&amp;rsquo;re gonna love this! Your life will be so much easier! Just wait until your friends see you.
What&amp;rsquo;s a pre-commit hook Did you know that nearly 1 out of 5 coders are too embarrassed to ask this question?</description></item><item><title>Batch renaming images, including image resolution, with awk</title><link>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</link><pubDate>Mon, 20 Nov 2017 13:59:30 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</guid><description>The most recent item on my list of &amp;ldquo;Geeky things I did that made me feel pretty awesome&amp;rdquo; is an hour&amp;rsquo;s adventure that culminated in this code:
$ file IMG* | awk &amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39; | while read fn fr; do echo $(rename -v &amp;#34;s/$fn/img_$fr/g&amp;#34; *); done IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg IMG_20170808_173450_971.</description></item><item><title>How to replace a string with sed in current and recursive subdirectories</title><link>https://victoria.dev/blog/how-to-replace-a-string-with-sed-in-current-and-recursive-subdirectories/</link><pubDate>Sat, 06 May 2017 20:04:53 +0800</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-to-replace-a-string-with-sed-in-current-and-recursive-subdirectories/</guid><description>Rebranding? Moving to a new domain or static site? I&amp;rsquo;ve had more than a few of these situations myself! Here&amp;rsquo;s how sed can help make these changes easier.
Update a string in multiple files with sed Meet your new friend sed. This amazingly powerful tool lives in your terminal and is available to be totally underused for things like finding and replacing strings in files. You&amp;rsquo;ve got two levels of intensity to choose from:</description></item><item><title>How I created custom desktop notifications using terminal and cron</title><link>https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</link><pubDate>Tue, 21 Feb 2017 10:48:38 +0700</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</guid><description>In my last post I talked about moving from Windows 10 to running i3 on Linux, built up from Debian Base System. Among other things, this change has taught me about the benefits of using basic tools and running a minimal, lightweight system. You can achieve a lot of functionality with just command line tools and simple utilities. One example I&amp;rsquo;d like to illustrate in this post is setting up desktop notifications.</description></item></channel></rss>