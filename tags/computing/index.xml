<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computing on victoria.dev</title><link>https://victoria.dev/tags/computing/</link><description>Recent content in computing on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria Drake)</managingEditor><webMaster>hello@victoria.dev (Victoria Drake)</webMaster><lastBuildDate>Sun, 29 Nov 2020 04:01:22 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/computing/index.xml" rel="self" type="application/rss+xml"/><item><title>What is TCP/IP? Layers and protocols explained</title><link>https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/</link><pubDate>Sun, 29 Nov 2020 04:01:22 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/what-is-tcp/ip-layers-and-protocols-explained/</guid><description>A significant part of the process of creation is the ability to imagine things that do not yet exist. This skill was instrumental to the creation of the Internet. If no one had imagined the underlying technology that most now take for granted every day, there would be no cat memes.
To make the Internet possible, two things that needed imagining are layers and protocols. Layers are conceptual divides that group similar functions together.</description></item><item><title>WPA Key, WPA2, WPA3, and WEP Key: Wi-Fi security explained</title><link>https://victoria.dev/blog/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/</link><pubDate>Mon, 19 Oct 2020 04:02:27 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/</guid><description>Setting up new Wi-Fi? Picking the type of password you need can seem like an arbitrary choice. After all, WEP, WPA, WPA2, and WPA3 all have mostly the same letters in them. A password is a password, so what&amp;rsquo;s the difference?
About 60 seconds to billions of years, as it turns out.
All Wi-Fi encryption is not created equal. Let&amp;rsquo;s explore what makes these four acronyms so different, and how you can best protect your home and organization Wi-Fi.</description></item><item><title>What is TLS? Transport Layer Security encryption explained in plain english</title><link>https://victoria.dev/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/</link><pubDate>Sat, 05 Sep 2020 04:48:39 -0600</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/</guid><description>If you want to have a confidential conversation with someone you know, you might meet up in person and find a private place to talk. If you want to send data confidentially over the Internet, you might have a few more considerations to cover.
TLS, or Transport Layer Security, refers to a protocol. &amp;ldquo;Protocol&amp;rdquo; is a word that means, &amp;ldquo;the way we&amp;rsquo;ve agreed to do things around here,&amp;rdquo; more or less.</description></item><item><title>SQLite in production with WAL üî•</title><link>https://victoria.dev/blog/sqlite-in-production-with-wal/</link><pubDate>Thu, 05 Mar 2020 10:14:43 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/sqlite-in-production-with-wal/</guid><description>Update: read the HackerNews discussion.
SQLite (&amp;ldquo;see-quell-lite&amp;rdquo;) is a lightweight Sequel, or Structured Query Language (SQL), database engine. Instead of using the client-server database management system model, SQLite is self-contained in a single file. It is library, database, and data, all in one package.
For certain applications, SQLite is a solid choice for a production database. It&amp;rsquo;s lightweight, ultra-portable, and has no external dependencies. Remember when MacBook Air first came out?</description></item><item><title>Multithreaded Python: slithering through an I/O bottleneck</title><link>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</link><pubDate>Fri, 28 Feb 2020 09:31:02 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/multithreaded-python-slithering-through-an-i/o-bottleneck/</guid><description>I recently developed a project that I called Hydra: a multithreaded link checker written in Python. Unlike many Python site crawlers I found while researching, Hydra uses only standard libraries, with no external dependencies like BeautifulSoup. It&amp;rsquo;s intended to be run as part of a CI/CD process, so part of its success depended on being fast.
Multiple threads in Python is a bit of a bitey subject (not sorry) in that the Python interpreter doesn&amp;rsquo;t actually let multiple threads execute at the same time.</description></item><item><title>Breaking bottlenecks üçæ</title><link>https://victoria.dev/blog/breaking-bottlenecks/</link><pubDate>Tue, 25 Feb 2020 12:50:29 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/breaking-bottlenecks/</guid><description>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &amp;ldquo;ums&amp;rdquo; that may have occurred. You can view the slides here.
I&amp;rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&amp;rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&amp;rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world.</description></item><item><title>Concurrency, parallelism, and the many threads of Santa Claus üéÖ</title><link>https://victoria.dev/blog/concurrency-parallelism-and-the-many-threads-of-santa-claus/</link><pubDate>Mon, 23 Dec 2019 19:29:01 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/concurrency-parallelism-and-the-many-threads-of-santa-claus/</guid><description>Consider the following: Santa brings toys to all the good girls and boys.
There are 7,713,468,100 people in the world in 2019, around 26.3% of which are under 15 years old. This works out to 2,028,642,110 children (persons under 15 years of age) in the world this year.
Santa doesn&amp;rsquo;t seem to visit children of every religion, so we&amp;rsquo;ll generalize and only include Christians and non-religious folks. Collectively that makes up approximately 44.</description></item><item><title>A coffee-break introduction to time complexity of algorithms</title><link>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</link><pubDate>Wed, 30 May 2018 14:08:28 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</guid><description>Just like writing your very first for loop, understanding time complexity is an integral milestone to learning how to write efficient complex programs. Think of it as having a superpower that allows you to know exactly what type of program might be the most efficient in a particular situation - before even running a single line of code.
The fundamental concepts of complexity analysis are well worth studying. You&amp;rsquo;ll be able to better understand how the code you&amp;rsquo;re writing will interact with the program&amp;rsquo;s input, and as a result, you&amp;rsquo;ll spend a lot less wasted time writing slow and problematic code.</description></item><item><title>Iterating over objects and arrays: frequent errors</title><link>https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/</link><pubDate>Tue, 16 May 2017 10:46:46 +0700</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/</guid><description>Here&amp;rsquo;s some complaining a quick overview of some code that has confounded me more than once. I&amp;rsquo;m told even very experienced developers encounter these situations regularly, so if you find yourself on your third cup of coffee scratching your head over why your code is doing exactly what you told it to do (and not what you want it to do), maybe this post can help you.
The example code is JavaScript, since that&amp;rsquo;s what I&amp;rsquo;ve been working in lately, but I believe the concepts to be pretty universal.</description></item></channel></rss>