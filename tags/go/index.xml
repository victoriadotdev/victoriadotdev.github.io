<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on victoria.dev</title><link>https://victoria.dev/tags/go/</link><description>Recent content in go on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria Drake)</managingEditor><webMaster>hello@victoria.dev (Victoria Drake)</webMaster><lastBuildDate>Mon, 15 Feb 2021 01:38:07 -0500</lastBuildDate><atom:link href="https://victoria.dev/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a self-hosted chat service with your own Matrix server</title><link>https://victoria.dev/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/</link><pubDate>Mon, 15 Feb 2021 01:38:07 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/</guid><description>Matrix is an open standard for decentralized real-time communication. The specification is production-ready and bridges to tons of silo products like Slack, Gitter, Telegram, Discord, and even Facebook Messenger. This lets you use Matrix to link together disjoint communities in one place, or create an alternative communication method that works with, but is independent of, communication silos.
You can create your own self-hosted Matrix chat for as little as $3.50 USD per month on an AWS Lightsail instance.</description></item><item><title>Build your own serverless subscriber list with Go and AWS</title><link>https://victoria.dev/blog/build-your-own-serverless-subscriber-list-with-go-and-aws/</link><pubDate>Tue, 10 Nov 2020 04:52:50 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/build-your-own-serverless-subscriber-list-with-go-and-aws/</guid><description>You can now subscribe to my email list on victoria.dev! Here&amp;rsquo;s how I lovingly built a subscription sign up flow with email confirmation that doesn&amp;rsquo;t suck. You can too.
Introducing Simple Subscribe If you&amp;rsquo;re interested in managing your own mailing list or newsletter, you can set up Simple Subscribe on your own AWS resources to collect email addresses. This open source API is written in Go, and runs on AWS Lambda.</description></item><item><title>Go automate your GitHub profile README</title><link>https://victoria.dev/blog/go-automate-your-github-profile-readme/</link><pubDate>Sat, 25 Jul 2020 10:51:15 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/go-automate-your-github-profile-readme/</guid><description>GitHub&amp;rsquo;s new profile page README feature is having the wonderful effect of bringing some personality to the Myspace pages of the developer Internet. Though Markdown lends itself best to standard static text content, that&amp;rsquo;s not stopping creative folks from working to create a next-level README. You can include GIFs and images to add some motion and pizazz (they&amp;rsquo;re covered in GitHub Flavor Markdown), but I&amp;rsquo;m thinking of something a little more dynamic.</description></item><item><title>Hugo vs Jekyll: an epic battle of static site generator themes</title><link>https://victoria.dev/blog/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/</link><pubDate>Mon, 27 Apr 2020 06:34:41 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/</guid><description>I recently took on the task of creating a documentation site theme for two projects. Both projects needed the same basic features, but one uses Jekyll while the other uses Hugo.
In typical developer rationality, there was clearly only one option. I decided to create the same theme in both frameworks, and to give you, dear reader, a side-by-side comparison.
This post isn&amp;rsquo;t a comprehensive theme-building guide, but intended to familiarize you with the process of building a theme in either generator.</description></item><item><title>Breaking bottlenecks üçæ</title><link>https://victoria.dev/blog/breaking-bottlenecks/</link><pubDate>Tue, 25 Feb 2020 12:50:29 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/breaking-bottlenecks/</guid><description>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &amp;ldquo;ums&amp;rdquo; that may have occurred. You can view the slides here.
I&amp;rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&amp;rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&amp;rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world.</description></item><item><title>A coffee-break introduction to time complexity of algorithms</title><link>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</link><pubDate>Wed, 30 May 2018 14:08:28 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</guid><description>Just like writing your very first for loop, understanding time complexity is an integral milestone to learning how to write efficient complex programs. Think of it as having a superpower that allows you to know exactly what type of program might be the most efficient in a particular situation - before even running a single line of code.
The fundamental concepts of complexity analysis are well worth studying. You&amp;rsquo;ll be able to better understand how the code you&amp;rsquo;re writing will interact with the program&amp;rsquo;s input, and as a result, you&amp;rsquo;ll spend a lot less wasted time writing slow and problematic code.</description></item><item><title>Knapsack problem algorithms for my real-life carry-on knapsack</title><link>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</link><pubDate>Wed, 09 May 2018 21:00:35 -0400</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</guid><description>The knapsack problem I&amp;rsquo;m a nomad and live out of one carry-on bag. This means that the total weight of all my worldly possessions must fall under airline cabin baggage weight limits - usually 10kg. On some smaller airlines, however, this weight limit drops to 7kg. Occasionally, I have to decide not to bring something with me to adjust to the smaller weight limit.
As a practical exercise, deciding what to leave behind (or get rid of altogether) entails laying out all my things and choosing which ones to keep.</description></item><item><title>Why I'm automatically deleting my old tweets using AWS Lambda</title><link>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</link><pubDate>Thu, 12 Apr 2018 10:51:15 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</guid><description>From now on, my tweets are ephemeral. Here‚Äôs why I‚Äôm deleting all my old tweets, and the AWS Lambda function I‚Äôm using to do all this for free.
Click here to skip to the code part.
Stuff and opinions I&amp;rsquo;ve only been a one-bag nomad for a little over a year and a half. Before that, I lived as most people do in an apartment or a house. I owned furniture, more clothing than I strictly needed, and enough &amp;ldquo;stuff&amp;rdquo; to fill at least a few moving boxes.</description></item><item><title>Running a free Twitter bot on AWS Lambda</title><link>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</link><pubDate>Mon, 05 Mar 2018 10:29:15 -0500</pubDate><author>hello@victoria.dev (Victoria Drake)</author><guid>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</guid><description>If you read About time, you&amp;rsquo;ll know that I&amp;rsquo;m a big believer in spending time now on building things that save time in the future. To this end I built a simple Twitter bot in Go that would occasionally post links to my articles and keep my account interesting even when I&amp;rsquo;m too busy to use it. The tweets help drive traffic to my sites, and I don&amp;rsquo;t have to lift a finger.</description></item></channel></rss>