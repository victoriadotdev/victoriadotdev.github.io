<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on victoria.dev</title><link>https://victoria.dev/tags/linux/</link><description>Recent content in Linux on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Tue, 06 Aug 2019 10:55:19 -0400</lastBuildDate><atom:link href="https://victoria.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link>https://victoria.dev/verbose/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</link><pubDate>Tue, 06 Aug 2019 10:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</guid><description>Using xargs and awk in Bash to automate managing remote-hosted repositories.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" width="640" height="343"/>
&lt;p&gt;Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into automatically re-creating my laptop with Bash scripts (post to come!), I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well. Here they are.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-clone-all-your-github-repositories&#34;&gt;A Bash one-liner to clone all your GitHub repositories&lt;/h1&gt;
&lt;p&gt;Caveat: you&amp;rsquo;ll need a list of the GitHub repositories you want to clone. The good thing about that is it gives you full agency to choose just the repositories you want on your machine, instead of going in whole-hog.&lt;/p&gt;
&lt;p&gt;You can easily clone GitHub repositories without entering your password each time by using HTTPS with your &lt;a href=&#34;https://help.github.com/en/articles/caching-your-github-password-in-git&#34;&gt;15-minute cached credentials&lt;/a&gt; or, my preferred method, by &lt;a href=&#34;https://help.github.com/en/articles/connecting-to-github-with-ssh&#34;&gt;connecting to GitHub with SSH&lt;/a&gt;. For brevity I&amp;rsquo;ll assume we&amp;rsquo;re going with the latter, and our SSH keys are set up.&lt;/p&gt;
&lt;p&gt;Given a list of GitHub URLs in the file &lt;code&gt;gh-repos.txt&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@github.com:username/first-repository.git
git@github.com:username/second-repository.git
git@github.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xargs -n1 git clone &amp;lt; gh-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clones all the repositories on the list into the current folder. This same one-liner works for GitLab repositories as well, if you substitute the appropriate URLs.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;There are two halves to this one-liner: the input, counterintuitively on the right side, and the part that makes stuff happen, on the left. We could make the order of these parts more intuitive (maybe?) by writing the same command like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;lt;gh-repos.txt xargs -n1 git clone &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a command for each line of our input, &lt;code&gt;gh-repos.txt&lt;/code&gt;, we use &lt;code&gt;xargs -n1&lt;/code&gt;. The tool &lt;code&gt;xargs&lt;/code&gt; reads items from input and executes any commands it finds (it will &lt;code&gt;echo&lt;/code&gt; if it doesn&amp;rsquo;t find any). By default, it assumes that items are separated by spaces; new lines also works and makes our list easier to read. The flag &lt;code&gt;-n1&lt;/code&gt; tells &lt;code&gt;xargs&lt;/code&gt; to use &lt;code&gt;1&lt;/code&gt; argument, or in our case, one line, per command. We build our command with &lt;code&gt;git clone&lt;/code&gt;, which &lt;code&gt;xargs&lt;/code&gt; then executes for each line. Ta-da.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;A Bash one-liner to create and push many repositories on GitLab&lt;/h1&gt;
&lt;p&gt;GitLab, unlike GitHub, lets us do this nifty thing where we don&amp;rsquo;t have to use the website to make a new repository first. We can &lt;a href=&#34;https://gitlab.com/help/gitlab-basics/create-project#push-to-create-a-new-project&#34;&gt;create a new GitLab repository from our terminal&lt;/a&gt;. The newly created repository defaults to being set as Private, so if we want to make it Public on GitLab, we&amp;rsquo;ll have to do that manually later.&lt;/p&gt;
&lt;p&gt;The GitLab docs tell us to push to create a new project using &lt;code&gt;git push --set-upstream&lt;/code&gt;, but I don&amp;rsquo;t find this to be very convenient for using GitLab as a backup. As I work with my repositories in the future, I&amp;rsquo;d like to run one command that pushes to both GitHub &lt;em&gt;and&lt;/em&gt; GitLab without additional effort on my part.&lt;/p&gt;
&lt;p&gt;To make this Bash one-liner work, we&amp;rsquo;ll also need a list of repository URLs for GitLab (ones that don&amp;rsquo;t exist yet). We can easily do this by copying our GitHub repository list, opening it up with Vim, and doing a &lt;a href=&#34;https://vim.fandom.com/wiki/Search_and_replace&#34;&gt;search-and-replace&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp gh-repos.txt gl-repos.txt
vim gl-repos.txt
:%s/&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;github&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;/gitlab/g
:wq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;gl-repos.txt&lt;/code&gt;, which looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@gitlab.com:username/first-repository.git
git@gitlab.com:username/second-repository.git
git@gitlab.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create these repositories on GitLab, add the URLs as remotes, and push our code to the new repositories by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hang tight and I&amp;rsquo;ll explain it; for now, take note that &lt;code&gt;~/FULL/PATH/&lt;/code&gt; should be the full path to the directory containing our GitHub repositories.&lt;/p&gt;
&lt;p&gt;We do have to make note of a couple assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the directory on your local machine that contains the repository is the same as the name of the repository in the URL (this will be the case if it was cloned with the one-liner above);&lt;/li&gt;
&lt;li&gt;Each repository is currently checked out to the branch you want pushed, ie. &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one-liner could be expanded to handle these assumptions, but it is the humble opinion of the author that at that point, we really ought to be writing a Bash script.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here-1&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;Our Bash one-liner uses each line (or URL) in the &lt;code&gt;gl-repos.txt&lt;/code&gt; file as input. With &lt;code&gt;awk&lt;/code&gt;, it splits off the name of the directory containing the repository on our local machine, and uses these pieces of information to build our larger command. If we were to &lt;code&gt;print&lt;/code&gt; the output of &lt;code&gt;awk&lt;/code&gt;, we&amp;rsquo;d see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/first-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/second-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/second-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/third-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/third-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at how we build this command.&lt;/p&gt;
&lt;h3 id=&#34;splitting-strings-with-awk&#34;&gt;Splitting strings with &lt;code&gt;awk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The tool &lt;code&gt;awk&lt;/code&gt; can split input based on &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Command-Line-Field-Separator.html&#34;&gt;field separators&lt;/a&gt;. The default separator is a whitespace character, but we can change this by passing the &lt;code&gt;-F&lt;/code&gt; flag. Besides single characters, we can also use a &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Regexp-Field-Splitting.html#Regexp-Field-Splitting&#34;&gt;regular expression field separator&lt;/a&gt;. Since our repository URLs have a set format, we can grab the repository names by asking for the substring between the slash character &lt;code&gt;/&lt;/code&gt; and the end of the URL, &lt;code&gt;.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to accomplish this is with our regex &lt;code&gt;\/|(\.git)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\/&lt;/code&gt; is an escaped &lt;code&gt;/&lt;/code&gt; character;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; means &amp;ldquo;or&amp;rdquo;, telling awk to match either expression;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(\.git)&lt;/code&gt; is the capture group at the end of our URL that matches &amp;ldquo;.git&amp;rdquo;, with an escaped &lt;code&gt;.&lt;/code&gt; character. This is a bit of a cheat, as &amp;ldquo;.git&amp;rdquo; isn&amp;rsquo;t strictly splitting anything (there&amp;rsquo;s nothing on the other side) but it&amp;rsquo;s an easy way for us to take this bit off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we&amp;rsquo;ve told &lt;code&gt;awk&lt;/code&gt; where to split, we can grab the right substring with the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Fields.html#index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator&#34;&gt;field operator&lt;/a&gt;. We refer to our fields with a &lt;code&gt;$&lt;/code&gt; character, then by the field&amp;rsquo;s column number. In our example, we want the second field, &lt;code&gt;$2&lt;/code&gt;. Here&amp;rsquo;s what all the substrings look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: git@gitlab.com:username
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: first-repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the whole string, or in our case, the whole URL, we use the field operator &lt;code&gt;$0&lt;/code&gt;. To write the command, we just substitute the field operators for the repository name and URL. Running this with &lt;code&gt;print&lt;/code&gt; as we&amp;rsquo;re building it can help to make sure we&amp;rsquo;ve got all the spaces right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print &amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;running-the-command&#34;&gt;Running the command&lt;/h3&gt;
&lt;p&gt;We build our command inside the parenthesis of &lt;code&gt;system()&lt;/code&gt;. By using this as the output of &lt;code&gt;awk&lt;/code&gt;, each command will run as soon as it is built and output. The &lt;code&gt;system()&lt;/code&gt; function creates a &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child process&lt;/a&gt; that executes our command, then returns once the command is completed. In plain English, this lets us perform the Git commands on each repository, one-by-one, without breaking from our main process in which &lt;code&gt;awk&lt;/code&gt; is doing things with our input file. Here&amp;rsquo;s our final command again, all put together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-our-backups&#34;&gt;Using our backups&lt;/h3&gt;
&lt;p&gt;By adding the GitLab URLs as remotes, we&amp;rsquo;ve simplified the process of pushing to both externally hosted repositories. If we run &lt;code&gt;git remote -v&lt;/code&gt; in one of our repository directories, we&amp;rsquo;ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, simply running &lt;code&gt;git push&lt;/code&gt; without arguments will push the current branch to both remote repositories.&lt;/p&gt;
&lt;p&gt;We should also note that &lt;code&gt;git pull&lt;/code&gt; will generally only try to pull from the remote repository you originally cloned from (the URL marked &lt;code&gt;(fetch)&lt;/code&gt; in our example above). Pulling from multiple Git repositories at the same time is possible, but complicated, and beyond the scope of this post. Here&amp;rsquo;s an &lt;a href=&#34;https://astrofloyd.wordpress.com/2015/05/05/git-pushing-to-and-pulling-from-multiple-remote-locations-remote-url-and-pushurl/&#34;&gt;explanation of pushing and pulling to multiple remotes&lt;/a&gt; to help get you started, if you&amp;rsquo;re curious. The &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34;&gt;Git documentation on remotes&lt;/a&gt; may also be helpful.&lt;/p&gt;
&lt;h1 id=&#34;to-elaborate-on-the-succinctness-of-bash-one-liners&#34;&gt;To elaborate on the succinctness of Bash one-liners&lt;/h1&gt;
&lt;p&gt;Bash one-liners, when understood, can be fun and handy shortcuts. At the very least, being aware of tools like &lt;code&gt;xargs&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; can help to automate and alleviate a lot of tediousness in our work. However, there are some downsides.&lt;/p&gt;
&lt;p&gt;In terms of an easy-to-understand, maintainable, and approachable tool, Bash one-liners suck. They&amp;rsquo;re usually more complicated to write than a Bash script using &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops, and certainly more complicated to read. It&amp;rsquo;s likely that when we write them, we&amp;rsquo;ll miss a single quote or closing parenthesis somewhere; and as I hope this post demonstrates, they can take quite a bit of explaining, too. So why use them?&lt;/p&gt;
&lt;p&gt;Imagine reading a recipe for baking a cake, step by step. You understand the methods and ingredients, and gather your supplies. Then, as you think about it, you begin to realize that if you just throw all the ingredients at the oven in precisely the right order, a cake will instantly materialize. You try it, and it works!&lt;/p&gt;
&lt;p&gt;That would be pretty satisfying, wouldn&amp;rsquo;t it?&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A quick guide to changing your GitHub username</title><link>https://victoria.dev/verbose/a-quick-guide-to-changing-your-github-username/</link><pubDate>Sun, 28 Jul 2019 15:19:13 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/a-quick-guide-to-changing-your-github-username/</guid><description>Some additional steps to consider after making a change to your username on GitHub.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" width="640" height="421"/>
&lt;p&gt;This being the 2,38947234th and probably last time I&amp;rsquo;ll change my username, (marriage is permanent, right?) I thought I&amp;rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read &lt;a href=&#34;https://help.github.com/en/articles/changing-your-github-username&#34;&gt;official instructions on how to change your GitHub username&lt;/a&gt; here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider &lt;em&gt;afterwards.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;where-to-make-changes&#34;&gt;Where to make changes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Change username in &lt;a href=&#34;https://github.com/settings/admin&#34;&gt;GitHub account settings.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If using GitHub Pages, change name of your &amp;ldquo;username.github.io&amp;rdquo; repository.&lt;/li&gt;
&lt;li&gt;If using other services that point to your &amp;ldquo;username.github.io&amp;rdquo; repository address, update them.&lt;/li&gt;
&lt;li&gt;If using Netlify, you &lt;em&gt;may&lt;/em&gt; want to sign in and reconnect your repositories. (Mine still worked, but due to a possibly unrelated issue, I&amp;rsquo;m not positive.)&lt;/li&gt;
&lt;li&gt;Sign in to Travis CI and other integrations (find them in your repository Settings tab -&amp;gt; Integrations &amp;amp; services). This will update your username there.&lt;/li&gt;
&lt;li&gt;Update your local files and repository links with &lt;em&gt;very carefully executed&lt;/em&gt; &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands, and push back changes to GitHub.&lt;/li&gt;
&lt;li&gt;Redeploy any websites you may have with your updated GitHub link.&lt;/li&gt;
&lt;li&gt;Fix any links around the web to your profile, your repositories, or Gists you may have shared.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;local-file-updates&#34;&gt;Local file updates&lt;/h1&gt;
&lt;p&gt;Here are some suggestions for strings to search and replace your username in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;github.com/username&lt;/code&gt; (References to your GitHub page in READMEs or in website copy)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username.github.io&lt;/code&gt; (Links to your GitHub Page)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git@github.com:username&lt;/code&gt; (Git config remote ssh urls)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;travis-ci.com/username&lt;/code&gt; (Travis badges in READMEs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shields.io/github/.../username&lt;/code&gt; (Shields badges in READMEs, types include &lt;code&gt;contributors&lt;/code&gt;, &lt;code&gt;stars&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, and more)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can quickly identify where the above strings are located using this command for each string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -rnw -e &#39;foobar&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will recursively (&lt;code&gt;r&lt;/code&gt;) search all files for strings matching the whole (&lt;code&gt;w&lt;/code&gt;) pattern (&lt;code&gt;e&lt;/code&gt;) provided and prefix results with the line numbers (&lt;code&gt;n&lt;/code&gt;) so you can easily find them.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; can make these changes much faster. See &lt;a href=&#34;https://victoria.dev/verbose/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/&#34;&gt;this article on search and replace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy your new handle! (I hope it sticks.)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A remote sync solution for iOS and Linux: Git and Working Copy</title><link>https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/</link><pubDate>Fri, 15 Mar 2019 11:55:28 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/</guid><description>How to set up a cross-platform cloud sync solution for working anywhere using Git on iOS.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/cover_remote-sync_hu1984111f2d75b603219adcc3d215dc57_618766_640x0_resize_box_2.png" width="640" height="418"/>
&lt;p&gt;I previously wrote about a (hackish) way to use a &lt;a href=&#34;https://victoria.dev/verbose/how-i-set-up-a-single-dropbox-folder-on-my-dual-boot-windows-and-linux-system/&#34;&gt;single Dropbox folder on a dual-boot Windows and Linux machine&lt;/a&gt;. I&amp;rsquo;ve since &lt;del&gt;gained some sense&lt;/del&gt; gone full Linux with Ubuntu 18.04 LTS, but the Dropbox set up seems to have stopped being an option in any case. Fortunately, I&amp;rsquo;ve since found a much better (far less hackish) way to remote-sync files across different file systems. Reflecting my current set up, I&amp;rsquo;m talking about iOS (iPad and iPhone) and my Linux machine.&lt;/p&gt;
&lt;p&gt;The new sync system is based on Git, very customizable, and conveniently extensible. Beyond text files, you can sync anything that Git can (which is almost everything - if you want to edit your &lt;code&gt;.gitignore&lt;/code&gt;d files on the go I&amp;rsquo;m not sure I can help). If you&amp;rsquo;re already familiar with Git, getting set up will be a walk in the park. If Git is new to you, I think these tools help make the concepts of Git cloning, pulling, and pushing straightforward to understand.&lt;/p&gt;
&lt;h1 id=&#34;components&#34;&gt;Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://workingcopy.app&#34;&gt;Working Copy app&lt;/a&gt; ($15.99 one-time pro-unlock and well worth it, iOS only)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ia.net/writer&#34;&gt;iA Writer app&lt;/a&gt; ($8.99 one-time purchase for iOS, also available on Mac, Windows, and Android)&lt;/li&gt;
&lt;li&gt;GitHub repositories (&lt;a href=&#34;https://github.blog/2019-01-07-new-year-new-github/&#34;&gt;private&lt;/a&gt; or public, both free)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was inspired by &lt;a href=&#34;https://www.macstories.net/ios/my-markdown-writing-and-collaboration-workflow-powered-by-working-copy-3-6-icloud-drive-and-github/&#34;&gt;this article&lt;/a&gt; as well as &lt;a href=&#34;http://blog.joncairns.com/2011/10/how-to-use-git-submodules/&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;get-set-up&#34;&gt;Get set up&lt;/h1&gt;
&lt;p&gt;Here are the steps to setting up that I&amp;rsquo;ll walk you through in this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create your remote repository&lt;/li&gt;
&lt;li&gt;Clone repository to iPad with Working Copy&lt;/li&gt;
&lt;li&gt;Open and edit files with iA Writer&lt;/li&gt;
&lt;li&gt;Push changes back to remote&lt;/li&gt;
&lt;li&gt;Pull changes from repository on your computer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This system is straightforward to set up whether you&amp;rsquo;re a command line whiz or just getting into Git. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;create-your-remote-repository&#34;&gt;Create your remote repository&lt;/h2&gt;
&lt;p&gt;GitHub now offers free &lt;a href=&#34;https://github.blog/2019-01-07-new-year-new-github/&#34;&gt;private repositories&lt;/a&gt; for up to three collaborators. Choose &amp;ldquo;Private&amp;rdquo; on GitHub&amp;rsquo;s repository creation page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github-private-repo.png#screenshot&#34; alt=&#34;Selection options for public and private repository&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Create the repository. If you&amp;rsquo;d like to, you can follow GitHub&amp;rsquo;s instructions to push some files to it from your computer, or you can add files later from your iPad.&lt;/p&gt;
&lt;h2 id=&#34;clone-repository-to-ipad-with-working-copy&#34;&gt;Clone repository to iPad with Working Copy&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;https://workingcopy.app&#34;&gt;Working Copy&lt;/a&gt; from the App Store. It&amp;rsquo;s one of the more expensive apps I&amp;rsquo;ve purchased, but I think it&amp;rsquo;s well worth it. Developer &lt;a href=&#34;https://twitter.com/palmin&#34;&gt;Anders Borum&lt;/a&gt; has a steady track record of frequent updates and incorporating the latest features for iOS apps, like &lt;a href=&#34;https://workingcopy.app/manual/dragdrop&#34;&gt;drag and drop&lt;/a&gt; on iPad. I think he&amp;rsquo;s fairly priced his product in light of the work he puts into maintaining and enhancing it.&lt;/p&gt;
&lt;p&gt;In Working Copy, find the gear icon in the top left corner and touch to open Settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-settings.png#screenshot&#34; alt=&#34;Settings menu in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tap on SSH Keys, and you&amp;rsquo;ll see this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-ssh.png#screenshot&#34; alt=&#34;SSH Key for Working Copy on iPad&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SSH keys, or Secure Shell keys, are access credentials used in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH protocol&lt;/a&gt;. Your key is a password that your device will use to securely connect with your remote repository host - GitHub, in our example. Since anyone with your SSH keys can potentially pretend to be you and gain access to your files, it&amp;rsquo;s important not to share them accidentally, like in a screenshot on a blog post.&lt;/p&gt;
&lt;p&gt;Tap on the second line that looks like &amp;ldquo;WorkingCopy@iPad-xxxxxxxx&amp;rdquo; to get this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-ssh-connect.png#screenshot&#34; alt=&#34;Connect to GitHub or Bitbucket in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Working Copy supports easy connection to both BitBucket and GitHub. Tap &amp;ldquo;Connect With GitHub&amp;rdquo; or BitBucket to bring up some familiar sign-in screens that will authorize Working Copy to access your account(s).&lt;/p&gt;
&lt;p&gt;Once connected, tap the &amp;ldquo;+&amp;rdquo; symbol in the top right of the side bar to add a new repository. Choose &amp;ldquo;Clone repository&amp;rdquo; to bring up this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-read-repos.png#screenshot&#34; alt=&#34;Loading repositories from remote&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, you can either manually input the remote URL, or simply choose from the list of repositories that Working Copy fetches from your connected account. When you make your choice, the app clones the repository to your iPad and it will show up in the sidebar. You&amp;rsquo;re connected!&lt;/p&gt;
&lt;h2 id=&#34;open-and-edit-files-with-ia-writer&#34;&gt;Open and edit files with iA Writer&lt;/h2&gt;
&lt;p&gt;One of the (many) reasons I adore &lt;a href=&#34;https://ia.net/writer&#34;&gt;iA Writer&lt;/a&gt; is its ability to select your freshly cloned remote repository as a Library Location. To do this in the iA Writer app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the main Library list, in the top right of the sidebar, tap &amp;ldquo;Edit&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Add Location&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;A helpful popup appears. Tap OK.&lt;/li&gt;
&lt;li&gt;From the Working Copy location, tap &amp;ldquo;Select&amp;rdquo; in the top right, then choose the repository folder.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Open&amp;rdquo;, then &amp;ldquo;Done&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your remote repository now appears as a Location in the sidebar. Tap on it to work within this directory.&lt;/p&gt;
&lt;p&gt;While inside this location, new files you create (by tapping the pencil-and-paper icon in the top right corner) will be saved to this folder locally. As you work, iA Writer automatically saves your progress. Next, we&amp;rsquo;ll look at pushing those files and changes back to your remote.&lt;/p&gt;
&lt;h2 id=&#34;push-changes-back-to-remote&#34;&gt;Push changes back to remote&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve made changes to your files, open Working Copy again. You should see a yellow dot on your changed repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-changed-repo.png#screenshot&#34; alt=&#34;Yellow dot indicating changes to repository&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tap on your repository name, then on &amp;ldquo;Repository Status and Configuration&amp;rdquo; at the top of the sidebar. Your changed files will be indicated by yellow dots or green &amp;ldquo;+&amp;rdquo; symbols. These mean that you&amp;rsquo;ve modified or added files, respectively.&lt;/p&gt;
&lt;p&gt;Working Copy is a sweet iOS Git client, and you can tap on your files to see additional information including a comparison of changes (&amp;ldquo;diff&amp;rdquo;) as well as status and Git history. You can even edit files right within the app, with &lt;a href=&#34;https://workingcopyapp.com/manual/edit&#34;&gt;syntax highlighting&lt;/a&gt; for its many supported languages. For now, we&amp;rsquo;ll look at how to push your changed work to your remote repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-changes-to-commit.png#screenshot&#34; alt=&#34;Changes to commit&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the &amp;ldquo;Repository Status and Configuration&amp;rdquo; page, you&amp;rsquo;ll see right at the top that there are changes to be committed. If you&amp;rsquo;re new to Git, this is like &amp;ldquo;saving your changes&amp;rdquo; to your Git history, something typically done with the terminal command &lt;a href=&#34;https://git-scm.com/docs/git-commit&#34;&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;. You can think of this as saving the files that we&amp;rsquo;ll want to send to the GitHub repository. Tap &amp;ldquo;Commit changes.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-commit-changes.png#screenshot&#34; alt=&#34;Add a commit message and select files to commit&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Enter your commit message, and select the files you want to add. Turn on the &amp;ldquo;Push&amp;rdquo; switch to send everything to your remote repository when you commit the files. Then tap &amp;ldquo;Commit.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a progress bar as your files are uploaded, and then a confirmation message on the status screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-commit-success.png#screenshot&#34; alt=&#34;Commit success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! Your changes are now present in your remote repository on GitHub. You&amp;rsquo;ve successfully synced your files remotely!&lt;/p&gt;
&lt;h2 id=&#34;pull-changes-from-repository-on-your-computer&#34;&gt;Pull changes from repository on your computer&lt;/h2&gt;
&lt;p&gt;To bring your updated files full circle to your computer, you pull them from the GitHub repository. I prefer to use the terminal for this as it&amp;rsquo;s quick and easy, but GitHub also offers a &lt;a href=&#34;https://help.github.com/en/desktop/getting-started-with-github-desktop&#34;&gt;graphical client&lt;/a&gt; if terminal commands seem a little alien for now.&lt;/p&gt;
&lt;p&gt;If you started with the GitHub repository, you can clone it to a folder on your computer by following &lt;a href=&#34;https://help.github.com/en/articles/cloning-a-repository&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;staying-in-sync&#34;&gt;Staying in sync&lt;/h2&gt;
&lt;p&gt;When you update your work on your computer, you&amp;rsquo;ll use Git to push your changes to the remote repository. To do this, you can use GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/desktop/getting-started-with-github-desktop&#34;&gt;graphical client&lt;/a&gt;, or follow &lt;a href=&#34;https://help.github.com/en/articles/adding-an-existing-project-to-github-using-the-command-line&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On your iOS device, Working Copy makes pulling and pushing as simple as a single tap. On the Repository Status and Configuration page, tap on the remote name under &amp;ldquo;Remotes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-git-remote.png#screenshot&#34; alt=&#34;List of Remotes in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then tap &amp;ldquo;Synchronize&amp;rdquo;. Working Copy will take care of the details of pushing your committed changes and/or pulling any new changes it finds from the remote repository.&lt;/p&gt;
&lt;h1 id=&#34;not-bad-right&#34;&gt;Not bad, right?&lt;/h1&gt;
&lt;p&gt;For a Git-based developer and work-anywhere-aholic like me, this set up couldn&amp;rsquo;t be more convenient. Working Copy really makes staying in sync with my remote repositories seamless, nevermind the ability to work with any of my GitHub repos on the go.&lt;/p&gt;
&lt;p&gt;For editing on the go, here&amp;rsquo;s a useful tip. Use &lt;code&gt;.gitignore&lt;/code&gt; in your sync repository if you don&amp;rsquo;t need to move large files, like images, around with you. This will stop the ignored files from being pushed to GitHub and pulled to your iOS device - they&amp;rsquo;ll only remain on your computer&amp;rsquo;s larger hard drive. The &lt;code&gt;.gitignore&lt;/code&gt; file of one of my sync repositories looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*.png
*.jpeg
*.jpg
*.mp4
*.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means all the media files stay on my computer, and I can pull just the text file content to my iPad from GitHub to work on while I&amp;rsquo;m out and about.&lt;/p&gt;
&lt;p&gt;I most recently used this set up to get some writing done while hanging out in the atrium of Washington DC&amp;rsquo;s National Portrait Gallery, which is pleasantly photogenic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;washington-portrait-gallery.jpg&#34; alt=&#34;The atrium of the National Portrait Gallery&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;I&amp;rsquo;d love to hear&lt;/a&gt; how this set up works for you and how you use it. In the meantime, happy working!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/cover_remote-sync_hu1984111f2d75b603219adcc3d215dc57_618766_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Batch renaming images, including image resolution, with awk</title><link>https://victoria.dev/verbose/batch-renaming-images-including-image-resolution-with-awk/</link><pubDate>Mon, 20 Nov 2017 13:59:30 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/batch-renaming-images-including-image-resolution-with-awk/</guid><description>How to batch rename images with custom values using file, awk, and rename - in rainbow colors!</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/batch-renaming-images-including-image-resolution-with-awk/renaming-rainbow_hua6bda34c4dd82ff49a9f97483b0665f2_159523_640x0_resize_box_2.png" width="640" height="317"/>
&lt;p&gt;The most recent item on my list of &amp;ldquo;Geeky things I did that made me feel pretty awesome&amp;rdquo; is an hour&amp;rsquo;s adventure that culminated in this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fr&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fr&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg
IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg
IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg
IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg
IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg
IMG_20170808_173450_971.jpg renamed as img_5_3024x3024.jpg
IMG_20170808_173536_034.jpg renamed as img_6_4032x3024.jpg
IMG_20170808_173602_732.jpg renamed as img_7_1617x1617.jpg
IMG_20170808_173645_339.jpg renamed as img_8_3024x3780.jpg
IMG_20170909_170146_585.jpg renamed as img_9_3036x3036.jpg
IMG_20170911_211522_543.jpg renamed as img_10_3036x3036.jpg
IMG_20170913_071608_288.jpg renamed as img_11_2760x2760.jpg
IMG_20170913_073205_522.jpg renamed as img_12_2738x2738.jpg
// ... etc etc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last item on the aforementioned list is &amp;ldquo;TODO: come up with a shorter title for this list.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I previously wrote about the power of command line tools like &lt;a href=&#34;https://victoria.dev/verbose/when-stackoverflow-sed-saves-30mins/&#34;&gt;sed&lt;/a&gt;. This post expands on how to string all this magical functionality into one big, long, rainbow-coloured, viscous stream of awesome.&lt;/p&gt;
&lt;h2 id=&#34;rename-files&#34;&gt;Rename files&lt;/h2&gt;
&lt;p&gt;The tool that actually handles the renaming of our files is, appropriately enough, &lt;code&gt;rename&lt;/code&gt;. The syntax is: &lt;code&gt;rename -n &amp;quot;s/original_filename/new_filename/g&amp;quot; *&lt;/code&gt; where &lt;code&gt;-n&lt;/code&gt; does a dry-run, and substituting &lt;code&gt;-v&lt;/code&gt; would rename the files. The &lt;code&gt;s&lt;/code&gt; indicates our substitution string, and &lt;code&gt;g&lt;/code&gt; for &amp;ldquo;global&amp;rdquo; finds all occurrences of the string. The &lt;code&gt;*&lt;/code&gt; matches zero or more occurrences of our search-and-replace parameters.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll come back to this later.&lt;/p&gt;
&lt;h2 id=&#34;get-file-information&#34;&gt;Get file information&lt;/h2&gt;
&lt;p&gt;When I run &lt;code&gt;$ file IMG_20170808_172653_425.jpg&lt;/code&gt; in the image directory, I get this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;IMG_20170808_172653_425.jpg: JPEG image data, baseline, precision &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;, 4032x3024, frames &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we can get the image resolution (&amp;ldquo;4032x3024&amp;rdquo; above), we know that we&amp;rsquo;ll be able to use it in our new filename.&lt;/p&gt;
&lt;h2 id=&#34;isolate-the-information-we-want&#34;&gt;Isolate the information we want&lt;/h2&gt;
&lt;p&gt;I love &lt;code&gt;awk&lt;/code&gt; for its simplicity. It takes lines of text and makes individual bits of information available to us with built in variables that we can then refer to as column numbers denoted by &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. By default, &lt;code&gt;awk&lt;/code&gt; splits up columns on whitespace. To take the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
-------------------------------------------------------------------------------------------------------------
| IMG_20170808_172653_425.jpg: | JPEG | image | data, | baseline, | precision | 8, | 4032x3024, | frames | 3 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can denote different values to use as a splitter with, for example, &lt;code&gt;-F&#39;,&#39;&lt;/code&gt; if we wanted to use commas as the column divisions. For our current project, spaces are fine.&lt;/p&gt;
&lt;p&gt;There are a couple issues we need to solve before we can plug the information into our new filenames. Column &lt;code&gt;$1&lt;/code&gt; has the original filename we want, but there&amp;rsquo;s an extra &amp;ldquo;:&amp;rdquo; character on the end. We don&amp;rsquo;t need the &amp;ldquo;.jpg&amp;rdquo; either. Column &lt;code&gt;$8&lt;/code&gt; has an extra &amp;ldquo;,&amp;rdquo; that we don&amp;rsquo;t want as well. To get just to information we need, we&amp;rsquo;ll take a substring of the column with &lt;code&gt;substr()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr($1, 1, length($1)-5)&lt;/code&gt; - This gives us the file name from the beginning of the string to the end of the string, minus 5 characters (&amp;ldquo;length minus 5&amp;rdquo;).
&lt;code&gt;substr($8,1, length($8)-1)&lt;/code&gt; - This gives us the image size, without the extra comma (&amp;ldquo;length minus 1&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;avoid-duplicate-file-names&#34;&gt;Avoid duplicate file names&lt;/h2&gt;
&lt;p&gt;To ensure that two images with the same resolutions don&amp;rsquo;t create identical, competing file names, we&amp;rsquo;ll append a unique incrementing number to the filename.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BEGIN{a=0}&lt;/code&gt; - Using &lt;code&gt;BEGIN&lt;/code&gt; tells &lt;code&gt;awk&lt;/code&gt; to run the following code only once, at the (drumroll) beginning. Here, we&amp;rsquo;re declaring the variable &lt;code&gt;a&lt;/code&gt; to be &lt;code&gt;0&lt;/code&gt;.
&lt;code&gt;a++&lt;/code&gt; - Later in our code, at the appropriate spot for our file name, we call &lt;code&gt;a&lt;/code&gt; and increment it.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;awk&lt;/code&gt; prints a string, it concatenates everything that isn&amp;rsquo;t separated by a comma. &lt;code&gt;{print a b c}&lt;/code&gt; would create &amp;ldquo;abc&amp;rdquo; and &lt;code&gt;{print a,b,c}&lt;/code&gt; would create &amp;ldquo;a b c&amp;rdquo;, for example.&lt;/p&gt;
&lt;p&gt;We can add additional characters to our file name, such as an underscore, by inserting it in quotations: &lt;code&gt;&amp;quot;_&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;string-it-all-together&#34;&gt;String it all together&lt;/h2&gt;
&lt;p&gt;To feed the output of one command into another command, we use &amp;ldquo;pipe,&amp;rdquo; written as &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we only used pipe in this instance, all our data from &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; would get fed into &lt;code&gt;rename&lt;/code&gt; all at once, making for one very, very long and probably non-compiling file name. To run the &lt;code&gt;rename&lt;/code&gt; command line by line, we can use &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Similarly to &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; takes input and splits it into variables we can assign and use. In our code, it takes the first bit of output from &lt;code&gt;awk&lt;/code&gt; (the original file name) and assigns that the variable name &lt;code&gt;$fn&lt;/code&gt;. It takes the second output (our incrementing number and the image resolution) and assigns that to &lt;code&gt;$fr&lt;/code&gt;. The variable names are arbitrary; you can call them whatever you want.&lt;/p&gt;
&lt;p&gt;To run our &lt;code&gt;rename&lt;/code&gt; commands as if we&amp;rsquo;d manually entered them in the terminal one by one, we can use &lt;code&gt;echo $(some command)&lt;/code&gt;. Finally, &lt;code&gt;done&lt;/code&gt; ends our &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;bonus-round-rainbow-output&#34;&gt;Bonus round: rainbow output!&lt;/h2&gt;
&lt;p&gt;I wasn&amp;rsquo;t kidding with that &lt;a href=&#34;https://github.com/tehmaze/lolcat&#34;&gt;&amp;ldquo;rainbow-coloured&amp;rdquo; bit&amp;hellip;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s our full code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fs&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fs&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/batch-renaming-images-including-image-resolution-with-awk/renaming-rainbow_hua6bda34c4dd82ff49a9f97483b0665f2_159523_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How I created custom desktop notifications using terminal and cron</title><link>https://victoria.dev/verbose/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</link><pubDate>Tue, 21 Feb 2017 10:48:38 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/verbose/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</guid><description>How you can use tools your Linux system already has to create custom desktop notifications.</description><content:encoded>
&lt;img src="https://victoria.dev/verbose/how-i-created-custom-desktop-notifications-using-terminal-and-cron/dunstnotif_hu2db72365279baf699eed9b7492972369_54170_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;In my last post I talked about moving from Windows 10 to running i3 on Linux, built up from Debian Base System. Among other things, this change has taught me about the benefits of using basic tools and running a minimal, lightweight system. You can achieve a lot of functionality with just command line tools and simple utilities. One example I&amp;rsquo;d like to illustrate in this post is setting up desktop notifications.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&#34;http://knopwob.org/dunst/&#34;&gt;dunst&lt;/a&gt; for desktop notifications. It&amp;rsquo;s a simple, lightweight tool that is easy to configure, doesn&amp;rsquo;t have many dependencies, and can be used across various distributions.&lt;/p&gt;
&lt;h1 id=&#34;battery-status-low-battery-notification&#34;&gt;Battery status/low battery notification&lt;/h1&gt;
&lt;p&gt;I was looking for a simple, versatile set up to create notifications for my battery status without having to rely on separate, standalone GUI apps or services. In my search I came across a simple one-line cron task that seemed to be the perfect fit. I adapted it to my purpose and it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;# m h dom mon dow command
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -u critical -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;#34; -t 3000 &amp;#34;{}\nBattery low!&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Psst&amp;hellip; &lt;a href=&#34;https://crontab.guru/&#34;&gt;here&amp;rsquo;s a great tool&lt;/a&gt; for formatting your crontab times.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a lot going on here, so let&amp;rsquo;s break it down:&lt;br /&gt;
&lt;code&gt;*/5 * * * *&lt;/code&gt;&lt;br /&gt;
Every five minutes, do the following.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acpi --battery&lt;/code&gt;&lt;br /&gt;
Execute &lt;code&gt;acpi&lt;/code&gt; and show battery information, which on its own returns something akin to:&lt;br /&gt;
&lt;code&gt;Battery 0: Discharging, 65%, 03:01:27 remaining&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pretty straightforward so far. At any point you could input &lt;code&gt;acpi --battery&lt;/code&gt; in a terminal and receive the status output. Today&amp;rsquo;s post, however, is about receiving this information passively in a desktop notification. So, moving on:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| awk -F, &#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&#39;&lt;/code&gt;&lt;br /&gt;
Pipe (&lt;code&gt;|&lt;/code&gt;) the result of the previous command to &lt;code&gt;awk&lt;/code&gt;. (If you don&amp;rsquo;t know what pipe does, here&amp;rsquo;s &lt;a href=&#34;http://superuser.com/questions/756158/what-does-the-linux-pipe-symbol-do&#34;&gt;an answer from superuser.com&lt;/a&gt; that explains it pretty well, I think.) &lt;code&gt;awk&lt;/code&gt; can do a lot of things, but in this case, we&amp;rsquo;re using it to examine the status of our battery. Let&amp;rsquo;s zoom in on the &lt;code&gt;awk&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk -F, &#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&#39;&lt;/code&gt;&lt;br /&gt;
Basically, we&amp;rsquo;re saying, &amp;ldquo;Hey, awk, look at that input you just got and try to find the word &amp;ldquo;discharging,&amp;rdquo; then look to see if the number after the first comma is less than 20. If so, print the whole input.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| xargs -ri&lt;/code&gt;&lt;br /&gt;
Pipe the result of the previous command to &lt;code&gt;xargs&lt;/code&gt;, which takes it as its input and does more stuff with it. &lt;code&gt;-ri&lt;/code&gt; is equivalent to &lt;code&gt;-r&lt;/code&gt; (run the next command only if it receives arguments) and &lt;code&gt;-i&lt;/code&gt; (look for &amp;ldquo;{}&amp;rdquo; and replace it with the input). So in this example, xargs serves as our gatekeeper and messenger for the next command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env DISPLAY=:0&lt;/code&gt;&lt;br /&gt;
Run the following utility in the specified display, in this case, the first display of the local machine.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notify-send -u critical -i &amp;quot;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;quot; -t 3000 &amp;quot;{}\nLow battery!&amp;quot;&lt;/code&gt;&lt;br /&gt;
Shows a desktop notification with &lt;code&gt;-u critical&lt;/code&gt; (critical urgency), &lt;code&gt;-i&lt;/code&gt; (the specified icon), &lt;code&gt;-t 3000&lt;/code&gt; (display time/expires after 3000 milliseconds), and finally &lt;code&gt;{}&lt;/code&gt; (the output of awk, replaced by xargs).&lt;/p&gt;
&lt;p&gt;Not bad for a one-liner! I made a few modifications for different states of my battery. Here they all are in my crontab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;# m h dom mon dow command
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if ( (int($2) &amp;lt; 30) &amp;amp;&amp;amp; (int($2) &amp;gt; 15) ) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-low.png&amp;#34; -t 3000 &amp;#34;{}\nBattery low!&amp;#34;
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;lt; 15) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u critical -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;#34; -t 3000 &amp;#34;{}\nSeriously, plug me in.&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;gt; 30) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok.png&amp;#34; &amp;#34;{}&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Charging/ { print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok-charging.png&amp;#34; &amp;#34;{}&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Charging/ { if (int($2) == 100) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-full-charging.png&amp;#34; &amp;#34;Fully charged.&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, you can open your crontab in the editor of your choice by accessing it as root from the &lt;code&gt;/var/spool/cron/crontabs/&lt;/code&gt; directory. It&amp;rsquo;s generally best practice however to make changes to your crontab with the command &lt;code&gt;crontab -e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see that each notification makes use of the &lt;code&gt;{}&lt;/code&gt; placeholder that tells xargs to put its input there - except for the last one. This is interesting because in this case, we&amp;rsquo;re only using &lt;code&gt;xargs -ri&lt;/code&gt; as a kind of switch to present the notification. The actual information that was the input for xargs is not needed in the output in order to create a notification.&lt;/p&gt;
&lt;h1 id=&#34;additional-notifications-with-command-line-tools&#34;&gt;Additional notifications with command line tools&lt;/h1&gt;
&lt;p&gt;With cron and just a few combinations of simple command line tools, you can create interesting and useful notifications. Consider the following:&lt;/p&gt;
&lt;h2 id=&#34;periodically-check-your-dhcp-address&#34;&gt;Periodically check your dhcp address&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;*/60 * * * * journalctl | awk -F: &#39;/dhcp/ &amp;amp;&amp;amp; /address/ { print $5 }&#39; | tail -1 | xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;dhcp address&amp;quot; -u normal &amp;quot;{}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which does the following:&lt;br /&gt;
&lt;code&gt;*/60 * * * *&lt;/code&gt;&lt;br /&gt;
Every 60 minutes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;journalctl&lt;/code&gt;&lt;br /&gt;
Take the contents of your system log.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| awk -F: &#39;/dhcp/ &amp;amp;&amp;amp; /address/ { print $5 }&#39;&lt;/code&gt;&lt;br /&gt;
Find logs containing both &amp;ldquo;dhcp&amp;rdquo; and &amp;ldquo;address&amp;rdquo; and output the 5th portion as separated by &amp;ldquo;:&amp;rdquo; (the time field counts).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| tail -1&lt;/code&gt;&lt;br /&gt;
Take the last line of the output.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;dhcp address&amp;quot; -u normal &amp;quot;{}&amp;quot;&lt;/code&gt;&lt;br /&gt;
Create the desktop notification including the output.&lt;/p&gt;
&lt;h2 id=&#34;periodically-display-the-time-and-date&#34;&gt;Periodically display the time and date&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;*/60 * * * * timedatectl status | awk -F\n &#39;/Local time/ { print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;Current Time&amp;quot; -u normal &amp;quot;{}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-log-activity&#34;&gt;System log activity&lt;/h2&gt;
&lt;p&gt;You can also search your system logs (try &lt;code&gt;journalctl&lt;/code&gt;) for any number of things using awk, enabling you to get periodic notifications of virtually any logged events.&lt;/p&gt;
&lt;h1 id=&#34;experiment&#34;&gt;Experiment!&lt;/h1&gt;
&lt;p&gt;As with all things, you are only limited by your imagination! I hope this post has given you some idea about the endless possibilities of these simple utilities. Thanks for reading!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/verbose/how-i-created-custom-desktop-notifications-using-terminal-and-cron/dunstnotif_hu2db72365279baf699eed9b7492972369_54170_640x0_resize_box_2.png" type="image/jpg"/></item></channel></rss>