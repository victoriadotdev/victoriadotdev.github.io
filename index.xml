<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Victoria Drake on victoria.dev</title><link>https://victoria.dev/</link><description>Recent content in Victoria Drake on victoria.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@victoria.dev (Victoria)</managingEditor><webMaster>hello@victoria.dev (Victoria)</webMaster><lastBuildDate>Thu, 17 Jan 2019 13:47:16 -0500</lastBuildDate><atom:link href="https://victoria.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>A lightweight, tool-agnostic CI/CD flow with GitHub Actions</title><link>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</link><pubDate>Mon, 28 Oct 2019 08:28:52 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</guid><description>How to take advantage of a simple GitHub Actions workflow without sacrificing agnostic tooling.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/cover_hu9453ff9858136595f547e00bf2681d14_107954_640x0_resize_box_2.png" width="640" height="202"/>
&lt;p&gt;Agnostic tooling is the clever notion that you should be able to run your code in various environments. With many continuous integration and continuous development (CI/CD) apps available, agnostic tooling gives developers a big advantage: portability.&lt;/p&gt;
&lt;p&gt;Of course, having your CI/CD work &lt;em&gt;everywhere&lt;/em&gt; is a tall order. Popular &lt;a href=&#34;https://github.com/marketplace/category/continuous-integration&#34;&gt;CI apps for GitHub repositories&lt;/a&gt; alone use a multitude of configuration languages spanning &lt;a href=&#34;https://groovy-lang.org/syntax.html&#34;&gt;Groovy&lt;/a&gt;, &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt;, &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt;, &lt;a href=&#34;https://json.org/&#34;&gt;JSON&lt;/a&gt;, and more&amp;hellip; all with differing syntax, of course. Porting workflows from one tool to another is more than a one-cup-of-coffee process.&lt;/p&gt;
&lt;p&gt;The introduction of &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; has the potential to add yet another tool to the mix; or, for the right set up, greatly simplify a CI/CD workflow.&lt;/p&gt;
&lt;p&gt;Prior to this article, I accomplished my CD flow with several lashed-together apps. I used AWS Lambda to trigger site builds on a schedule. I had Netlify build on push triggers, as well as run image optimization, and then push my site to the public Pages repository. I used Travis CI in the public repository to test the HTML. All this worked in conjunction with GitHub Pages, which actually hosts the site.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m now using the GitHub Actions beta to accomplish all the same tasks, with one &lt;a href=&#34;https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/&#34;&gt;portable Makefile&lt;/a&gt; of build instructions, and without any other CI/CD apps.&lt;/p&gt;
&lt;h2 id=&#34;appreciating-the-shell&#34;&gt;Appreciating the shell&lt;/h2&gt;
&lt;p&gt;What do most CI/CD tools have in common? They run your workflow instructions in a shell environment! This is wonderful, because that means that most CI/CD tools can do anything that you can do in a terminal&amp;hellip; and you can do pretty much &lt;em&gt;anything&lt;/em&gt; in a terminal.&lt;/p&gt;
&lt;p&gt;Especially for a contained use case like building my static site with a generator like Hugo, running it all in a shell is a no-brainer. To tell the magic box what to do, we just need to write instructions.&lt;/p&gt;
&lt;p&gt;While a shell script is certainly the most portable option, I use the still-very-portable &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;Make&lt;/a&gt; to write my process instructions. This provides me with some advantages over simple shell scripting, like the use of variables and &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)#Macros&#34;&gt;macros&lt;/a&gt;, and the modularity of &lt;a href=&#34;https://en.wikipedia.org/wiki/Makefile#Rules&#34;&gt;rules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I got into the &lt;a href=&#34;https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/&#34;&gt;nitty-gritty of my Makefile in my last post&lt;/a&gt;. Let&amp;rsquo;s look at how to get GitHub Actions to run it.&lt;/p&gt;
&lt;h2 id=&#34;using-a-makefile-with-github-actions&#34;&gt;Using a Makefile with GitHub Actions&lt;/h2&gt;
&lt;p&gt;To our point on portability, my magic Makefile is stored right in the repository root. Since it&amp;rsquo;s included with the code, I can run the Makefile locally on any system where I can clone the repository, provided I set the environment variables. Using GitHub Actions as my CI/CD tool is as straightforward as making Make go worky-worky.&lt;/p&gt;
&lt;p&gt;I found the &lt;a href=&#34;https://help.github.com/en/articles/workflow-syntax-for-github-actions&#34;&gt;GitHub Actions workflow syntax guide&lt;/a&gt; to be pretty straightforward, though also lengthy on options. Here&amp;rsquo;s the necessary set up for getting the Makefile to run.&lt;/p&gt;
&lt;p&gt;The workflow file at &lt;code&gt;.github/workflow.yml&lt;/code&gt; contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;make-master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;push&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;branches&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;schedule&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cron&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;20 13 * * *&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;jobs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;runs-on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ubuntu-latest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;steps&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;uses&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions/checkout@master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;fetch-depth&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Run&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Makefile&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;TOKEN&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;${{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;secrets.TOKEN&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;make&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll explain the components that make this work.&lt;/p&gt;
&lt;h2 id=&#34;triggering-the-workflow&#34;&gt;Triggering the workflow&lt;/h2&gt;
&lt;p&gt;Actions support multiple &lt;a href=&#34;https://help.github.com/en/articles/events-that-trigger-workflows&#34;&gt;triggers for a workflow&lt;/a&gt;. Using the &lt;code&gt;on&lt;/code&gt; syntax, I&amp;rsquo;ve defined two triggers for mine: a &lt;a href=&#34;https://help.github.com/en/articles/workflow-syntax-for-github-actions#onpushpull_requestbranchestags&#34;&gt;push event&lt;/a&gt; to the &lt;code&gt;master&lt;/code&gt; branch only, and a &lt;a href=&#34;https://help.github.com/en/articles/events-that-trigger-workflows#scheduled-events-schedule&#34;&gt;scheduled&lt;/a&gt; &lt;code&gt;cron&lt;/code&gt; job.&lt;/p&gt;
&lt;p&gt;Once the &lt;code&gt;workflow.yml&lt;/code&gt; file is in your repository, either of your triggers will cause Actions to run your Makefile. To see how the last run went, you can also &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository&#34;&gt;add a fun badge&lt;/a&gt; to the README.&lt;/p&gt;
&lt;h3 id=&#34;one-hacky-thing&#34;&gt;One hacky thing&lt;/h3&gt;
&lt;p&gt;Because the Makefile runs on every push to &lt;code&gt;master&lt;/code&gt;, I sometimes would get errors when the site build had no changes. When Git, via &lt;a href=&#34;https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/&#34;&gt;my Makefile&lt;/a&gt;, attempted to commit to the Pages repository, no changes were detected and the commit would fail annoyingly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;nothing to commit, working tree clean
On branch master
Your branch is up to date with &amp;#39;origin/master&amp;#39;.
nothing to commit, working tree clean
Makefile:62: recipe for target &amp;#39;deploy&amp;#39; failed
make: *** [deploy] Error 1
##[error]Process completed with exit code 2.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I came across some solutions that proposed using &lt;code&gt;diff&lt;/code&gt; to check if a commit should be made, but this may not work for &lt;a href=&#34;https://github.com/benmatselby/hugo-deploy-gh-pages/issues/4&#34;&gt;reasons&lt;/a&gt;. As a workaround, I simply added the &lt;a href=&#34;https://gohugo.io/functions/format/#use-local-and-utc&#34;&gt;current UTC time&lt;/a&gt; to my index page so that every build would contain a change to be committed.&lt;/p&gt;
&lt;h2 id=&#34;environment-and-variables&#34;&gt;Environment and variables&lt;/h2&gt;
&lt;p&gt;You can define the &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#supported-virtual-environments-and-hardware-resources&#34;&gt;virtual environment&lt;/a&gt; for your workflow to run in using the &lt;code&gt;runs-on&lt;/code&gt; syntax. The &lt;del&gt;obvious best choice&lt;/del&gt; one I chose is Ubuntu. Using &lt;code&gt;ubuntu-latest&lt;/code&gt; gets me the most updated version, whatever that happens to be when you&amp;rsquo;re reading this.&lt;/p&gt;
&lt;p&gt;GitHub sets some &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#environment-variables&#34;&gt;default environment variables&lt;/a&gt; for workflows. The &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;&lt;code&gt;actions/checkout&lt;/code&gt; action&lt;/a&gt; with &lt;code&gt;fetch-depth: 1&lt;/code&gt; creates a copy of just the most recent commit your repository in the &lt;code&gt;GITHUB_WORKSPACE&lt;/code&gt; variable. This allows the workflow to access the Makefile at &lt;code&gt;GITHUB_WORKSPACE/Makefile&lt;/code&gt;. Without using the checkout action, the Makefile won&amp;rsquo;t be found, and I get an error that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;make: *** No rule to make target &amp;#39;all&amp;#39;. Stop.
Running Makefile
##[error]Process completed with exit code 2.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there is a &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret&#34;&gt;default &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; secret&lt;/a&gt;, this is not the one I used. The default is only locally scoped to the current repository. To be able to push to my separate GitHub Pages repository, I created a &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;personal access token&lt;/a&gt; scoped to &lt;code&gt;public_repo&lt;/code&gt; and pass it in as the &lt;code&gt;secrets.TOKEN&lt;/code&gt; encrypted variable. For a step-by-step, see &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables&#34;&gt;Creating and using secrets&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;portable-tooling&#34;&gt;Portable tooling&lt;/h2&gt;
&lt;p&gt;The nice thing about using a simple Makefile to define the bulk of my CI/CD process is that it&amp;rsquo;s completely portable. I can run a Makefile anywhere I have access to an environment, which is most CI/CD apps, virtual instances, and, of course, on my local machine.&lt;/p&gt;
&lt;p&gt;One of the reasons I like GitHub Actions is that getting my Makefile to run was pretty straightforward. I think the syntax is well done - easy to read, and intuitive when it comes to finding an option you&amp;rsquo;re looking for. For someone already using GitHub Pages, Actions provides a pretty seamless CD experience; and if that should ever change, I can run my Makefile elsewhere. ¯\_(ツ)_/¯&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/cover_hu9453ff9858136595f547e00bf2681d14_107954_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>blog</title><link>https://victoria.dev/blog/</link><pubDate>Mon, 28 Oct 2019 08:28:52 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/</guid><description>&lt;no value&gt;</description><content:encoded/></item><item><title>A portable Makefile for continuous delivery with Hugo and GitHub Pages</title><link>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</link><pubDate>Mon, 21 Oct 2019 09:09:06 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</guid><description>My Makefile for building this site, optimizing images, and running my CI/CD GitHub Actions flow.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/cover_hu9d9ed8ea95bbaa69b5034cdaef6f2293_689918_640x0_resize_box_2.png" width="640" height="390"/>
&lt;p&gt;Fun fact: I first launched this GitHub Pages site 1,018 days ago.&lt;/p&gt;
&lt;p&gt;Since then, we&amp;rsquo;ve grown together. From early cringe-worthy commit messages, through eighty-six versions of &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, and up until last week, a less-than-streamlined multi-app continuous integration and deployment (CI/CD) workflow.&lt;/p&gt;
&lt;p&gt;If you know me at all, you know I love to automate things. I&amp;rsquo;ve been using a combination of AWS Lambda, Netlify, and Travis CI to automatically build and publish this site. My workflow for the task includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; on push to master, and on a schedule (Netlify and Lambda);&lt;/li&gt;
&lt;li&gt;Optimize and resize images (Netlify);&lt;/li&gt;
&lt;li&gt;Test with &lt;a href=&#34;https://github.com/gjtorikian/html-proofer&#34;&gt;HTMLProofer&lt;/a&gt; (Travis CI); and&lt;/li&gt;
&lt;li&gt;Deploy to my &lt;a href=&#34;https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/&#34;&gt;separate, public, GitHub Pages repository&lt;/a&gt; (Netlify).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to the introduction of GitHub Actions, I&amp;rsquo;m able to do all the above with just one portable &lt;a href=&#34;https://en.wikipedia.org/wiki/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next week I&amp;rsquo;ll cover my Actions set up; today, I&amp;rsquo;ll take you through the nitty-gritty of my Makefile so you can write your own.&lt;/p&gt;
&lt;h2 id=&#34;makefile-portability&#34;&gt;Makefile portability&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html&#34;&gt;POSIX-standard-flavour Make&lt;/a&gt; runs on every Unix-like system out there. &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)#Derivatives&#34;&gt;Make derivatives&lt;/a&gt;, such as &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; and several flavours of BSD Make also run on Unix-like systems, though their particular use requires installing the respective program. To write a truly portable Makefile, mine follows the POSIX standard. (For a more thorough summation of POSIX-compatible Makefiles, I found this article helpful: &lt;a href=&#34;https://nullprogram.com/blog/2017/08/20/&#34;&gt;A Tutorial on Portable Makefiles&lt;/a&gt;.) I run Ubuntu, so I&amp;rsquo;ve tested the portability aspect using the BSD Make programs &lt;code&gt;bmake&lt;/code&gt;, &lt;code&gt;pmake&lt;/code&gt;, and &lt;code&gt;fmake&lt;/code&gt;. Compatibility with non-Unix-like systems is a little more complicated, since shell commands differ. With derivatives such as Nmake, it&amp;rsquo;s better to write a separate Makefile with appropriate Windows commands.&lt;/p&gt;
&lt;p&gt;While much of my particular use case could be achieved with shell scripting, I find Make offers some worthwhile advantages. I enjoy the ease of using variables and &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)#Macros&#34;&gt;macros&lt;/a&gt;, and the modularity of &lt;a href=&#34;https://en.wikipedia.org/wiki/Makefile#Rules&#34;&gt;rules&lt;/a&gt; when it comes to organizing my steps.&lt;/p&gt;
&lt;p&gt;The writing of rules mostly comes down to shell commands, which is the main reason Makefiles are as portable as they are. The best part is that you can do pretty much &lt;em&gt;anything&lt;/em&gt; in a terminal, and certainly handle all the workflow steps listed above.&lt;/p&gt;
&lt;h2 id=&#34;my-continuous-deployment-makefile&#34;&gt;My continuous deployment Makefile&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the portable Makefile that handles my workflow. Yes, I put emojis in there. I&amp;rsquo;m a monster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span class=&#34;nf&#34;&gt;.POSIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DESTDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;public
&lt;span class=&#34;nv&#34;&gt;HUGO_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.58.3
&lt;span class=&#34;nv&#34;&gt;OPTIMIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; find &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -not -path &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/static/*&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.png&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpeg&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; -print0 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;xargs&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-P8&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-n2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;mogrify&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-strip&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-thumbnail&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1000&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;get_repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🛎 Getting Pages repository&amp;#34;&lt;/span&gt;
git clone https://github.com/victoriadrake/victoriadrake.github.io.git &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🧹 Cleaning old build&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf *
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;❓ Checking for hugo&amp;#34;&lt;/span&gt;
@if ! &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -x &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;(command -v hugo)&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;🤵 Getting Hugo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;HUGO_VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/hugo_extended_&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;HUGO_VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;_Linux-64bit.tar.gz&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; tar xf tmp/hugo_extended_&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;HUGO_VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;_Linux-64bit.tar.gz -C tmp/&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; sudo mv -f tmp/hugo /usr/bin/&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; rm -rf tmp/&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; hugo version&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🍳 Generating site&amp;#34;&lt;/span&gt;
hugo --gc --minify -d &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🧂 Optimizing images&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OPTIMIZE&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🍜 Testing HTML&amp;#34;&lt;/span&gt;
docker run -v &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;GITHUB_WORKSPACE&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/:/mnt 18fgsa/html-proofer mnt --disable-external
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🎁 Preparing commit&amp;#34;&lt;/span&gt;
@cd &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello@victoria.dev&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Victoria via GitHub Actions&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;🤖 CD bot is helping&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push -f -q https://&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TOKEN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;@github.com/victoriadrake/victoriadrake.github.io.git master
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;🚀 Site is deployed!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sequentially, this workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clones the public Pages repository;&lt;/li&gt;
&lt;li&gt;Cleans (deletes) the previous build files;&lt;/li&gt;
&lt;li&gt;Downloads and installs the specified version of Hugo, if Hugo is not already present;&lt;/li&gt;
&lt;li&gt;Builds the site;&lt;/li&gt;
&lt;li&gt;Optimizes images;&lt;/li&gt;
&lt;li&gt;Tests the built site with HTMLProofer, and&lt;/li&gt;
&lt;li&gt;Prepares a new commit and pushes to the public Pages repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with command line, most of this may look familiar. Here are a couple bits that might warrant a little explanation.&lt;/p&gt;
&lt;h3 id=&#34;checking-if-a-program-is-already-installed&#34;&gt;Checking if a program is already installed&lt;/h3&gt;
&lt;p&gt;I think this bit is pretty tidy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; ! &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -x &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;(command -v hugo)&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;...
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use a negated &lt;code&gt;if&lt;/code&gt; conditional in conjunction with &lt;code&gt;command -v&lt;/code&gt; to check if an executable (&lt;code&gt;-x&lt;/code&gt;) called &lt;code&gt;hugo&lt;/code&gt; exists. If one is not present, the script gets the specified version of Hugo and installs it. &lt;a href=&#34;https://stackoverflow.com/a/677212&#34;&gt;This Stack Overflow answer&lt;/a&gt; has a nice summation of why &lt;code&gt;command -v&lt;/code&gt; is a more portable choice than &lt;code&gt;which&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;image-optimization&#34;&gt;Image optimization&lt;/h3&gt;
&lt;p&gt;My Makefile uses &lt;code&gt;mogrify&lt;/code&gt; to batch resize and compress images in particular folders. It finds them automatically using the file extension, and only modifies images that are larger than the target size of 1000px in any dimension. I wrote more about the &lt;a href=&#34;https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/&#34;&gt;batch-processing one-liner in this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few different ways to achieve this same task, one of which, theoretically, is to take advantage of Make&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)#Suffix_rules&#34;&gt;suffix rules&lt;/a&gt; to run commands only on image files. I find the shell script to be more readable.&lt;/p&gt;
&lt;h3 id=&#34;using-dockerized-htmlproofer&#34;&gt;Using Dockerized HTMLProofer&lt;/h3&gt;
&lt;p&gt;HTMLProofer is installed with &lt;code&gt;gem&lt;/code&gt;, and uses Ruby and &lt;a href=&#34;https://nokogiri.org/tutorials/ensuring_well_formed_markup.html&#34;&gt;Nokogiri&lt;/a&gt;, which adds up to a lot of installation time for a CI workflow. Thankfully, &lt;a href=&#34;https://github.com/18F&#34;&gt;18F&lt;/a&gt; has a &lt;a href=&#34;https://github.com/18F/html-proofer-docker&#34;&gt;Dockerized version&lt;/a&gt; that is much faster to implement. Its usage requires starting the container with the built site directory &lt;a href=&#34;https://docs.docker.com/storage/volumes/#start-a-container-with-a-volume&#34;&gt;mounted as a data volume&lt;/a&gt;, which is easily achieved by appending to the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -v /absolute/path/to/site/:/mounted-site 18fgsa/html-proofer /mounted-site&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my Makefile, I specify the absolute site path using the &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#environment-variables&#34;&gt;default environment variable&lt;/a&gt; &lt;code&gt;GITHUB_WORKSPACE&lt;/code&gt;. I&amp;rsquo;ll dive into this and other GitHub Actions features in the next post.&lt;/p&gt;
&lt;p&gt;In the meantime, happy Making!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/cover_hu9d9ed8ea95bbaa69b5034cdaef6f2293_689918_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to quickly batch resize, compress, and convert images with a Bash one-liner</title><link>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</link><pubDate>Mon, 14 Oct 2019 08:27:49 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</guid><description>A fast command line interface solution for batch image processing.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/cover_hud69be56925ea18eef655f06e008202c3_854420_640x0_resize_box_2.png" width="640" height="345"/>
&lt;p&gt;Part of my Hugo site continuous deployment workflow is the processing of 210 images, at time of writing.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my one-liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find public/ -not -path &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/static/*&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.png&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpeg&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; -print0 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 -P8 -n2 mogrify -strip -thumbnail &lt;span class=&#34;s1&#34;&gt;&amp;#39;1000&amp;gt;&amp;#39;&lt;/span&gt; -format jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;find&lt;/code&gt; to target only certain image file formats in certain directories. With &lt;a href=&#34;https://www.imagemagick.org/script/mogrify.php&#34;&gt;&lt;code&gt;mogrify&lt;/code&gt;, part of ImageMagick&lt;/a&gt;, I resize only the images that are larger than a certain dimension, compress them, and strip the metadata. I tack on the &lt;code&gt;format&lt;/code&gt; flag to create jpg copies of the images.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the one-liner again (broken up for better reading):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Look in the public/ directory&lt;/span&gt;
find public/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Ignore directories called &amp;#34;static&amp;#34; regardless of location&lt;/span&gt;
-not -path &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/static/*&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Print the file paths of all files ending with any of these extensions&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.png&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt; -o -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.jpeg&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; -print0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Pipe the file paths to xargs and use 8 parallel workers to process 2 arguments&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 -P8 -n2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Tell mogrify to strip metadata, and...&lt;/span&gt;
mogrify -strip &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ...compress and resize any images larger than the target size (1000px in either dimension)&lt;/span&gt;
-thumbnail &lt;span class=&#34;s1&#34;&gt;&amp;#39;1000&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Convert the files to jpg format&lt;/span&gt;
-format jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. That&amp;rsquo;s the post.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/cover_hud69be56925ea18eef655f06e008202c3_854420_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Personal cybersecurity posture for when you&#39;re just this guy, you know?</title><link>https://victoria.dev/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/</link><pubDate>Mon, 07 Oct 2019 08:30:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/</guid><description>Security best practices for the average person.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/cover_huf0e51aa7e25b35c2bbad0add1e75167c_1146239_640x0_resize_q75_box.jpg" width="640" height="440"/>
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Zaphod&amp;rsquo;s just this guy, you know?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ndash; Halfrunt, Hitchhiker&amp;rsquo;s Guide to the Galaxy by Douglas Adams. The book, not the movie. Definitely not the movie.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some people (🙋🏻‍) are really into cybersecurity, end-to-end encryption, and totally geeked out when they first learned how the &lt;a href=&#34;https://en.wikipedia.org/wiki/Enigma_machine&#34;&gt;Enigma&lt;/a&gt; worked. These people are likely to have an innate interest in building a less-than-laughable personal cybersecurity posture.&lt;/p&gt;
&lt;p&gt;Most people, unfortunately, consider cybersecurity optional. Most people say things like:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;There&amp;rsquo;s no one targeting lil ol&amp;rsquo; me.&amp;rdquo;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;I have nothing to hide, anyway.&amp;rdquo;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;I&amp;rsquo;m too busy to learn all this stuff. Why can&amp;rsquo;t someone just give me a simple summary of best practices that I can skim in approximately seven minutes?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To those people, I say, hello, hypothetical incorporeal reader! Here is a simple summary of best practices that you can skim in approximately seven minutes.&lt;/p&gt;
&lt;h2 id=&#34;wait-why-do-i-care&#34;&gt;Wait why do I care&lt;/h2&gt;
&lt;p&gt;You may have a hard time understanding why cybersecurity matters when you&amp;rsquo;re just an average person. Sure, you don&amp;rsquo;t want your devices hacked or your personal data stolen, but it&amp;rsquo;s not like anyone is coming after &lt;em&gt;you&lt;/em&gt;, specifically, right?&lt;/p&gt;
&lt;p&gt;Hey Alex, I&amp;rsquo;ll take &amp;ldquo;right,&amp;rdquo; for $400. It&amp;rsquo;s unlikely anyone is attempting to steal your &lt;em&gt;particular&lt;/em&gt; stuff, although I must admit that Persian rug of yours would really tie the room together. Instead, it can help to understand cybersecurity if you think of it in terms of low-hanging fruit.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve got some fruit, I&amp;rsquo;ve got some fruit. Joe from down the block has a 1.21 gigawatt flux-capacitor-powered fruit-snatching robot. Joe doesn&amp;rsquo;t know either of us exist, but his robot goes (very quickly) from door to door, all the way around the block, looking for fruit. If my front door is locked and yours is standing open, whose fruit is Joe&amp;rsquo;s robot going to snatch?&lt;/p&gt;
&lt;p&gt;If that sounds like boring, old, &lt;em&gt;regular&lt;/em&gt; security, you&amp;rsquo;re correct! Cybersecurity isn&amp;rsquo;t about finding some magic spell that makes your fruit maximally secure. It&amp;rsquo;s about making your fruit more secure than the fruit next to you. You do this by employing some thoughtful habits, in much the same way as you learned to lock your front door to guard against fruit-snatching robots.&lt;/p&gt;
&lt;p&gt;Security breaches and incidents happen every day. Most of them occur because an automated scanner cast a wide net and found a person or company with lax security that a hacker could then exploit. Don&amp;rsquo;t be that guy.&lt;/p&gt;
&lt;h2 id=&#34;wait-what-s-a-security-posture-anyway&#34;&gt;Wait what&amp;rsquo;s a security posture anyway&lt;/h2&gt;
&lt;p&gt;Here is how the National Institute of Standards and Technology defines security posture:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The security status of an enterprise’s networks, information, and systems based on information assurance resources (e.g., people, hardware, software, policies) and capabilities in place to manage the defense of the enterprise and to react as the situation changes. &lt;em&gt;(&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final#pubs-topics&#34;&gt;NIST Special Publication 800-30, B-11&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The important bit above is, &lt;em&gt;&amp;ldquo;capabilities in place to manage the defense of the enterprise.&amp;rdquo;&lt;/em&gt; In the context of personal security, you are the enterprise. Congratulations. May you boldly go where no man has gone before.&lt;/p&gt;
&lt;p&gt;Before you explore strange new worlds (it &lt;em&gt;is&lt;/em&gt; the Internet, after all), there are steps you can take to manage your defenses. The word &amp;ldquo;capabilities&amp;rdquo; is apt, as having certain things in place will pretty much give you cybersecurity superpowers. Here are the three steps I consider most important and beneficial:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use multifactor authentication&lt;/li&gt;
&lt;li&gt;Use a VPN&lt;/li&gt;
&lt;li&gt;Develop healthy skepticism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With these three keys in hand, your cybersecurity posture goes from being robot lunch to War Games - where the winning move for an attacker is not to play.&lt;/p&gt;
&lt;h2 id=&#34;1-use-multifactor-authentication&#34;&gt;1. Use multifactor authentication&lt;/h2&gt;
&lt;p&gt;Passwords are dead. Computationally, they are a solved problem, and cracking passwords is just &lt;a href=&#34;https://howsecureismypassword.net/&#34;&gt;a matter of time&lt;/a&gt;. Unfortunately, many people still help to speed up the process by using the same &lt;a href=&#34;https://haveibeenpwned.com/Passwords&#34;&gt;compromised passwords&lt;/a&gt; for multiple accounts, putting themselves at risk for inconceivable benefit. &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html#a2-length&#34;&gt;Pass phrases&lt;/a&gt; are longer and more complicated, and would take a lot more time to crack. I highly recommend them; even so, &lt;a href=&#34;https://techcommunity.microsoft.com/t5/Azure-Active-Directory-Identity/Your-Pa-word-doesn-t-matter/ba-p/731984&#34;&gt;your password ultimately doesn&amp;rsquo;t matter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The answer, at least for now, is &lt;a href=&#34;https://en.wikipedia.org/wiki/Multi-factor_authentication&#34;&gt;multifactor authentication&lt;/a&gt; (MFA). MFA is made up of three kinds of authentication factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Something you know, like a pass phrase;&lt;/li&gt;
&lt;li&gt;Something you have, like a chip pin card or phone; and&lt;/li&gt;
&lt;li&gt;Something that you are, like your face or fingerprint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;mfa.png&#34; alt=&#34;Also the name of my next beatboxing team.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Two or more of these factors are infinitely better than a password alone, especially if &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_the_most_common_passwords&#34;&gt;your password is on this list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Multiple authentication factors are now widely supported by account providers and social media sites. If you have the choice, avoid using text messages as a way of receiving authentication codes. SMS authentication leaves you vulnerable to the &lt;a href=&#34;https://en.wikipedia.org/wiki/SIM_swap_scam&#34;&gt;SIM swap attack&lt;/a&gt; - please direct further questions to &lt;a href=&#34;https://www.nytimes.com/2019/09/05/technology/sim-swap-jack-dorsey-hack.html&#34;&gt;Jack Dorsey&lt;/a&gt;. Instead, use an authenticator app like &lt;a href=&#34;https://google-authenticator.com/&#34;&gt;Google Authenticator&lt;/a&gt; to generate codes on your device. This ensures that you alone, using that particular device, will have the correct authentication code. No power in the &amp;lsquo;verse can stop you.&lt;/p&gt;
&lt;p&gt;The Google Authenticator app works with the specific device you set it up on, so when you get a new device you will need to &lt;a href=&#34;https://support.google.com/accounts/troubleshooter/4430955?hl=en#ts=4430956&#34;&gt;move Google Authenticator to your new phone&lt;/a&gt;. Hardware authentication keys such as the &lt;a href=&#34;https://www.yubico.com/&#34;&gt;YubiKey&lt;/a&gt; may present less hassle when switching devices, but aren&amp;rsquo;t yet as widely supported as authentication apps.&lt;/p&gt;
&lt;h2 id=&#34;2-use-a-vpn&#34;&gt;2. Use a VPN&lt;/h2&gt;
&lt;p&gt;The difference between using a VPN and not using one is like how The Dark Knight Rises was really good and Batman v Superman was really, really bad. Same franchise, totally different standards.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you send a lot of mail, but never bother to put your letters in envelopes or even fold them in half. Anyone who bothers to look will know that you&amp;rsquo;re not really the Dread Pirate Roberts after all. When you use a Virtual Private Network, especially if you often connect to public WiFi, it&amp;rsquo;s like putting your letters into cryptographically-sealed envelopes and sending them via a special invisible courier service. No one but the intended recipient can read your letters, and no one but you and the courier know to whom the letters are sent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;vpnmail.png&#34; alt=&#34;Encrypted mail still won&#39;t stop you from the accidental &amp;quot;reply all&amp;quot; unfortunately.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;VPNs prevent others from reading your communications, like opportunistic attackers who scan open WiFi, and even your own Internet Service Provider (ISP) who may sell your usage data for advertising dollars.&lt;/p&gt;
&lt;p&gt;Choosing a trustworthy VPN provider requires some research, and is in itself material enough for a separate article. As a starting point, look for providers with firm policies against logging, and expect to pay between $5-$10 USD monthly for the service. Avoid free VPN apps and services with ambiguous privacy policies; they&amp;rsquo;ll typically cost you much more than you&amp;rsquo;ll know.&lt;/p&gt;
&lt;h2 id=&#34;3-develop-healthy-skepticism&#34;&gt;3. Develop healthy skepticism&lt;/h2&gt;
&lt;p&gt;Ultimately, the weakest link in your cybersecurity defense is you. All the MFA and VPNs on the Internet won&amp;rsquo;t protect you if a scam or malware bot can trick you into opening the front gates. Yes, I know it&amp;rsquo;s a very nice looking wooden horse. Also free. Did you order it? No? Then it can stay outside.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;horse.png&#34; alt=&#34;Always look a Trojan gift horse in the mouth.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Develop the habit of second-guessing things delivered to your virtual doorstep. Email, phone, and messaging scams range in sophistication, from rickety robot-assembled shotgun blasts to elaborate social engineering attacks that &lt;a href=&#34;https://www.youtube.com/watch?v=8bAuA1isCz0&#34;&gt;use cognitive biases very effectively&lt;/a&gt;. Don&amp;rsquo;t assume you&amp;rsquo;re too clever for them; humans are very predictable creatures. After all, nobody expects the Spanish Inquisition.&lt;/p&gt;
&lt;p&gt;Instead, ask questions. Double check communications that ask you to click on links or visit a website, even if they come from someone you know or a company you use. If you&amp;rsquo;re not certain, based on a previous in-person interaction, that your friend or bank or mother sent this email, pick up the phone and call them. Even if you think you are certain, pick up the phone and check. You don&amp;rsquo;t call your mother enough, anyway.&lt;/p&gt;
&lt;p&gt;Oh, and if the person on the phone is from your local tax office or the IRS or the CRA and they&amp;rsquo;re about to freeze your accounts because a case of mistaken identity has resulted in you being criminally charged for not repaying a loan on a 600-foot yacht in Malibu, just hang up. You know better than that. Tax agencies don&amp;rsquo;t have phones.&lt;/p&gt;
&lt;h2 id=&#34;your-personal-cybersecurity-starter-pack&#34;&gt;Your personal cybersecurity starter pack&lt;/h2&gt;
&lt;p&gt;You now have three keys to open three gates to a robust personal cybersecurity posture. If those keys have also unlocked your curiosity, there&amp;rsquo;s plenty more rabbit hole to go down. I highly recommend the &lt;a href=&#34;https://securityinfive.com/&#34;&gt;Security in Five podcast&lt;/a&gt; for Binary Blogger&amp;rsquo;s great advice, which inspired much of this post. &lt;a href=&#34;https://ssd.eff.org/&#34;&gt;Surveillance Self Defense&lt;/a&gt; offers the Electronic Frontier Foundation&amp;rsquo;s tips on securing online communication. Troy Hunt also has a YouTube series entitled &lt;a href=&#34;https://www.troyhunt.com/get-to-grips-with-internet-security-basics-courtesy-of-varonis/&#34;&gt;Internet Security Basics&lt;/a&gt; that goes into more depth on how to protect yourself online.&lt;/p&gt;
&lt;p&gt;For now, I hope you use your newfound cybersecurity powers for good. Mind what you have learned. Save you it can.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/cover_huf0e51aa7e25b35c2bbad0add1e75167c_1146239_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Secure application architecture basics: separation, configuration, and access</title><link>https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/</link><pubDate>Mon, 30 Sep 2019 08:03:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/</guid><description>A starting point for building secure application architecture, for busy developers.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/cover_hu73e92637aebb1682b96cf0460f9cc452_2063427_640x0_resize_box_2.png" width="640" height="443"/>
&lt;p&gt;Software developers today are encouraged to focus on building, and that&amp;rsquo;s a great thing. We&amp;rsquo;re benefitting from maker culture, an attitude of &amp;ldquo;always be shipping,&amp;rdquo; open source collaboration, and a bevy of apps that help us prioritize and execute with maximum efficiency. We&amp;rsquo;re in an environment of constant creation, where both teams and solo entrepreneurs can be maximally productive.&lt;/p&gt;
&lt;p&gt;Sometimes, this breakneck-speed productivity shows its downsides.&lt;/p&gt;
&lt;p&gt;As I learn more about security best practices, I can&amp;rsquo;t help but see more and more applications that just don&amp;rsquo;t have a clue. A lack of awareness of security seems to lead to a lack of prioritization of tasks that don&amp;rsquo;t directly support bringing the product to launch. The market seems to have made it more important to launch a usable product than a secure one, with the prevailing attitude being, &amp;ldquo;we can do the security stuff later.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Cobbling together a foundation based more on expediency than longevity is a bad way to build applications and a great way to build security debt. Security debt, like technical debt, amasses when developers make (usually hasty) decisions that can make it more difficult to secure the application later on. If you&amp;rsquo;re familiar with the concept of &amp;ldquo;pushing left&amp;rdquo; (or if you read my &lt;a href=&#34;https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/&#34;&gt;article about sensitive data exposure&lt;/a&gt;), you&amp;rsquo;ll know that when it comes to security, sometimes there isn&amp;rsquo;t a version of &amp;ldquo;later&amp;rdquo; that isn&amp;rsquo;t &lt;em&gt;too&lt;/em&gt; late. It&amp;rsquo;s a shame, especially since following some basic security practices with high benefit yield early on in the development process doesn&amp;rsquo;t take significantly more time than &lt;em&gt;not&lt;/em&gt; following them. Often, it comes down to having some basic but important knowledge that enables making the more secure decision.&lt;/p&gt;
&lt;p&gt;While application architecture specifics vary, there are a few basic principles we can commonly apply. This article will provide a high-level overview of areas that I hope will help point developers in the right direction.&lt;/p&gt;
&lt;p&gt;There must be a reason we call it application &amp;ldquo;architecture.&amp;rdquo; I like to think it&amp;rsquo;s because the architecture of software is similar in some basic ways to the architecture of a building. (Or at least, in my absolute zero building-creation expertise, how I imagine a pretty utilitarian building to be.) Here&amp;rsquo;s how I like to summarize three basic points of building secure application architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separated storage&lt;/li&gt;
&lt;li&gt;Customized configuration&lt;/li&gt;
&lt;li&gt;Controlled access and user scope&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is only a jumping-off point meant to get us started on the right foot; a complete picture of a fully-realized application&amp;rsquo;s security posture includes areas outside the scope of this post, including authentication, logging and monitoring, integration, and sometimes compliance.&lt;/p&gt;
&lt;h2 id=&#34;1-separated-storage&#34;&gt;1. Separated storage&lt;/h2&gt;
&lt;p&gt;From a security standpoint, the concept of separation refers to storing files that serve different purposes in different places. When we&amp;rsquo;re constructing our building and deciding where all the rooms go, we similarly create the lobby on the ground floor and place administrative offices on higher floors, perhaps off the main path. While both are rooms, we understand that they serve different purposes, have different functional needs, and possibly very different security requirements.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;separation.png&#34; alt=&#34;Separation of building floors&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When it comes to our files, the benefit is perhaps easiest for us to understand if we consider a simple file structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;application/
├───html/
│ └───index.html
├───assets/
│ ├───images/
│ │ ├───rainbows.jpg
│ │ └───unicorns.jpg
│ └───style.css
└───super-secret-configurations/
└───master-keys.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our simplified example, let&amp;rsquo;s say that all our application&amp;rsquo;s images are stored in the &lt;code&gt;application/assets/images/&lt;/code&gt; directory. When one of our users creates a profile and uploads their picture to it, this picture is also stored in this folder. Makes sense, right? It&amp;rsquo;s an image, and that&amp;rsquo;s where the images go. What&amp;rsquo;s the issue?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with navigating a file structure in a terminal, you may have seen this syntax before: &lt;code&gt;../../&lt;/code&gt;. The two dots are a handy way of saying, &amp;ldquo;go up one directory.&amp;rdquo; If we execute the command &lt;code&gt;cd ../../&lt;/code&gt; in the &lt;code&gt;images/&lt;/code&gt; directory of our simple file structure above, we&amp;rsquo;d go up into &lt;code&gt;assets/&lt;/code&gt;, then up again to the root directory, &lt;code&gt;application/&lt;/code&gt;. This is a problem because of a wee little vulnerability dubbed &lt;a href=&#34;https://cwe.mitre.org/data/definitions/22.html&#34;&gt;path traversal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the dot syntax saves us some typing, it also introduces the interesting advantage of not actually needing to know what the parent directory is called in order to go to it. Consider an attack payload script, delivered into the &lt;code&gt;images/&lt;/code&gt; folder of our insecure application, that went up one directory using &lt;code&gt;cd ../&lt;/code&gt; and then sent everything it found to the attacker, on repeat. Eventually, it would reach the root application directory and access the &lt;code&gt;super-secret-configurations/&lt;/code&gt; folder. Not good.&lt;/p&gt;
&lt;p&gt;While other measures should be in place to prevent path traversal and related user upload vulnerabilities, the simplest prevention by far is a separation of storage. Core application files and assets should not be combined with other data, and especially not with &lt;a href=&#34;https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/&#34;&gt;user input&lt;/a&gt;. It&amp;rsquo;s best to keep user-uploaded files and activity logs (which may contain juicy data and can be vulnerable to injection attacks) separate from the main application.&lt;/p&gt;
&lt;p&gt;Separation can be achieved in a few ways, such as by using a different server, different instance, separate IP range, or separate domain.&lt;/p&gt;
&lt;h2 id=&#34;2-customized-configuration&#34;&gt;2. Customized configuration&lt;/h2&gt;
&lt;p&gt;While wasting time on customization can hinder productivity, one area that we definitely want to customize is configuration settings. &lt;a href=&#34;https://github.com/OWASP/Top10/blob/cb5f8967bba106e14a350761ac4f93b8aec7f8fa/2017/en/0xa6-security-misconfiguration.md&#34;&gt;Security misconfiguration&lt;/a&gt; is listed in the OWASP Top 10. A significant number of security incidents occur because a server, firewall, or administrative account is running in production with default settings. Upon the opening of our new building, we&amp;rsquo;d hopefully be more careful to ensure we haven&amp;rsquo;t left any keys in the locks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;defaultkey.png&#34; alt=&#34;Three keys&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Usually, the victims of attacks related to default settings aren&amp;rsquo;t specifically targeted. Rather, they are found by automated scanning tools that attackers run over many possible targets, effectively prodding at many different systems to see if any roll over and expose some useful exploit. The automated nature of this attack means that it&amp;rsquo;s important for us to review settings for every piece of our architecture. Even if an individual piece doesn&amp;rsquo;t seem significant, it may provide a vulnerability that allows an attacker to use it as a gateway to our larger application.&lt;/p&gt;
&lt;p&gt;In particular, examine architecture components for unattended areas such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default accounts, especially with default passwords, left in service;&lt;/li&gt;
&lt;li&gt;Example web pages, tutorial applications, or sample data left in the application;&lt;/li&gt;
&lt;li&gt;Unnecessary ports left in service, or ports left open to the Internet;&lt;/li&gt;
&lt;li&gt;Unrestricted permitted HTTP methods;&lt;/li&gt;
&lt;li&gt;Sensitive information stored in automated logs;&lt;/li&gt;
&lt;li&gt;Default configured permissions in managed services; and,&lt;/li&gt;
&lt;li&gt;Directory listings, or sensitive file types, left accessible by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list isn&amp;rsquo;t exhaustive. Specific architecture components, such as cloud storage or web servers, will have other configurable features that should be reviewed. In general, reduce the application&amp;rsquo;s attack surface by using minimal architecture components. If we use fewer components or don&amp;rsquo;t install modules we don&amp;rsquo;t need, we&amp;rsquo;ll have fewer possible attack entry points to configure and safeguard.&lt;/p&gt;
&lt;h2 id=&#34;3-controlled-access-and-user-scope&#34;&gt;3. Controlled access and user scope&lt;/h2&gt;
&lt;p&gt;One of the more difficult security problems to test in an application is misconfigured access control. Automated testing tools have limited capability to find areas of an application that one user shouldn&amp;rsquo;t be able to access. Thus, this is often left to manual testing or source code review to discover. By considering this vulnerability early on in the software development lifecycle when architectural decisions are being made, we reduce the risk that it becomes a problem that&amp;rsquo;s harder to fix later. After all, we wouldn&amp;rsquo;t simply leave our master keys out of reach on a high ledge and hope no one comes along with a ladder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;access.png&#34; alt=&#34;A cartoon of a user attempting to elevate privilege&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP/Top10/blob/master/2017/en/0xa5-broken-access-control.md&#34;&gt;Broken access control&lt;/a&gt; is listed in the OWASP Top 10, which goes into more detail on its various forms. As a simple example, consider an application with two levels of access: administrators, and users. We want to build a new feature - the ability to moderate or ban users - with the intention that only administrators would be allowed to use it.&lt;/p&gt;
&lt;p&gt;If we&amp;rsquo;re aware of the possibility of access control misconfigurations or exploits, we may decide to build the moderation feature in a completely separate area from the user-accessible space, such as on a different domain, or as part of a model that users don&amp;rsquo;t share. This greatly reduces the risk that an access control misconfiguration or elevation of privilege vulnerability might allow a user to improperly access the moderation feature later on.&lt;/p&gt;
&lt;p&gt;Of course, robust access control in our application needs more support to be effective. Consider factors such as sensitive tokens, or keys passed as URL parameters, or whether a control fails securely or insecurely. Nevertheless, by considering authorization at the architectural stage, we can set ourselves up to make further reinforcements easier to implement.&lt;/p&gt;
&lt;h2 id=&#34;security-basics-for-maximum-benefit&#34;&gt;Security basics for maximum benefit&lt;/h2&gt;
&lt;p&gt;Similar to avoiding racking up technical debt by choosing a well-vetted framework, developers can avoid security debt by becoming aware of common vulnerabilities and the simple architectural decisions we can make to help mitigate them. For a much more detailed resource on how to bake security into our applications from the start, the &lt;a href=&#34;https://github.com/OWASP/ASVS&#34;&gt;OWASP Application Security Verification Standard&lt;/a&gt; is a robust guide.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/cover_hu73e92637aebb1682b96cf0460f9cc452_2063427_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Migrating to the cloud but without screwing it up, or how to move house</title><link>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</link><pubDate>Mon, 23 Sep 2019 08:03:12 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</guid><description>A practical guide to moving to cloud services with minimal downtime, using AWS examples.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" width="640" height="468"/>
&lt;p&gt;For an application that&amp;rsquo;s ready to scale, not using managed cloud architecture these days is like insisting on digging your own well for water. It&amp;rsquo;s far more labour-intensive, requires buying all your own equipment, takes a lot more time, and there&amp;rsquo;s a higher chance you&amp;rsquo;re going to get it wrong because you don&amp;rsquo;t personally have a whole lot of experience digging wells, anyway.&lt;/p&gt;
&lt;p&gt;That said - let&amp;rsquo;s just get this out of the way first - there is no cloud. It&amp;rsquo;s just someone else&amp;rsquo;s computer.&lt;/p&gt;
&lt;p&gt;Of course, these days, cloud services go far beyond the utility we&amp;rsquo;d expect from a single computer. Besides being able to quickly set up and utilize the kind of computing power that previously required a new office lease agreement to house, there are now a multitude of monitoring, management, and analysis tools at our giddy fingertips. While it&amp;rsquo;s important to understand that the cloud isn&amp;rsquo;t a better option in every case, for applications that can take advantage of it, we can do more, do it faster, and do it for less money than if we were to insist on building our own on-premises infrastructure.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all great, and easily said; moving to the cloud, however, can look from the outset like a pretty daunting task. How, exactly, do we go about shifting what may be years of on-premises data and built-up systems to &lt;em&gt;someone else&amp;rsquo;s computer?&lt;/em&gt; You know, without being able to see it, touch it, and without completely screwing up our stuff.&lt;/p&gt;
&lt;p&gt;While it probably takes less work and money than setting up or maintaining the same architecture on-premise, it does take some work to move to the cloud initially. It&amp;rsquo;s important that our application is prepared to migrate, and capable of using the benefits of cloud services once it gets there. To accomplish this, and a smooth transition, preparation is key. In fact, it&amp;rsquo;s a whole lot like moving to a new house.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll take a high-level look at the general stages of taking an on-premise or self-hosted application and moving it to the cloud. This guide is meant to serve as a starting point for designing the appropriate process for your particular situation, and to enable you to better understand the cloud migration process. While cloud migration may not be the best choice for some applications - such as ones without scalable architecture or where very high computing resources are needed - a majority of modular and modern applications stand to benefit from a move to the cloud.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s certainly possible, as I discovered at a recent event put on by &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt; (AWS) Solutions Architects, to migrate smoothly and efficiently, with near-zero loss of availability to customers. I&amp;rsquo;ll specifically reference some services provided by AWS, however, similar functionality can be found with other cloud providers. I&amp;rsquo;ve found the offerings from AWS to be pleasantly modular in scope, which is why I use them myself and why they make good examples for discussing general concepts.&lt;/p&gt;
&lt;p&gt;To have our move go as smoothly as possible, here are the things we&amp;rsquo;ll want to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The type of move we&amp;rsquo;re making;&lt;/li&gt;
&lt;li&gt;The things we&amp;rsquo;ll take, and the things we&amp;rsquo;ll clean up;&lt;/li&gt;
&lt;li&gt;How to choose the right type and size for the infrastructure we&amp;rsquo;re moving into; and&lt;/li&gt;
&lt;li&gt;How to do test runs to practice for the big day.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-type-of-move-we-re-making&#34;&gt;The type of move we&amp;rsquo;re making&lt;/h2&gt;
&lt;p&gt;While it&amp;rsquo;s important to understand why we&amp;rsquo;re moving our application to cloud services, we should also have an idea of what we&amp;rsquo;d like it to look like when it gets there. There are three main ways to move to the cloud: re-host, re-platform, or re-factor.&lt;/p&gt;
&lt;h3 id=&#34;re-host&#34;&gt;Re-host&lt;/h3&gt;
&lt;p&gt;A re-host scenario is the the most straightforward type of move. It involves no change to the way our application is built or how it runs. For example, if we currently have Python code, use PostgreSQL, and serve our application with Apache, a re-host move would mean we use all the same components, combined in just the same way, only now they&amp;rsquo;re in the cloud. It&amp;rsquo;s a lot like moving into a new house that has the exact same floor plan as the current one. All the furniture goes into the same room it&amp;rsquo;s in now, and it&amp;rsquo;s going to feel pretty familiar when we get there.&lt;/p&gt;
&lt;p&gt;The main draw of a re-host move is that it may offer the least amount of complication necessary in order to take advantage of going to the cloud. Scalable applications, for example, can gain the ability to automatically manage necessary application resources.&lt;/p&gt;
&lt;p&gt;While re-hosting makes scaling more automatic, it&amp;rsquo;s important to note that it won&amp;rsquo;t in itself make an application scalable. If the application infrastructure is not organized in such a way that gives it the ability to scale, a re-factor may be necessary instead.&lt;/p&gt;
&lt;h3 id=&#34;re-platform&#34;&gt;Re-platform&lt;/h3&gt;
&lt;p&gt;If a component of our current application set up isn&amp;rsquo;t working out well for us, we&amp;rsquo;re probably going to want to re-platform. In this case, we&amp;rsquo;re making a change to at least one component of our architecture; for example, switching our database from Oracle to MySQL on &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;Amazon Relational Database Service&lt;/a&gt; (RDS).&lt;/p&gt;
&lt;p&gt;Like moving from a small apartment in Tokyo to an equally small apartment in New York, a re-platform doesn&amp;rsquo;t change the basic nature of our application, but does change its appearance and environment. In the database change example, we&amp;rsquo;ll have all the same data, just organized or formatted a little differently. In most cases, we won&amp;rsquo;t have to make these changes manually. A tool such as &lt;a href=&#34;https://aws.amazon.com/dms/&#34;&gt;Amazon Database Migration Service&lt;/a&gt; (DMS) can help to seamlessly shift our data over to the new database.&lt;/p&gt;
&lt;p&gt;We might re-platform in order to enable us to better meet a business demand in the future, such as scaling up, integrating with other technological components, or choosing a more modern technology stack.&lt;/p&gt;
&lt;h3 id=&#34;re-factor&#34;&gt;Re-factor&lt;/h3&gt;
&lt;p&gt;A move in which we re-factor our application is necessarily more complicated than our other options, however, it may provide the most overall benefit for companies or applications that have reason to make this type of move. As with code, refactoring is done when fundamental changes need to be made in order for our application to meet a business need. The specifics necessarily differ case-by-case, but typically involve changes to architectural components or how those components relate to one another. This type of move may also involve changing application code in order to optimize the application&amp;rsquo;s performance in a cloud environment. We can think of it like moving out from our parent&amp;rsquo;s basement in the suburbs and getting a nice townhouse in the city. There&amp;rsquo;s no way we&amp;rsquo;re taking that ancient hand-me-down sofa, so we&amp;rsquo;ll need some new furniture, and for our neighbour&amp;rsquo;s sake, probably window dressings.&lt;/p&gt;
&lt;p&gt;Refactoring may enable us to modernize a dated application, or make it more efficient in general. With greater efficiency, we can better take advantage of services that cloud providers typically offer, like bursting resources or attaining deep analytical insight.&lt;/p&gt;
&lt;p&gt;If a re-factor is necessary but time is scarce, it may be better to re-host or re-platform first, then re-factor later. That way, we&amp;rsquo;ll have a job well done later instead of a hasty, botched migration (and more problems) sooner.&lt;/p&gt;
&lt;h2 id=&#34;what-to-take-and-what-to-clean-up&#34;&gt;What to take, and what to clean up&lt;/h2&gt;
&lt;p&gt;Over the years of living in one place, stuff tends to pile up unnoticed in nooks and crannies. When moving house, it&amp;rsquo;s usually a great opportunity to sort everything out and decide what is useful enough to keep, and what should be discarded or given away. Moving to the cloud is a similarly great opportunity to do the same when it comes to our application.&lt;/p&gt;
&lt;p&gt;While cloud storage is inexpensive nowadays, there may be some things that don&amp;rsquo;t make sense to store any longer, or at least not keep stored with our primary application. If data cannot be discarded due to policy or regulations, we may choose a different storage class to house data that we don&amp;rsquo;t expect to need anytime soon outside of our main application.&lt;/p&gt;
&lt;p&gt;In the case of &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon&amp;rsquo;s Simple Storage Service&lt;/a&gt; (S3), we can choose to use different &lt;a href=&#34;https://aws.amazon.com/s3/storage-classes/&#34;&gt;storage classes&lt;/a&gt; that accomplish this goal. While the data that our business relies on every day can take advantage of the Standard class 99.99% availability, data meant for long-term cold storage such as archival backups can be put into the Glacier class, which has longer retrieval time and lower cost.&lt;/p&gt;
&lt;h2 id=&#34;the-right-type-and-size&#34;&gt;The right type and size&lt;/h2&gt;
&lt;p&gt;Choosing the type and size of cloud infrastructure appropriate for our business is usually the part that can be the most confusing. How should we predict, in a new environment or for a growing company, the computing power we&amp;rsquo;ll need?&lt;/p&gt;
&lt;p&gt;Part of the beauty of not procuring hardware on our own is that won&amp;rsquo;t have to make predictions like these. Using cloud storage and instances, expanding or scaling back resources can be done in a matter of minutes, sometimes seconds. With managed services, it can even be done automatically for us. With the proper support for scalability in our application, it&amp;rsquo;s like having a magical house that instantly generates any type of room and amenity we need at that moment. The ability to continually ensure that we&amp;rsquo;re using appropriate, cost-effective resources is at our fingertips, and often clearly visualized in charts and dashboards.&lt;/p&gt;
&lt;p&gt;For applications new to the cloud, some leeway for experimentation may be necessary. While cloud services enables us to quickly spin up and try out different architectures, there&amp;rsquo;s no guarantee that all of those set ups will work well for our application. For example, running a single instance may be &lt;a href=&#34;http://einaregilsson.com/serverless-15-percent-slower-and-eight-times-more-expensive/&#34;&gt;less expensive than going serverless&lt;/a&gt;, but we&amp;rsquo;d be hard pressed to know this until we tried it out.&lt;/p&gt;
&lt;p&gt;As a starting point, we simply need enough storage and computing power to support the application as it is currently running, today. For example, in the case of storage, consider the size of the current database - the actual database data, not the total storage capacity of hardware on-premises. For a detailed cost exploration, AWS even offers a &lt;a href=&#34;https://calculator.s3.amazonaws.com/index.html&#34;&gt;Simple Monthly Calculator&lt;/a&gt; with use case samples to help guide expectations.&lt;/p&gt;
&lt;h2 id=&#34;do-test-runs-before-the-big-day&#34;&gt;Do test runs before the big day&lt;/h2&gt;
&lt;p&gt;Running a trial cloud migration may be an odd concept, but it is an essential component to ensuring that the move goes as planned with minimal service interruption. Imagine the time and energy that would be saved in the moving house example if we could automate test runs! Invariably, some box or still-hung picture is forgotten and left out of the main truck, necessitating additional trips in other vehicles. With multiple chances to ensure we&amp;rsquo;ve got it down pat, we minimize the possibility that our move causes any break in normal day-to-day business.&lt;/p&gt;
&lt;p&gt;Generally, to do a test run, we create a duplicate version of our application. The more we can duplicate, the more thorough the test run will be, especially if our data is especially large. Though duplication may seem tedious, working with the actual components we intend to migrate is essential to ensuring the migration goes as planned. After all, if we only did a moving-house test run with one box, it wouldn&amp;rsquo;t be very representative.&lt;/p&gt;
&lt;p&gt;Test runs can help to validate our migration plan against any challenges we may encounter. These challenges might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downtime restrictions;&lt;/li&gt;
&lt;li&gt;Encrypting data in transit and immediately when at rest on the target;&lt;/li&gt;
&lt;li&gt;Schema conversion to a new target schema (the &lt;a href=&#34;https://aws.amazon.com/dms/schema-conversion-tool/&#34;&gt;AWS Schema Conversion Tool&lt;/a&gt; can also help);&lt;/li&gt;
&lt;li&gt;Access to databases, such as through firewalls or VPNs;&lt;/li&gt;
&lt;li&gt;Developing a process to ensure that all the data successfully migrated, such as by using a hash function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test runs also help to give us a more accurate picture of the overall time that a migration will take, as well as affording us the opportunity to fine-tune it. Factors that may affect the overall speed of a migration include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sizes of the source and target instances;&lt;/li&gt;
&lt;li&gt;Available bandwidth for moving data;&lt;/li&gt;
&lt;li&gt;Schema configurations; and&lt;/li&gt;
&lt;li&gt;Transaction pressure on the source, such as changes to the data and the volume of incoming transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the duplicate application has been migrated via one or more &lt;a href=&#34;https://aws.amazon.com/cloud-data-migration/&#34;&gt;options&lt;/a&gt;, we test the heck out of the application that&amp;rsquo;s now running in the cloud to ensure it performs as expected. Ideally, on the big day, we&amp;rsquo;d follow this same general process to move up-to-date duplicate data, and then seamlessly point the &amp;ldquo;real&amp;rdquo; application or web address to the new location in the cloud. This means that our customers experience near-zero downtime; essentially, only the amount of time that the change in location-pointing would need to propagate to their device.&lt;/p&gt;
&lt;p&gt;In the case of very large or complex applications with many components or many teams working together at the same time, a more gradual approach may be more appropriate than the &amp;ldquo;Big Bang&amp;rdquo; approach, and may help to mitigate risk of any interruptions. This means migrating in stages, component by component, and running tests between stages to ensure that all parts of the application are communicating with each other as expected.&lt;/p&gt;
&lt;h2 id=&#34;preparation-is-essential-to-a-smooth-migration&#34;&gt;Preparation is essential to a smooth migration&lt;/h2&gt;
&lt;p&gt;I hope this article has enabled a more practical understanding of how cloud migration can be achieved. With thorough preparation, it&amp;rsquo;s possible to take advantage of all the cloud has to offer, with minimal hassle to get there.&lt;/p&gt;
&lt;p&gt;My thanks to the AWS Solutions Architects who presented at Pop-Up Loft and shared their knowledge on these topics, in particular: Chandra Kapireddy, Stephen Moon, John Franklin, Michael Alpaugh, and Priyanka Mahankali.&lt;/p&gt;
&lt;p&gt;One last nugget of wisdom, courtesy of John: &amp;ldquo;Friends don&amp;rsquo;t let friends use DMS to create schema objects.&amp;rdquo;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/cover_hu9516d7166362a6834fd7ca185e602fb0_827135_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How users and applications stay safe on the Internet: it&#39;s proxy servers all the way down</title><link>https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</link><pubDate>Mon, 16 Sep 2019 09:35:28 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</guid><description>An overview of how proxy servers form the basis of online anonymity, and how their use in various forms helps both users and web applications.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/cover_hua9810ca0d5d352b6afac9eae7c2c33fc_779068_640x0_resize_box_2.png" width="640" height="480"/>
&lt;p&gt;Both Internet users and Internet-connected applications can benefit from investing in cybersecurity. One core aspect of online privacy is the use of a proxy server, though this basic building block may not be initially visible underneath its more recognizable forms. Proxy servers are a useful thing to know about nowadays, for developers, software product owners, as well as the average dog on the Internet. Let&amp;rsquo;s explore what makes proxy servers an important piece of cybersecurity support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;On the Internet, nobody knows you&amp;rsquo;re a dog.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When &lt;a href=&#34;https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog&#34;&gt;Peter Steiner&amp;rsquo;s caption&lt;/a&gt; was first published in The New Yorker in 1993, it reportedly went largely unnoticed. Only later did the ominous and slightly frightening allusion to online anonymity touch the public consciousness with the icy fingers of the unknown. As Internet usage became more popular, users became concerned that other people could represent themselves online in any manner they chose, without anyone else knowing who they truly were.&lt;/p&gt;
&lt;p&gt;This, to make a gross understatement, is no longer the case. Thanks to &lt;a href=&#34;https://support.mozilla.org/en-US/kb/enable-and-disable-cookies-website-preferences&#34;&gt;tracking cookies&lt;/a&gt;, &lt;a href=&#34;https://robertheaton.com/2017/10/17/we-see-you-democratizing-de-anonymization/&#34;&gt;browser fingerprinting&lt;/a&gt;, &lt;a href=&#34;https://www.privacypolicies.com/blog/isp-tracking-you/&#34;&gt;Internet Service Providers (ISPs) selling our browsing logs to advertisers&lt;/a&gt;, and our own inexplicable inclination to put our names and faces on social networks, online anonymity is out like last year&amp;rsquo;s LaCroix flavours. While your next-door neighbor may not know how to find you online (well, except for through that location-based secondhand marketplace app you&amp;rsquo;re using), you can be certain that at least one large advertising company has a series of zeroes and ones somewhere that represent you, the specific details of your market demographic, and all your online habits, including your preferred flavour of LaCroix.&lt;/p&gt;
&lt;p&gt;There are ways to add &lt;em&gt;some&lt;/em&gt; layers of obscurity, like using a corporate firewall that hides your IP, or &lt;a href=&#34;https://www.torproject.org/&#34;&gt;using Tor&lt;/a&gt;. The underlying mechanism of both these methods is the same. Like being enshrouded in the layers of an onion, we&amp;rsquo;re using one or more &lt;a href=&#34;https://en.wikipedia.org/wiki/Proxy_server&#34;&gt;proxy servers&lt;/a&gt; to shield our slightly sulfuric selves from third-party tracking.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-proxy-server-anyway&#34;&gt;What&amp;rsquo;s a proxy server, anyway?&lt;/h2&gt;
&lt;p&gt;A proxy, in the traditional English definition, is the &amp;ldquo;authority or power to act for another.&amp;rdquo; (&lt;a href=&#34;https://www.merriam-webster.com/dictionary/proxy&#34;&gt;Merriam-Webster&lt;/a&gt;) A proxy server, in the computing context, is a server that acts on behalf of another server, or a user&amp;rsquo;s machine.&lt;/p&gt;
&lt;p&gt;By using a proxy to browse the Internet, for example, a user can defer being personally identifiable. All of the user&amp;rsquo;s Internet traffic appears to come from the proxy server instead of their machine.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-are-for-users&#34;&gt;Proxy servers are for users&lt;/h2&gt;
&lt;p&gt;There are a few ways that we, as the client, can use a proxy server to conceal our identity when we go online. It&amp;rsquo;s important to know that these methods offer differing levels of anonymity, and that no single method will really provide &lt;em&gt;true&lt;/em&gt; anonymity; if others are actively seeking to find you on the Internet, for whatever reason, further steps should be taken to make your activity truly difficult to identify. (Those steps are beyond the scope of this article, but you can get started with the &lt;a href=&#34;https://ssd.eff.org/&#34;&gt;Electronic Frontier Foundation&amp;rsquo;s (EFF) Surveillance Self-Defense&lt;/a&gt; resource.) For the average user, however, here is a small menu of options ranging from least to most anonymous.&lt;/p&gt;
&lt;h3 id=&#34;use-a-proxy-in-your-web-browser&#34;&gt;Use a proxy in your web browser&lt;/h3&gt;
&lt;p&gt;Certain web browsers, including Firefox and Safari on Mac, allow us to configure them to send our Internet traffic through a proxy server. The proxy server attempts to &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymizer&#34;&gt;anonymize&lt;/a&gt; our requests by replacing our originating IP address with the proxy server&amp;rsquo;s own IP. This provides us with some anonymity, as the website we&amp;rsquo;re trying to reach will not see our originating IP address; however, the proxy server that we choose to use will know exactly who originated the request. This method also doesn&amp;rsquo;t necessarily encrypt traffic, block cookies, or stop social media and cross-site trackers from following us around; on the upside, it&amp;rsquo;s the method least likely to prevent websites that use cookies from functioning properly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;browser-proxy.png&#34; alt=&#34;A cartoon of a proxy server guarding a browser&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Public proxy servers are out there, and deciding whether or not we should use any one of them is on par with deciding whether we should eat a piece of candy handed to us by a smiling stranger. If your academic institution or company provides a proxy server address, it is (hopefully) a private server with some security in place. My preferred method, if we have a little time and a few monthly dollars to invest in our security, is to set up our own virtual instance with a company such as &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon Web Services&lt;/a&gt; or &lt;a href=&#34;https://www.digitalocean.com/products/droplets/&#34;&gt;Digital Ocean&lt;/a&gt; and use this as our proxy server.&lt;/p&gt;
&lt;p&gt;To use a proxy through our browser, we can &lt;a href=&#34;https://support.mozilla.org/en-US/kb/connection-settings-firefox&#34;&gt;edit our Connection Settings in Firefox&lt;/a&gt;, or &lt;a href=&#34;https://support.apple.com/guide/safari/set-up-a-proxy-server-ibrw1053/mac&#34;&gt;set up a proxy server using Safari on Mac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In regards to choosing a browser, I would happily recommend &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; to any Internet user who wants to beef up the security of their browsing experience right out of the box. Mozilla has been a champion of privacy-first since I&amp;rsquo;ve heard of them, and recently made some well-received changes to &lt;a href=&#34;https://blog.mozilla.org/blog/2019/06/04/firefox-now-available-with-enhanced-tracking-protection-by-default/&#34;&gt;Enhanced Tracking Protection in Firefox Browser&lt;/a&gt; that blocks social media trackers, cross-site tracking cookies, fingerprinters, and cryptominers by default.&lt;/p&gt;
&lt;h3 id=&#34;use-a-vpn-on-your-device&#34;&gt;Use a VPN on your device&lt;/h3&gt;
&lt;p&gt;In order to take advantage of a proxy server for all our Internet usage instead of just through one browser, we can use a Virtual Private Network (VPN). A VPN is a service, usually paid, that sends our Internet traffic through their servers, thus acting as a proxy. A VPN can be used on our laptop as well as phone and tablet devices, and since it encompasses all our Internet traffic, it doesn&amp;rsquo;t require much extra effort to use other than ensuring our device is connected. Using a VPN is an effective way to keep nosy ISPs from snooping on our requests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;vpn.png&#34; alt=&#34;A cartoon depicting a private VPN&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To use a paid, third-party VPN service, we&amp;rsquo;d usually sign up on their website and download their app. It&amp;rsquo;s important to keep in mind that whichever provider we choose, we&amp;rsquo;re entrusting them with our data. VPN providers anonymize our activity from the Internet, but can themselves see all our requests. Providers vary in terms of their privacy policies and the data they choose to log, so a little research may be necessary to determine which, if any, we are comfortable trusting.&lt;/p&gt;
&lt;p&gt;We can also roll our own VPN service by using a virtual instance and &lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt;. OpenVPN is an open source VPN protocol, and can be used with a few virtual instance providers, such as &lt;a href=&#34;https://openvpn.net/amazon-cloud/&#34;&gt;Amazon VPC&lt;/a&gt;, &lt;a href=&#34;https://openvpn.net/microsoft-azure/&#34;&gt;Microsoft Azure&lt;/a&gt;, &lt;a href=&#34;https://openvpn.net/google-cloud-vpn/&#34;&gt;Google Cloud&lt;/a&gt;, and &lt;a href=&#34;https://openvpn.net/digital-ocean-vpn/&#34;&gt;Digital Ocean Droplets&lt;/a&gt;. I previously wrote a tutorial on &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/&#34;&gt;setting up your own personal VPN service with AWS&lt;/a&gt; using an EC2 instance. I&amp;rsquo;ve been running this solution personally for about a month, and it&amp;rsquo;s cost me almost $4 USD in total, which is a price I&amp;rsquo;m quite comfortable paying for some peace of mind.&lt;/p&gt;
&lt;h3 id=&#34;use-tor&#34;&gt;Use Tor&lt;/h3&gt;
&lt;p&gt;Tor takes the anonymity offered by a proxy server and compounds it by forwarding our requests through a &lt;a href=&#34;https://en.wikipedia.org/wiki/Relay_network&#34;&gt;relay network&lt;/a&gt; of other servers, each called a &amp;ldquo;node.&amp;rdquo; Our traffic passes through three nodes on its way to a destination: the &lt;em&gt;guard&lt;/em&gt;, &lt;em&gt;middle&lt;/em&gt;, and &lt;em&gt;exit&lt;/em&gt; nodes. At each step, the request is encrypted and anonymized such that the current node only knows where to send it, and nothing more about what the request contains. This separation of knowledge means that, of the options discussed, Tor provides the most complete version of anonymity. (For a more complete explanation, see &lt;a href=&#34;https://robertheaton.com/2019/04/06/how-does-tor-work/&#34;&gt;Robert Heaton&amp;rsquo;s article on how Tor works&lt;/a&gt;, which is so excellently done that I wish I&amp;rsquo;d written it myself.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tor.png&#34; alt=&#34;Tor onion holding a Free Hugs sign&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That said, this level of anonymity comes with its own cost. Not monetary, as &lt;a href=&#34;https://www.torproject.org/download/&#34;&gt;Tor Browser&lt;/a&gt; is free to download and use. It is, however, slower than using a VPN or simple proxy server through a browser, due to the circuitous route our requests take.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-are-for-servers-too&#34;&gt;Proxy servers are for servers too&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re now familiar with proxy servers in the context of protecting users as they surf the web, but proxies aren&amp;rsquo;t just for clients. Websites and Internet-connected applications can use &lt;a href=&#34;https://en.wikipedia.org/wiki/Reverse_proxy&#34;&gt;reverse proxy servers&lt;/a&gt; for obfuscation too. The &amp;ldquo;reverse&amp;rdquo; part just means that the proxy is acting on behalf of the server, instead of the client.&lt;/p&gt;
&lt;p&gt;Why would a web server care about anonymity? Generally, they don&amp;rsquo;t, at least not in the same way some users do. Web servers can benefit from using a proxy for a few different reasons; for example, they typically offer faster service to users by &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_cache&#34;&gt;caching&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_compression&#34;&gt;compressing&lt;/a&gt; content to optimize delivery. From a cybersecurity perspective, however, a reverse proxy can improve an application&amp;rsquo;s security posture by obfuscating the underlying infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;syllables.png&#34; alt=&#34;A cartoon making fun of the big words I used&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Basically, by placing another web server (the &amp;ldquo;proxy&amp;rdquo;) in front of the web server that directly accesses all the files and assets, we make it more difficult for an attacker to pinpoint our &amp;ldquo;real&amp;rdquo; web server and mess with our stuff. Like when you want to see the store manager and the clerk you&amp;rsquo;re talking to says, &amp;ldquo;I speak for the manager,&amp;rdquo; and you&amp;rsquo;re not really sure there even &lt;em&gt;is&lt;/em&gt; a manager, anyway, but you successfully exchange the hot pink My Little Pony they sold you for a &lt;em&gt;fuchsia&lt;/em&gt; one, thankyouverymuch, so now you&amp;rsquo;re no longer concerned with who the manager is and whether or not they really exist, and if you passed them on the street you would not be able to stop them and call them out for passing off hot pink as fuchsia, and the manager is just fine with that.&lt;/p&gt;
&lt;p&gt;Some common web servers can also act as reverse proxies, often with just a minimal and straightforward configuration change. While the best choice for your particular architecture is unknown to me, I will offer a couple common examples here.&lt;/p&gt;
&lt;h3 id=&#34;using-nginx-as-a-reverse-proxy&#34;&gt;Using NGINX as a reverse proxy&lt;/h3&gt;
&lt;p&gt;NGINX uses the &lt;code&gt;proxy_pass&lt;/code&gt; directive in its &lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/&#34;&gt;configuration file&lt;/a&gt; (&lt;code&gt;nginx.conf&lt;/code&gt; by default) to turn itself into a reverse proxy server. The set up requires the following lines to be placed in the configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location /requested/path/ {
proxy_pass http://www.example.com/target/path/;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that all requests for the path &lt;code&gt;/requested/path/&lt;/code&gt; are forwarded to &lt;code&gt;http://www.example.com/target/path/&lt;/code&gt;. The target can be a domain name or an IP address, the latter with or without a port.&lt;/p&gt;
&lt;p&gt;The full &lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/&#34;&gt;guide to using NGINX as a reverse proxy&lt;/a&gt; is part of the NGINX documentation.&lt;/p&gt;
&lt;h3 id=&#34;using-apache-httpd-as-a-reverse-proxy&#34;&gt;Using Apache httpd as a reverse proxy&lt;/h3&gt;
&lt;p&gt;Apache httpd similarly requires some straightforward configuration to act as a reverse proxy server. In the &lt;a href=&#34;https://httpd.apache.org/docs/current/configuring.html&#34;&gt;configuration file&lt;/a&gt;, usually &lt;code&gt;httpd.conf&lt;/code&gt;, set the following directives:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProxyPass &amp;quot;/requested/path/&amp;quot; &amp;quot;http://www.example.com/target/path/&amp;quot;
ProxyPassReverse &amp;quot;/requested/path/&amp;quot; &amp;quot;http://www.example.com/target/path/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ProxyPass&lt;/code&gt; directive ensures that all requests for the path &lt;code&gt;/requested/path/&lt;/code&gt; are forwarded to &lt;code&gt;http://www.example.com/target/path/&lt;/code&gt;. The &lt;code&gt;ProxyPassReverse&lt;/code&gt; directive ensures that the headers sent by the web server are modified to point to the reverse proxy server instead.&lt;/p&gt;
&lt;p&gt;The full &lt;a href=&#34;https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html&#34;&gt;reverse proxy guide for Apache HTTP server&lt;/a&gt; is available in their documentation.&lt;/p&gt;
&lt;h2 id=&#34;proxy-servers-most-of-the-way-down&#34;&gt;Proxy servers &lt;em&gt;most of&lt;/em&gt; the way down&lt;/h2&gt;
&lt;p&gt;I concede that my title is a little facetious, as cybersecurity best practices aren&amp;rsquo;t really some eternal infinite-regression mystery (though they may sometimes seem to be). Regardless, I hope this post has helped in your understanding of what proxy servers are, how they contribute to online anonymity for both clients and servers, and that they are an integral building block of cybersecurity practices.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more about personal best practices for online security, I highly recommend exploring the articles and resources provided by &lt;a href=&#34;https://www.eff.org/&#34;&gt;EFF&lt;/a&gt;. For a guide to securing web sites and applications, the &lt;a href=&#34;https://github.com/OWASP/CheatSheetSeries&#34;&gt;OWASP Cheat Sheet Series&lt;/a&gt; is a fantastic resource.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/cover_hua9810ca0d5d352b6afac9eae7c2c33fc_779068_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hackers are Googling your plain text passwords: preventing sensitive data exposure</title><link>https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</link><pubDate>Mon, 09 Sep 2019 09:10:11 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</guid><description>Why sensitive data controls need to be established long before you think you need them, as demonstrated by Google dorking.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" width="640" height="454"/>
&lt;p&gt;Last week, I wrote about &lt;a href=&#34;https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/&#34;&gt;the importance of properly handling user input&lt;/a&gt; in our websites and applications. I alluded to an overarching security lesson that I hope to make explicit today: the security of our software, application, and customer data is built from the ground up, long before the product goes live.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&#34;&gt;OWASP Top 10&lt;/a&gt; is a comprehensive guide to web application security risks. It is relied upon by technology professionals, corporations, and those interested in cybersecurity or information security. The most recent publication lists Sensitive Data Exposure as the third most critical web application security risk. Here&amp;rsquo;s how the risk is described:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;Sensitive Data Exposure&amp;rdquo; is a sort of catch-all category for leaked data resulting from many sources, ranging from weak cryptographic algorithms to unenforced encryption. The simplest source of this security risk, however, takes far fewer syllables to describe: people.&lt;/p&gt;
&lt;p&gt;The phrase &amp;ldquo;an ounce of prevention is worth a pound of cure,&amp;rdquo; applies to medicine as well as secure software development. In the world of the latter, this is referred to as &amp;ldquo;pushing left,&amp;rdquo; a rather unintuitive term for establishing security best practices earlier, rather than later, in the software development life cycle (SDLC). Establishing procedures &amp;ldquo;to the left&amp;rdquo; of the SDLC can help ensure that the people involved in creating a software product are properly taking care of sensitive data from day one.&lt;/p&gt;
&lt;p&gt;Unfortunately, a good amount of security testing often seems to occur much farther to the right side of the SDLC; too late for some security issues, such as sensitive data leakage, to be prevented.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m one of the authors contributing to the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt; and recently expanded a section on search engine discovery reconnaissance, or what the kids these days call &amp;ldquo;Google dorking.&amp;rdquo; This is one method, and arguably the most accessible method, by which a security tester (or black hat hacker) could find exposed sensitive data on the Internet. Here&amp;rsquo;s an excerpt from that section (currently a work in progress on GitHub, to be released in v5):&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;search-operators&#34;&gt;Search Operators&lt;/h3&gt;
&lt;p&gt;A search operator is a special keyword that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of &lt;code&gt;operator:query&lt;/code&gt;. Here are some commonly supported search operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:&lt;/code&gt; will limit the search to the provided URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inurl:&lt;/code&gt; will only return results that include the keyword in the URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intitle:&lt;/code&gt; will only return results that have the keyword in the page title.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intext:&lt;/code&gt; or &lt;code&gt;inbody:&lt;/code&gt; will only search for the keyword in the body of pages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filetype:&lt;/code&gt; will match only a specific filetype, i.e. png, or php.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;site:owasp.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;google-hacking-or-dorking&#34;&gt;Google Hacking, or Dorking&lt;/h3&gt;
&lt;p&gt;Searching with operators can be a very effective discovery reconnaissance technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_hacking&#34;&gt;Google hacking&lt;/a&gt; or Google dorking, is also possible using other search engines, as long as the search operators are supported.&lt;/p&gt;
&lt;p&gt;A database of dorks, such as &lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;Google Hacking Database&lt;/a&gt;, is a useful resource that can help uncover specific information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regularly reviewing search engine results can be a fruitful task for security testers. However, when a search for &lt;code&gt;site:myapp.com passwords&lt;/code&gt; turns up no results, it may still be a little too early to break for lunch. Here are a couple other places a security tester might like to look for sensitive data exposed in the wild.&lt;/p&gt;
&lt;h2 id=&#34;pastebin&#34;&gt;Pastebin&lt;/h2&gt;
&lt;p&gt;The self-declared &amp;ldquo;#1 paste tool since 2002,&amp;rdquo; &lt;a href=&#34;https://pastebin.com&#34;&gt;Pastebin&lt;/a&gt; allows users to temporarily store any kind of text. It&amp;rsquo;s mostly used for sharing information with others, or retrieving your own &amp;ldquo;paste&amp;rdquo; on another machine, perhaps in another location. Pastebin makes it easy to share large amounts of complicated text, like error logs, source code, configuration files, tokens, api keys&amp;hellip; what&amp;rsquo;s that? Oh, yes, it&amp;rsquo;s public by default.&lt;/p&gt;
&lt;p&gt;Here are some screenshots of a little dorking I did for a public bug bounty program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_apikey.png#screenshot&#34; alt=&#34;A screenshot of exposed api key in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;API keys in plain view.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pastebin_pass.png#screenshot&#34; alt=&#34;A screenshot of exposed username and password in Google search&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Log-in details out in the open.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Thanks in part to the convenience of using Pastebin and similar websites, it would appear that some people fail to think twice before making sensitive data publicly available.&lt;/p&gt;
&lt;h3 id=&#34;but-why&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Granted, non-technical employees with access to the application may not have an understanding of which items should or should not be freely shared. Someone unfamiliar with what encrypted data is or what it looks like may not realize the difference between an encrypted string and an unencrypted token made up of many random letters and numbers. Even technical staff can miss things, make mistakes, or act carelessly after a hard day at work. It may be easy to call this a training problem and move on; however, none of these rationalizations address the root cause of the issue.&lt;/p&gt;
&lt;p&gt;When people turn to outside solutions for an issue they face, it&amp;rsquo;s usually because they haven&amp;rsquo;t been provided with an equally-appealing internal solution, or are unaware that one exists. Employees using pastes to share or move sensitive data do so because they don&amp;rsquo;t have an easier, more convenient, and secure internal solution to use instead.&lt;/p&gt;
&lt;h3 id=&#34;mitigation&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Everyone involved in the creation and maintenance of a web application should be briefed on a few basic things in regards to sensitive data protection:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what constitutes sensitive data,&lt;/li&gt;
&lt;li&gt;the difference between plain text and encrypted data, and&lt;/li&gt;
&lt;li&gt;how to properly transmit and store sensitive data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When it comes to third-party services, ensure people are aware that some transmission may not be encrypted, or may be publicly searchable. If there is no system currently in place for safely sharing and storing sensitive data internally, this is a good place to start. The security of application data is in the hands of everyone on the team, from administrative staff to C-level executives. Ensure people have the tools they need to work securely.&lt;/p&gt;
&lt;h2 id=&#34;public-repositories&#34;&gt;Public repositories&lt;/h2&gt;
&lt;p&gt;Developers are notorious for leaving sensitive information hanging out where it doesn&amp;rsquo;t belong (yes, I&amp;rsquo;ve done it too!). Without a strong push-left approach in place for handling tokens, secrets, and keys, these little gems can end up in full public view on sites like GitHub, GitLab, and Bitbucket (to name a few). &lt;a href=&#34;https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf&#34;&gt;A 2019 study&lt;/a&gt; found that thousands of new, unique secrets are leaked every day on GitHub alone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github_tok.png#screenshot&#34; alt=&#34;A screenshot of a Google search for tokens on GitHub&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub has implemented measures like &lt;a href=&#34;https://github.blog/2018-10-17-behind-the-scenes-of-github-token-scanning/&#34;&gt;token scanning&lt;/a&gt;, and GitLab 11.9 &lt;a href=&#34;https://about.gitlab.com/2019/03/22/gitlab-11-9-released/&#34;&gt;introduced secret detection&lt;/a&gt;. While these tools aim to reduce the chances that a secret might accidentally be committed, to put it bluntly, it&amp;rsquo;s really not their job. Secret scanning won&amp;rsquo;t stop developers from committing the data in the first place.&lt;/p&gt;
&lt;h3 id=&#34;but-why-1&#34;&gt;But why?&lt;/h3&gt;
&lt;p&gt;Without an obvious process in place for managing secrets, developers may tend too much towards their innate sense of just-get-it-done-ness. Sometimes this leads to the expedient but irresponsible practice of storing keys as unencrypted variables within the program, perhaps with the intention of it being temporary. Nonetheless, these variables inevitably fall from front of mind and end up in a commit.&lt;/p&gt;
&lt;h3 id=&#34;mitigation-1&#34;&gt;Mitigation&lt;/h3&gt;
&lt;p&gt;Having a strong push-left culture means ensuring that sensitive data is properly stored and can be securely retrieved long before anyone is ready to make a commit. Tools and strategies for doing so are readily available for those who seek them. Here are some examples of tools that can support a push-left approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a management tool to store and control access to keys and secrets, such as &lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;Amazon Key Management Service&lt;/a&gt; or Microsoft&amp;rsquo;s &lt;a href=&#34;https://azure.microsoft.com/en-us/services/key-vault/&#34;&gt;Azure Key Vault&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make use of encrypted environment variables in CI tools, such as &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#environment-variables&#34;&gt;Netlify&amp;rsquo;s environment variables&lt;/a&gt; or &lt;a href=&#34;https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables&#34;&gt;virtual environments in GitHub Actions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Craft a robust &lt;code&gt;.gitignore&lt;/code&gt; file that everyone on the team can contribute to and use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also need not rely entirely on the public repository to catch those mistakes that may still slip through. It&amp;rsquo;s possible to set up Git pre-commit hooks that scan for committed secrets using &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;. There are some open-source programs available for this, such as &lt;a href=&#34;https://github.com/thoughtworks/talisman&#34;&gt;Talisman from ThoughtWorks&lt;/a&gt; and &lt;a href=&#34;https://github.com/awslabs/git-secrets&#34;&gt;git-secrets from AWS Labs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;pushing-left-to-prevent-sensitive-data-exposure&#34;&gt;Pushing left to prevent sensitive data exposure&lt;/h2&gt;
&lt;p&gt;A little perspective can go a long way in demonstrating why it&amp;rsquo;s important to begin managing sensitive data even before any sensitive data exists. By establishing security best practices on the left of the SDLC, we give our people the best chance to increase the odds that any future dorking on our software product looks more like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;no_results.png#screenshot&#34; alt=&#34;No results found in Google Search&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another great resource for checking up on the security of our data is Troy Hunt&amp;rsquo;s &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;Have I Been Pwned&lt;/a&gt;, a service that compares your data (such as your email) to data that has been leaked in previous data breaches.&lt;/p&gt;
&lt;p&gt;To learn about more ways we can be proactive with our application security, the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Proactive_Controls&#34;&gt;OWASP Proactive Controls&lt;/a&gt; publication is a great resource. There&amp;rsquo;s also more about creating a push-left approach to security in the upcoming &lt;a href=&#34;https://github.com/OWASP/OWASP-Testing-Guide-v5&#34;&gt;OWASP Testing Guide&lt;/a&gt;. If these topics interest you, I encourage you to read, learn, and contribute so more people will make it harder for sensitive data to be found.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/cover_hu3d85b89eb9d0f9ebca0ddd94c26060d4_587474_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>SQL injection and XSS: what white hat hackers know about trusting user input</title><link>https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</link><pubDate>Mon, 02 Sep 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</guid><description>A primer on SQL injection and cross site scripting, and how to handle user input in software development.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" width="640" height="374"/>
&lt;p&gt;Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: &lt;em&gt;What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?&lt;/em&gt; Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &amp;ldquo;Urgent&amp;rdquo; column: how will our product be secured?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&amp;rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is &lt;em&gt;you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &amp;ldquo;white hat&amp;rdquo; hacker, and sometimes just &amp;ldquo;hacker,&amp;rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &amp;ldquo;black hat&amp;rdquo; hacker, also called a &amp;ldquo;cracker,&amp;rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&amp;rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.&lt;/p&gt;
&lt;p&gt;When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&amp;rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Main_Page&#34;&gt;Open Web Application Security Project&lt;/a&gt; guides&lt;/li&gt;
&lt;li&gt;The Hacker101 playlist from &lt;a href=&#34;https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/&#34;&gt;HackerOne&amp;rsquo;s YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/web-hacking-101&#34;&gt;Web Hacking 101&lt;/a&gt; by Peter Yaworski&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brutelogic.com.br/blog/&#34;&gt;Brute Logic&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&#34;&gt;Computerphile&lt;/a&gt; YouTube channel&lt;/li&gt;
&lt;li&gt;Videos featuring Jason Haddix (&lt;a href=&#34;https://github.com/jhaddix/&#34;&gt;@jhaddix&lt;/a&gt;) and Tom Hudson (&lt;a href=&#34;https://github.com/tomnomnom/&#34;&gt;@tomnomnom&lt;/a&gt;) (two accomplished ethical hackers with different, but both effective, methodologies)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be familiar with the catchphrase, &amp;ldquo;sanitize your inputs!&amp;rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&amp;rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&amp;rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-attacks&#34;&gt;SQL injection attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great &lt;a href=&#34;https://www.youtube.com/watch?v=_jKylhJtPmI&#34;&gt;explain-like-I&amp;rsquo;m-five video on SQLi&lt;/a&gt;. You may already know of this attack from &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;xkcd&amp;rsquo;s Little Bobby Tables&lt;/a&gt;. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sqli.png#center&#34; alt=&#34;A monitor with an SQL Select command that gets all your base&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;You have no chance to survive make your time.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;You can test your own site to see if you&amp;rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&amp;rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39; OR 1=&#39;1&lt;/code&gt; evaluates to a constant true, and when successful, returns all rows in the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; AND 0=&#39;1&lt;/code&gt; evaluates to a constant false, and when successful, returns no rows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ciNHn38EyRc&#34;&gt;This video demonstrates the above tests&lt;/a&gt;, and does a great job of showing how impactful an SQL injection attack can be.&lt;/p&gt;
&lt;p&gt;Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&amp;rsquo;t trust user input.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-mitigation&#34;&gt;SQL injection mitigation&lt;/h2&gt;
&lt;p&gt;In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.&lt;/p&gt;
&lt;p&gt;Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;Object-Relational Mapping&lt;/a&gt;, or ORM, with its use of &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/queries/&#34;&gt;QuerySets&lt;/a&gt;. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.&lt;/p&gt;
&lt;p&gt;Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepared statements with variable binding (or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&#34;&gt;parameterized queries&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures&#34;&gt;Stored procedures&lt;/a&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation&#34;&gt;Whitelisting&lt;/a&gt; or &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input&#34;&gt;escaping&lt;/a&gt; user input.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.&lt;/p&gt;
&lt;p&gt;The battle, however, is only half won&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;cross-site-scripting-xss-attacks&#34;&gt;Cross Site Scripting (XSS) attacks&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&amp;rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;Cross Site Scripting&lt;/a&gt; attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&amp;rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing. &lt;a href=&#34;https://blogs.apache.org/infra/entry/apache_org_04_09_2010&#34;&gt;This incident report from Apache in 2010&lt;/a&gt; is a good example of how XSS can be chained in a larger attack to take over accounts and machines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;xss.png&#34; alt=&#34;An HTML dance party with a little JS cutting in&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;The annual DOM dance-off receives an unexpected guest);&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34;&gt;Document Object Model&lt;/a&gt;) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.&lt;/p&gt;
&lt;h3 id=&#34;dom-based-xss&#34;&gt;DOM based XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/DOM_Based_XSS&#34;&gt;DOM based XSS&lt;/a&gt; occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in &lt;a href=&#34;https://www.owasp.org/index.php/Phishing&#34;&gt;phishing emails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called &lt;code&gt;xss-test.html&lt;/code&gt; (or whatever you like) with the following HTML and JavaScript code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My XSS Example&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello there!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;greeting&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This web page will display the title &amp;ldquo;Hello there!&amp;rdquo; unless it receives a &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_string&#34;&gt;URL parameter from a query string&lt;/a&gt; with a value for &lt;code&gt;name&lt;/code&gt;. To see the script work, open the page in a browser with an appended URL parameter, like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file:///path/to/file/xss-test.html?name=Victoria&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for &lt;code&gt;name&lt;/code&gt; and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the &lt;code&gt;name&lt;/code&gt; parameter to, say, &lt;code&gt;&amp;lt;img+src+onerror=alert(&amp;quot;pwned&amp;quot;)&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pwned.png#screenshot&#34; alt=&#34;A screenshot of the XSS page example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is just one example, largely based on one from &lt;a href=&#34;https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/&#34;&gt;Brute&amp;rsquo;s post&lt;/a&gt;, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.&lt;/p&gt;
&lt;h3 id=&#34;stored-and-reflected-xss&#34;&gt;Stored and reflected XSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)&#34;&gt;Stored XSS&lt;/a&gt; occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &amp;ldquo;About Me&amp;rdquo; section. The script, improperly stored on the site&amp;rsquo;s server, would successfully execute at a later time when another user views the attacker&amp;rsquo;s profile.&lt;/p&gt;
&lt;p&gt;One of the most famous examples of this is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Samy_(computer_worm)&#34;&gt;Samy worm&lt;/a&gt; that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&amp;rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)&#34;&gt;Reflected XSS&lt;/a&gt; similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&amp;rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.&lt;/p&gt;
&lt;h2 id=&#34;xss-attack-mitigation&#34;&gt;XSS attack mitigation&lt;/h2&gt;
&lt;p&gt;In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.&lt;/p&gt;
&lt;h3 id=&#34;validating-form-fields&#34;&gt;Validating form fields&lt;/h3&gt;
&lt;p&gt;Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes&#34;&gt;Django&amp;rsquo;s built-in &lt;code&gt;Field&lt;/code&gt; classes&lt;/a&gt;, which provide fields that validate to some commonly used types and also specify sane defaults. Django&amp;rsquo;s &lt;code&gt;EmailField&lt;/code&gt;, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&amp;rsquo;t imitate the common format of an email address, then Django won&amp;rsquo;t consider the field valid and the form will not be submitted.&lt;/p&gt;
&lt;p&gt;If relying on a framework isn&amp;rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_conversion&#34;&gt;type conversion&lt;/a&gt;, for example, ensuring that a number is of type &lt;code&gt;int()&lt;/code&gt;; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully, we needn&amp;rsquo;t start from scratch. Open source resources are available to help, such as the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&#34;&gt;OWASP Validation Regex Repository&lt;/a&gt;, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find &lt;a href=&#34;https://github.com/search?q=validation+library&#34;&gt;plenty of these on GitHub&lt;/a&gt;. Additionally, the &lt;a href=&#34;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&#34;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt; has a couple suggestions for test payloads we can use to test our existing applications.&lt;/p&gt;
&lt;p&gt;While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.&lt;/p&gt;
&lt;h3 id=&#34;avoiding-direct-injection&#34;&gt;Avoiding direct injection&lt;/h3&gt;
&lt;p&gt;Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does data flow through our application?&lt;/li&gt;
&lt;li&gt;What does a user expect to happen when they interact with this input?&lt;/li&gt;
&lt;li&gt;Where on our page does data appear? Does it become embedded in a string or an attribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of &lt;a href=&#34;https://www.hacker101.com/&#34;&gt;Hacker101&lt;/a&gt;. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;test&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;+alert(1)+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;onmouserover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&amp;quot;onmouseover=&amp;quot;alert(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using &lt;code&gt;innerText&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.&lt;/p&gt;
&lt;h2 id=&#34;pay-attention-to-your-inputs&#34;&gt;Pay attention to your inputs&lt;/h2&gt;
&lt;p&gt;Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&amp;rsquo;s like installing deadbolts on all the doors, but leaving a window open!&lt;/p&gt;
&lt;p&gt;By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&amp;rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&amp;rsquo;s flow, follow the data, and pay attention to our inputs.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/cover_huc77b01b4a69883cffc22e79b459adb70_272308_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to set up OpenVPN on AWS EC2 and fix DNS leaks on Ubuntu 18.04 LTS</title><link>https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</link><pubDate>Mon, 26 Aug 2019 09:01:23 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/</guid><description>A guide for setting up your own private VPN service, and understanding and fixing a DNS leak.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/cover_hudf0a9e712aaa7cfff13d04d6bd5de865_250170_640x0_resize_box_2.png" width="640" height="388"/>
&lt;p&gt;While rolling your own Virtual Private Network (VPN) is far more complicated than choosing a VPN provider from someone&amp;rsquo;s &amp;ldquo;best VPN 2019&amp;rdquo; list, the more I learn about why someone should use a VPN at all, the less appealing the latter option becomes. Besides the dangers of trusting a fake VPN app or falling victim to a lookalike URL, even &lt;em&gt;legit&lt;/em&gt; VPN service providers have pressures and motivations that may not be aligned with the privacy you hope to be purchasing.&lt;/p&gt;
&lt;p&gt;Usually, the point of using a VPN is to gain a layer of privacy by disguising your location. If you aren&amp;rsquo;t currently using one, you can see what the Internet knows about where you are at &lt;a href=&#34;https://dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;. You&amp;rsquo;ll see a big hello, your IP address, and your location. If that&amp;rsquo;s a little unsettling, know that a VPN can help to shield your location and online activities from wandering eyes and opportunistic advertisers. The former might be a too-curious or even malicious public-WiFi-cafe-goer, but the latter, counterintuitively, might be your own household Internet Service Provider (ISP).&lt;/p&gt;
&lt;p&gt;Using a VPN means that the Internet can&amp;rsquo;t easily see your location, and your ISP can&amp;rsquo;t see your unencrypted web traffic (and neither can your curious coffee shop neighbor). Your ISP &lt;em&gt;can&lt;/em&gt; see the amount of data you&amp;rsquo;re sending, in its encrypted form, and that you&amp;rsquo;re sending it to your VPN server - but that&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;Unless you have a &lt;a href=&#34;https://dnsleaktest.com/what-is-a-dns-leak.html&#34;&gt;DNS leak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are still using your ISP&amp;rsquo;s DNS server, they are still able to see all the URLs the server is resolving for you. So they&amp;rsquo;ll know you asked for &lt;code&gt;lastminutebackwax.com&lt;/code&gt;, although they won&amp;rsquo;t be able to decrypt the data that was exchanged with the site. (Is it just me, or does that seem even worse, somehow?)&lt;/p&gt;
&lt;p&gt;Setting up your own instance and VPN service offers some peace of mind over trusting yet another company to do right with your data. Note that a VPN will &lt;em&gt;not&lt;/em&gt; give you complete online anonymity; there are many other ways your Internet presence can be tracked and your location discovered. However, if properly set up, without DNS leaks, you&amp;rsquo;ll have about as much Internet privacy as can be afforded without using &lt;a href=&#34;https://en.wikipedia.org/wiki/Tor_(anonymity_network)&#34;&gt;Tor&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-our-vpn&#34;&gt;Setting up our VPN&lt;/h1&gt;
&lt;p&gt;This post will cover how to set up the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE/&#34;&gt;OpenVPN Access Server&lt;/a&gt; product on AWS Marketplace, running on an &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2 instance&lt;/a&gt;. Then, we&amp;rsquo;ll look at how to fix a &lt;a href=&#34;https://gitlab.gnome.org/GNOME/NetworkManager-openvpn/issues/10&#34;&gt;known NetworkManager bug in Ubuntu 18.04 that might cause DNS leaks&lt;/a&gt;. The whole process should take about fifteen minutes, so grab a ☕ and let&amp;rsquo;s do some adulting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: IDs and IP addresses shown for demonstration in this tutorial are invalid.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-launch-the-openvpn-access-server-on-aws-marketplace&#34;&gt;1. Launch the OpenVPN Access Server on AWS Marketplace&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt; is available on AWS Marketplace. The Bring Your Own License (BYOL) model doesn&amp;rsquo;t actually require a license for up to two connected devices; to connect more clients, you can get &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile/ref=srh_res_product_vendor?ie=UTF8&amp;amp;id=aac3a8a3-2823-483c-b5aa-60022894b89d&#34;&gt;bundled billing&lt;/a&gt; for five, ten, or twenty-five clients, or &lt;a href=&#34;https://openvpn.net/pricing/&#34;&gt;purchase a minimum of ten OpenVPN licenses a la carte&lt;/a&gt; for $15/device/year. For most of us, the two free connected devices will suffice; and if using an EC2 Micro instance, our set up will be &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS Free Tier eligible&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Start by clicking &amp;ldquo;Continue to Subscribe&amp;rdquo; for the &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00MI40CAE&#34;&gt;OpenVPN Access Server&lt;/a&gt;, which will bring you to a page that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1-subscribe.jpg#screenshot&#34; alt=&#34;Subscription details page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue to Configuration.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2-configure.jpg#screenshot&#34; alt=&#34;Configure this software page for OpenVPN Access Server&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the EC2 instance type in the right side bar (and consequently, the Monthly Estimate) isn&amp;rsquo;t the one we want - that&amp;rsquo;s okay, we can change it soon. Just ensure that the &amp;ldquo;Region&amp;rdquo; chosen is where we want the instance to be located. Generally, the closer it is to the physical location of your client (your laptop, in this case), the faster your VPN will be. Click &amp;ldquo;Continue to Launch.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3-launch.jpg#screenshot&#34; alt=&#34;Launch this software page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On this page, we&amp;rsquo;ll change three things:&lt;/p&gt;
&lt;h3 id=&#34;1-the-ec2-instance-type&#34;&gt;1. The EC2 Instance type&lt;/h3&gt;
&lt;p&gt;Different types of EC2 (Elastic Compute Cloud) instances will offer us different levels of computing power. If you plan to use your instance for something more than just this VPN, you may want to choose something with higher memory or storage capacity, depending on how you plan to use it. We can view each instance offering on the &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/&#34;&gt;Amazon EC2 Instance Types page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For simple VPN use, the &lt;code&gt;t2.nano&lt;/code&gt; or &lt;code&gt;t2.micro&lt;/code&gt; instances are likely sufficient. Only the Micro instance is Free Tier eligible.&lt;/p&gt;
&lt;h3 id=&#34;2-the-security-group-settings&#34;&gt;2. The Security Group settings&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&#34;&gt;Security Group&lt;/a&gt; is a profile, or collection of settings, that Amazon uses to control access to our instance. If you&amp;rsquo;ve set up other AWS products before, you may already have some groups with their own rules defined. We should be careful to understand the reasons for our Security Group settings, as these define how public or private our instance is, and consequently, who has access to it.&lt;/p&gt;
&lt;p&gt;If we click &amp;ldquo;Create New Based on Seller Settings,&amp;rdquo; the OpenVPN server defines some recommended settings for a default Security Group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4-security-group.jpg#screenshot&#34; alt=&#34;Security group settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The default recommended settings are all &lt;code&gt;0.0.0.0/0&lt;/code&gt; for TCP ports 22, 943, 443, and 945, and UDP port 1194. OpenVPN offers an &lt;a href=&#34;https://openvpn.net/vpn-server-resources/amazon-web-services-ec2-byol-appliance-quick-start-guide/#Instance_Launch_Options&#34;&gt;explanation of how the ports are used&lt;/a&gt; on their website. With the default settings, all these ports are left open to support various features of the OpenVPN server. We may wish to restrict access to these ports to a specific IP address or block of addresses (like that of your own ISP) to increase the security of our instance. However, if your IP address frequently changes (like when you travel and connect to a different WiFi network), restricting the ports may not be as helpful as we hope.&lt;/p&gt;
&lt;p&gt;In any case, our instance will require SSH keys to connect to, and the OpenVPN server will be password protected. Unless you have other specific security goals, it&amp;rsquo;s fine to accept the default settings for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give the Security Group a name and brief description, so we know what it&amp;rsquo;s for. Then click &amp;ldquo;Save.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;3-the-key-pair-settings&#34;&gt;3. The Key Pair settings&lt;/h3&gt;
&lt;p&gt;The aforementioned SSH keys are access credentials that we&amp;rsquo;ll use to connect to our instance. We can &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair&#34;&gt;create a key pair&lt;/a&gt; in this section, or you can choose a key pair you may already be using with AWS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5-keys.jpg#screenshot&#34; alt=&#34;Key Pair Settings link&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To create a new set of access credentials, click &amp;ldquo;Create a key pair in EC2&amp;rdquo; to open a new window. Then, click the &amp;ldquo;Create Key Pair&amp;rdquo; blue button. Once you give your key pair a name, it will be created and the private key will automatically download to your machine. It&amp;rsquo;s a file ending with the extension &lt;code&gt;.pem&lt;/code&gt;. Store this key in a secure place on your computer. We&amp;rsquo;ll need to refer to it when we connect to our new EC2 instance.&lt;/p&gt;
&lt;p&gt;We can return to the previous window to select the key pair we just created. If it doesn&amp;rsquo;t show up, hit the little &amp;ldquo;refresh&amp;rdquo; icon next to the drop-down. Once it&amp;rsquo;s selected, hit the shiny yellow &amp;ldquo;Launch&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;We should see a message like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;6-launched.jpg#screenshot&#34; alt=&#34;Launch success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great stuff! Now that our instance exists, let&amp;rsquo;s make sure we can access it and start up our VPN. For a shortcut to the next step, click on the &amp;ldquo;EC2 Console&amp;rdquo; link in the success message.&lt;/p&gt;
&lt;h2 id=&#34;2-associate-an-elastic-ip&#34;&gt;2. Associate an Elastic IP&lt;/h2&gt;
&lt;p&gt;Amazon&amp;rsquo;s &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&#34;&gt;Elastic IP Addresses&lt;/a&gt; provides us with a public IPv4 address controlled by our account, unlike the public IP address tied to our EC2 instance. It&amp;rsquo;s considered a best practice to create one and associate it with our VPN instance. If anything should go wrong with our instance, or if we want to use a new instance for our VPN in the future, the Elastic IP can be disassociated from the current instance and reassociated with our new one. This makes the transition seamless for our connected clients. Think of the Elastic IP like a web domain address that we register - we can point it at whatever we choose.&lt;/p&gt;
&lt;p&gt;We can create a new Elastic IP address on the &lt;a href=&#34;https://console.aws.amazon.com/ec2/&#34;&gt;Amazon EC2 Console&lt;/a&gt;. If you clicked the link from the success message above, we&amp;rsquo;re already there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;7-ec2.jpg#screenshot&#34; alt=&#34;EC2 console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you have more than one instance, take note of the Instance ID of the one we&amp;rsquo;ve just launched.&lt;/p&gt;
&lt;p&gt;In the left sidebar under &amp;ldquo;Network &amp;amp; Security,&amp;rdquo; choose &amp;ldquo;Elastic IPs.&amp;rdquo; Then click the blue &amp;ldquo;Allocate new address&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;8-elasticip.jpg#screenshot&#34; alt=&#34;Allocate new address page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Choose &amp;ldquo;Amazon Pool,&amp;rdquo; then click &amp;ldquo;Allocate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;9-elasticip.jpg#screenshot&#34; alt=&#34;Allocate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! We can click &amp;ldquo;Close&amp;rdquo; to return to the Elastic IP console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;10-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have an Elastic IP, let&amp;rsquo;s associate it with our instance. Select the IP address, then click &amp;ldquo;Actions,&amp;rdquo; and choose &amp;ldquo;Associate address.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;11-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP with instance&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ensure the &amp;ldquo;Instance&amp;rdquo; option is selected, then click the drop-down menu. We should see our EC2 instance ID there. Select it, then click &amp;ldquo;Associate.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;12-associateip.jpg#screenshot&#34; alt=&#34;Associate elastic IP success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Success! Now that we&amp;rsquo;ll be able to access our VPN instance, let&amp;rsquo;s get our VPN service up and running.&lt;/p&gt;
&lt;h2 id=&#34;3-initialize-openvpn-on-the-ec2-server&#34;&gt;3. Initialize OpenVPN on the EC2 server&lt;/h2&gt;
&lt;p&gt;First, we&amp;rsquo;ll need to connect to the EC2 instance via our terminal. We&amp;rsquo;ll use the private key we created earlier.&lt;/p&gt;
&lt;p&gt;Open a new terminal window and navigate to the directory containing the private key &lt;code&gt;.pem&lt;/code&gt; file. We&amp;rsquo;ll need to set its permissions with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo chmod &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; &amp;lt;name&amp;gt;.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to substitute &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; with the name of your key.&lt;/p&gt;
&lt;p&gt;This sets the file permissions to &lt;code&gt;-r--------&lt;/code&gt; so that it can only be read by the user (you). It may help to protect the private key from read and write operations by other users, but more pertinently, will prevent AWS from throwing an error when we try to connect to our instance.&lt;/p&gt;
&lt;p&gt;We can now do just that by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -i &amp;lt;name&amp;gt;.pem openvpnas@&amp;lt;elastic ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user &lt;code&gt;openvpnas&lt;/code&gt; is set up by the OpenVPN Access Server to allow us to connect to our instance. Replace &lt;code&gt;&amp;lt;elastic ip&amp;gt;&lt;/code&gt; with the Elastic IP address we just associated.&lt;/p&gt;
&lt;p&gt;We may get a message saying that the authenticity of our host can&amp;rsquo;t be established. As long as we&amp;rsquo;ve typed the Elastic IP correctly, we can go ahead and answer &amp;ldquo;yes&amp;rdquo; to the prompt.&lt;/p&gt;
&lt;p&gt;Upon the initial connection to the OpenVPN instance, a set up wizard called &amp;ldquo;Initial Configuration Tool&amp;rdquo; should automatically run. (If, for some reason, it doesn&amp;rsquo;t, or you panic-mashed a button, we can restart it with &lt;code&gt;sudo ovpn-init –ec2&lt;/code&gt;.) We&amp;rsquo;ll be asked to accept the agreement, then the wizard will help to walk us through some configuration settings for our VPN server.&lt;/p&gt;
&lt;p&gt;You may generally accept the default settings, however, there are a couple questions you may like to answer knowledgeably. They are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Should client traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; Answering &amp;ldquo;yes&amp;rdquo; to this option can prevent &lt;a href=&#34;https://en.wikipedia.org/wiki/Split_tunneling&#34;&gt;split tunneling&lt;/a&gt;, a situation in which you may bypass the VPN when connected to WiFi networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should client DNS traffic be routed by default through the VPN?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why you might like to answer &amp;ldquo;yes&amp;rdquo;:&lt;/em&gt; This setting can help prevent DNS leaks by specifying that DNS requests should be handled by the VPN. If you answer &amp;ldquo;yes&amp;rdquo; to the previous question, it will be enabled regardless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When asked for our &amp;ldquo;OpenVPN-AS license key&amp;rdquo;, we can leave it blank to use the VPN with up to two clients. If you&amp;rsquo;ve purchased a key, enter it here.&lt;/p&gt;
&lt;p&gt;Once the configuration wizard finishes running, we should see the message &amp;ldquo;Initial Configuration Complete!&amp;rdquo; Before we move on, we should set a password for our server&amp;rsquo;s administration account. To do this, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo passwd openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enter your chosen password twice. Now we&amp;rsquo;re ready to get connected!&lt;/p&gt;
&lt;p&gt;To close the ssh connection, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-connect-the-client-to-the-vpn&#34;&gt;4. Connect the client to the VPN&lt;/h2&gt;
&lt;p&gt;To connect our client (in this case, our laptop) to the VPN and start reaping the benefits, we&amp;rsquo;ll need to do two things; first, obtain our connection profile; second, install the &lt;code&gt;openvpn&lt;/code&gt; daemon.&lt;/p&gt;
&lt;h3 id=&#34;1-get-your-ovpn-connection-profile&#34;&gt;1. Get your &lt;code&gt;.ovpn&lt;/code&gt; connection profile&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll need to download a connection profile for ourselves; this is like a personal configuration file with information, including keys, that the VPN server will need to allow our connection. We can do this by logging in with the password we just set at our Elastic IP address, port 943. This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://&amp;lt;elastic ip&amp;gt;:943/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;https&lt;/code&gt; part is important; without it, the instance won&amp;rsquo;t send any data.&lt;/p&gt;
&lt;p&gt;When we go to this URL, we may see a page warning us that this site&amp;rsquo;s certificate issuer is unknown or invalid. As long as we&amp;rsquo;ve typed our Elastic IP correctly, it&amp;rsquo;s safe to proceed. If you&amp;rsquo;re using Firefox, click &amp;ldquo;Advanced,&amp;rdquo; and then &amp;ldquo;Accept the Risk and Continue.&amp;rdquo; In Chrome, click &amp;ldquo;Advanced,&amp;rdquo; then &amp;ldquo;Proceed to &amp;hellip;&amp;rdquo; the elastic IP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;13-warning.jpg#screenshot&#34; alt=&#34;Security warning page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Log in with the username &lt;code&gt;openvpn&lt;/code&gt; and the password we just set. We&amp;rsquo;ll now be presented with a link to download our user-locked connection profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;14-profile.jpg#screenshot&#34; alt=&#34;Connection profile download page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we click the link, a file named &lt;code&gt;client.ovpn&lt;/code&gt; will download.&lt;/p&gt;
&lt;h3 id=&#34;2-install-and-start-openvpn-on-your-ubuntu-18-04-client&#34;&gt;2. Install and start &lt;code&gt;openvpn&lt;/code&gt; on your Ubuntu 18.04 client&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;openvpn&lt;/code&gt; daemon will allow our client to connect to our VPN server. It can be installed through the default Ubuntu repositories. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for OpenVPN to automatically start when we boot up our computer, we&amp;rsquo;ll need to rename and move the connection profile file. I suggest using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;symlink&lt;/a&gt; to accomplish this, as it leaves our original file more easily accessible for editing, and allows us to store it in any directory we choose. We can create a symlink by running this command in the directory where our file is located:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ln -s client.ovpn /etc/openvpn/&amp;lt;name&amp;gt;.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a symbolic link for the connection profile in the appropriate folder for &lt;code&gt;systemd&lt;/code&gt; to find it. The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be anything. When the Linux kernel has booted, &lt;code&gt;systemd&lt;/code&gt; is used to initialize the services and daemons that the user has set up to run; one of these will now be OpenVPN. Renaming the file with the extension &lt;code&gt;.conf&lt;/code&gt; will let the &lt;code&gt;openvpn&lt;/code&gt; daemon know to use it as our connection file.&lt;/p&gt;
&lt;p&gt;For now, we can manually start and connect to OpenVPN by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo openvpn --config client.ovpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll be asked for a username and password, which will be the same credentials we used before. Once the service finishes starting up, we&amp;rsquo;ll see &amp;ldquo;Initialization Sequence Complete.&amp;rdquo; If we now visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt;, we should see the Elastic IP and the location of our EC2 server. Yay!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re on a later version of Ubuntu, you may check for DNS leaks by clicking on one of the &amp;ldquo;test&amp;rdquo; buttons. If all the ISPs shown are Amazon and none are your own service provider&amp;rsquo;s, congratulations! No leaks! You can move on to &lt;a href=&#34;#3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;Step 3 in the second section&lt;/a&gt; below, after which, you&amp;rsquo;ll be finished.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using Ubuntu 18.04 LTS, however, we&amp;rsquo;re not yet done.&lt;/p&gt;
&lt;h1 id=&#34;what-a-dns-leak-looks-like&#34;&gt;What a DNS leak looks like&lt;/h1&gt;
&lt;p&gt;To see what a DNS leak looks like, click on one of the &amp;ldquo;test&amp;rdquo; buttons on the &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test page&lt;/a&gt;. When we do, we&amp;rsquo;ll see not only our Amazon.com IP addresses, but also our own ISP and location.&lt;/p&gt;
&lt;p&gt;We can also see the leak by running &lt;code&gt;systemd-resolve --status&lt;/code&gt; in our terminal. Our results will contain two lines under different interfaces that both have entries for DNS Servers. It&amp;rsquo;ll look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Link &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tun0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: DNS
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.0.2
DNS Domain: ~.
Link &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;wlp4s0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Current Scopes: none
LLMNR setting: yes
MulticastDNS setting: no
DNSSEC setting: no
DNSSEC supported: no
DNS Servers: &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1
DNS Domain: ~.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://unix.stackexchange.com/questions/434916/how-to-fix-openvpn-dns-leak&#34;&gt;DNS leak problem in Ubuntu 18.04&lt;/a&gt; stems from Ubuntu&amp;rsquo;s DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt;, failing to properly handle our OpenVPN configuration. In order to try and be a good, efficient DNS resolver, &lt;code&gt;systemd-resolved&lt;/code&gt; will send DNS lookup requests in parallel to each interface that has a DNS server configuration, and then utilizes the fastest response. In our case, we only want to use our VPN&amp;rsquo;s DNS servers. Sorry, &lt;code&gt;systemd-resolved&lt;/code&gt;. You tried.&lt;/p&gt;
&lt;h1 id=&#34;how-to-fix-openvpn-dns-leak-on-ubuntu-18-04&#34;&gt;How to fix OpenVPN DNS leak on Ubuntu 18.04&lt;/h1&gt;
&lt;p&gt;Luckily, there is a fix that we can implement. We&amp;rsquo;ll need to install a few helpers from the Ubuntu repositories, update our configuration file, then set up OpenVPN using NetworkManager. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;1-install-some-helpers&#34;&gt;1. Install some helpers&lt;/h2&gt;
&lt;p&gt;To properly integrate OpenVPN with &lt;code&gt;systemd-resolved&lt;/code&gt;, we&amp;rsquo;ll need a bit more help. In a terminal, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install -y openvpn-systemd-resolved network-manager-openvpn network-manager-openvpn-gnome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install a helper script that integrates OpenVPN and &lt;code&gt;systemd-resolved&lt;/code&gt;, a NetworkManager plugin for OpenVPN, and its GUI counterpart for GNOME desktop environment.&lt;/p&gt;
&lt;h2 id=&#34;2-add-dns-implementation-to-your-connection-profile&#34;&gt;2. Add DNS implementation to your connection profile&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need to edit the connection profile file we downloaded earlier. Since it&amp;rsquo;s symbolically linked, we can accomplish this by changing the &lt;code&gt;.ovpn&lt;/code&gt; file, wherever it&amp;rsquo;s stored. Run &lt;code&gt;vim &amp;lt;name&amp;gt;.ovpn&lt;/code&gt; to open it in Vim, then add the following lines at the bottom. Explanation in the comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Allow OpenVPN to call user-defined scripts&lt;/span&gt;
script-security &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Tell systemd-resolved to send all DNS queries over the VPN&lt;/span&gt;
dhcp-option DOMAIN-ROUTE .
&lt;span class=&#34;c1&#34;&gt;# Use the update-systemd-resolved script when TUN/TAP device is opened,&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and also run the script on restarts and before the TUN/TAP device is closed&lt;/span&gt;
up /etc/openvpn/update-systemd-resolved
up-restart
down /etc/openvpn/update-systemd-resolved
down-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full list of OpenVPN options, see &lt;a href=&#34;https://openvpn.net/community-resources/reference-manual-for-openvpn-2-1/&#34;&gt;OpenVPN Scripting and Environment Variables&lt;/a&gt;. You may also like &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;&gt;more information about TUN/TAP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-openvpn-as-networkmanager-system-connection&#34;&gt;3. Set up OpenVPN as NetworkManager system connection&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the GUI to set up our VPN with NetworkManager. Open up Network Settings, which should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;15-networksettings.png#screenshot&#34; alt=&#34;Network Settings window on Ubuntu 18.04&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then click the &amp;ldquo;+&amp;rdquo; button. On the window that pops up, counterintuitively, choose &amp;ldquo;Import from file&amp;hellip;&amp;rdquo; instead of the OpenVPN option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;16-importvpn.jpg#screenshot&#34; alt=&#34;Add VPN window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Navigate to, and then select, your &lt;code&gt;.ovpn&lt;/code&gt; file. We should now see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;17-vpnsettings.png#screenshot&#34; alt=&#34;The filled VPN connection settings&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Add your username and password for the server (&lt;code&gt;openvpn&lt;/code&gt; and the password we set in &lt;a href=&#34;#3-initialize-openvpn-on-the-ec2-server&#34;&gt;the first section&amp;rsquo;s Step 3&lt;/a&gt;), and your user key password (the same one again, if you&amp;rsquo;ve followed this tutorial), then click the &amp;ldquo;Add&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id=&#34;4-edit-your-openvpn-networkmanager-configuration&#34;&gt;4. Edit your OpenVPN NetworkManager configuration&lt;/h2&gt;
&lt;p&gt;Nearly there! Now that we&amp;rsquo;ve added the VPN as a NetworkManager connection, we&amp;rsquo;ll need to make a quick change to it. We can see a list of NetworkManager connections by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls -la /etc/NetworkManager/system-connections/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one for our VPN is probably called &lt;code&gt;openvpn&lt;/code&gt;, so let&amp;rsquo;s edit it by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo vim /etc/NetworkManager/system-connections/openvpn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;code&gt;[ipv4]&lt;/code&gt;, we&amp;rsquo;ll need to add the line &lt;code&gt;dns-priority=-42&lt;/code&gt;. It should end up looking like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;18-connsettings.jpg#screenshot&#34; alt=&#34;Connection settings for ipv4&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Setting a negative number is a workaround that prioritizes this DNS server. The actual number is arbitrary (&lt;code&gt;-1&lt;/code&gt; should also work) but I like 42. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;h2 id=&#34;5-restart-connect-profit&#34;&gt;5. Restart, connect, profit!!!&lt;/h2&gt;
&lt;p&gt;In a terminal, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo service network-manager restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the Network Settings, click the magic button that turns on the VPN:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;19-vpnon.jpg#screenshot&#34; alt=&#34;Network Settings window&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, visit &lt;a href=&#34;https://www.dnsleaktest.com/&#34;&gt;the DNS leak test website&lt;/a&gt; and click on &amp;ldquo;Extended test&amp;rdquo; to verify the fix. If everything&amp;rsquo;s working properly, we should now see a list containing only our VPN ISP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;20-noleaks.png#screenshot&#34; alt=&#34;Successful DNS leak test results&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;rsquo;re done! Congratulations on rolling your very own VPN server and stopping DNS leaks with OpenVPN. Enjoy surfing in (relative) privacy. Now your only worry at the local coffeeshop is who&amp;rsquo;s watching you surf from the seat behind you.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/cover_hudf0a9e712aaa7cfff13d04d6bd5de865_250170_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to do twice as much with half the keystrokes using `.bashrc`</title><link>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</link><pubDate>Wed, 21 Aug 2019 09:17:02 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</guid><description>An overview of time-saving aliases, functions, and creating a useful Bash prompt.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/cover_huc91640f9694e31ff03eab28f9c840023_19597_640x0_resize_box_2.png" width="640" height="245"/>
&lt;p&gt;In my &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&#34;&gt;recent post about setting up Ubuntu with Bash scripts&lt;/a&gt;, I briefly alluded to the magic of &lt;code&gt;.bashrc&lt;/code&gt;. This didn&amp;rsquo;t really do it justice, so here&amp;rsquo;s a quick post that offers a bit more detail about what the Bash configuration file can do.&lt;/p&gt;
&lt;p&gt;My current configuration hugely improves my workflow, and saves me well over 50% of the keystrokes I would have to employ without it! Let&amp;rsquo;s look at some examples of aliases, functions, and prompt configurations that can improve our workflow by helping us be more efficient with fewer key presses.&lt;/p&gt;
&lt;h1 id=&#34;bash-aliases&#34;&gt;Bash aliases&lt;/h1&gt;
&lt;p&gt;A smartly written &lt;code&gt;.bashrc&lt;/code&gt; can save a whole lot of keystrokes. We can take advantage of this in the literal sense by using &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Aliases.html&#34;&gt;bash aliases&lt;/a&gt;, or strings that expand to larger commands. For an indicative example, here is a Bash alias for copying files in the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Always copy contents of directories (r)ecursively and explain (v) what was done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cp -rv&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;alias&lt;/code&gt; command defines the string we&amp;rsquo;ll type, followed by what that string will expand to. We can override existing commands like &lt;code&gt;cp&lt;/code&gt; above. On its own, the &lt;code&gt;cp&lt;/code&gt; command will only copy files, not directories, and succeeds silently. With this alias, we need not remember to pass those two flags, nor &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt; the location of our copied file to confirm that it&amp;rsquo;s there! Now, just those two key presses (for &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;) will do all of that for us.&lt;/p&gt;
&lt;p&gt;Here are a few more &lt;code&gt;.bashrc&lt;/code&gt; aliases for passing flags with common functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# List contents with colors for file types, (A)lmost all hidden files (without . and ..), in (C)olumns, with class indicators (F)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ls --color=auto -ACF&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# List contents with colors for file types, (a)ll hidden entries (including . and ..), use (l)ong listing format, with class indicators (F)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ls --color=auto -alF&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Explain (v) what was done when moving a file&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mv -v&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Create any non-existent (p)arent directories and explain (v) what was done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mkdir -pv&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Always try to (c)ontinue getting a partially-downloaded file&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;wget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wget -c&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aliases come in handy when we want to avoid typing long commands, too. Here are a few I use when working with Python environments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pym&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;python3 manage.py&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mkenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;python3 -m venv env&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;startenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;source env/bin/activate &amp;amp;&amp;amp; which python3&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stopenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deactivate&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For further inspiration on ways Bash aliases can save time, I highly recommend &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-useful-bash-aliases-and-functions&#34;&gt;the examples in this article&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;bash-functions&#34;&gt;Bash functions&lt;/h1&gt;
&lt;p&gt;One downside of the aliases above is that they&amp;rsquo;re rather static - they&amp;rsquo;ll always expand to exactly the text declared. For a Bash alias that takes arguments, we&amp;rsquo;ll need to create a function. We can do this like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Show contents of the directory after changing to it&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;builtin&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
ls -ACF
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can&amp;rsquo;t begin to tally how many times I&amp;rsquo;ve typed &lt;code&gt;cd&lt;/code&gt; and then &lt;code&gt;ls&lt;/code&gt; immediately after to see the contents of the directory I&amp;rsquo;m now in. With this function set up, it all happens with just those two letters! The function takes the first argument, &lt;code&gt;$1&lt;/code&gt;, as the location to change directory to, then prints the contents of that directory in nicely formatted columns with file type indicators. The &lt;code&gt;builtin&lt;/code&gt; part is necessary to get Bash to allow us to override this default command.&lt;/p&gt;
&lt;p&gt;Bash functions are very useful when it comes to downloading or upgrading software, too. I previously spent at least a few minutes every couple weeks downloading the new extended version of the &lt;a href=&#34;https://gohugo.io/categories/releases&#34;&gt;static site generator Hugo&lt;/a&gt;, thanks to their excellent shipping frequency. With a function, I only need to pass in the version, and the upgrade happens in a few seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Hugo install or upgrade&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; gethugo &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/hugo_extended_&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;_Linux-64bit.tar.gz
tar xf tmp/hugo_extended_&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;_Linux-64bit.tar.gz -C tmp/
sudo mv -f tmp/hugo /usr/local/bin/
rm -rf tmp/
hugo version
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$@&lt;/code&gt; notation simply takes all the arguments given, replacing its spot in the function. To run the above function and download Hugo version 0.57.2, we use the command &lt;code&gt;gethugo 0.57.2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve got one for &lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;, too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; getgolang &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
sudo rm -rf /usr/local/go
wget -q -P tmp/ https://dl.google.com/go/go&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf tmp/go&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.linux-amd64.tar.gz
rm -rf tmp/
go version
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or how about a function that adds a remote origin URL for GitLab to the current repository?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; glab &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
git remote set-url origin --add git@gitlab.com:&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PWD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.git
git remote -v
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;glab username&lt;/code&gt;, we can create a new &lt;code&gt;origin&lt;/code&gt; URL for the current Git repository with our &lt;code&gt;username&lt;/code&gt; on GitLab.com. Pushing to a new remote URL &lt;a href=&#34;https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/#a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;automatically creates a new private GitLab repository&lt;/a&gt;, so this is a useful shortcut for creating backups!&lt;/p&gt;
&lt;p&gt;Bash functions are really only limited by the possibilities of scripting, of which there are, practically, few limits. If there&amp;rsquo;s anything we do on a frequent basis that requires typing a few lines into a terminal, we can probably create a Bash function for it!&lt;/p&gt;
&lt;h1 id=&#34;bash-prompt&#34;&gt;Bash prompt&lt;/h1&gt;
&lt;p&gt;Besides directory contents, it&amp;rsquo;s also useful to see the full path of the directory we&amp;rsquo;re in. The Bash prompt can show us this path, along with other useful information like our current Git branch. To make it more readable, we can define colours for each part of the prompt. Here&amp;rsquo;s how we can set up our prompt in &lt;code&gt;.bashrc&lt;/code&gt; to accomplish this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Colour codes are cumbersome, so let&amp;#39;s name them&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtcyn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;96m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Cyan&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtpur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;35m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Purple&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtwht&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0;37m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# White&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;txtrst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\[\e[0m\]&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Text Reset&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Which (C)olour for what part of the prompt?&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtcyn&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;gitC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtpur&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;pointerC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtwht&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;txtrst&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Get the name of our branch and put parenthesis around it&lt;/span&gt;
gitBranch&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
git branch &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;/^[^*]/d&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/* \(.*\)/(\1)/&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Build the prompt&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\w &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gitC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$(gitBranch) &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pointerC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~/github/myrepo &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; $&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naming the colours helps to easily identify where one colour starts and stops, and where the next one begins. The prompt that we see in our terminal is defined by the string following &lt;code&gt;export PS1&lt;/code&gt;, with each component of the prompt set with an &lt;a href=&#34;https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html&#34;&gt;escape sequence&lt;/a&gt;. Let&amp;rsquo;s break that down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; displays the current working directory,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\$(gitBranch)&lt;/code&gt; calls the &lt;code&gt;gitBranch&lt;/code&gt; function defined above, which displays the current Git branch,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\$&lt;/code&gt; will display a &amp;ldquo;$&amp;rdquo; if you are a normal user or in normal user mode, and a &amp;ldquo;#&amp;rdquo; if you are root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html&#34;&gt;full list of Bash escape sequences&lt;/a&gt; can help us display many more bits of information, including even the time and date! Bash prompts are highly customizable and individual, so feel free to set it up any way you please.&lt;/p&gt;
&lt;p&gt;Here are a few options that put information front and centre and can help us to work more efficiently.&lt;/p&gt;
&lt;h2 id=&#34;for-the-procrastination-averse&#34;&gt;For the procrastination-averse&lt;/h2&gt;
&lt;p&gt;Username and current time with seconds, in 24-hour HH:MM:SS format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;userC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\u &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;at \t &amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;user at 09:35:55 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for-those-who-always-like-to-know-where-they-stand&#34;&gt;For those who always like to know where they stand&lt;/h2&gt;
&lt;p&gt;Full file path on a separate line, and username:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pathC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\w&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;normalC&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\u:&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;~/github/myrepo
user:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for-the-minimalist&#34;&gt;For the minimalist&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can build many practical prompts with just the basic escape sequences; once we start to integrate functions with prompts, as in the Git branch example, things can get really complicated. Whether this amount of complication is an addition or a detriment to your productivity, only you can know for sure!&lt;/p&gt;
&lt;p&gt;Many fancy Bash prompts are possible with programs readily available with a quick search. I&amp;rsquo;ve intentionally not provided samples here because, well, if you can tend to get as excited about this stuff as I can, it might be a couple hours before you get back to what you were doing before you started reading this post, and I just can&amp;rsquo;t have that on my conscience. 🥺&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve hopefully struck a nice balance now between time invested and usefulness gained from our Bash configuration file! I hope you use your newly-recovered keystroke capacity for good.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/cover_huc91640f9694e31ff03eab28f9c840023_19597_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to set up a fresh Ubuntu desktop using only dotfiles and bash scripts</title><link>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</link><pubDate>Mon, 19 Aug 2019 07:58:18 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</guid><description>Configure settings, install programs, and customize your desktop environment with a single bash command.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/cover_hu7503ff9e94bb9ad2ad596a79338ed3ec_587274_640x0_resize_q75_box.jpg" width="640" height="354"/>
&lt;p&gt;One of my most favourite things about open source files on GitHub is the ability to see how others do (what some people might call) mundane things, like set up their &lt;code&gt;.bashrc&lt;/code&gt; and other dotfiles. While I&amp;rsquo;m not as enthusiastic about ricing as I was when I first came to the Linux side, I still get pretty excited when I find a config setting that makes things prettier and faster, and thus, better.&lt;/p&gt;
&lt;p&gt;I recently came across a few such things, particularly in &lt;a href=&#34;https://github.com/tomnomnom&#34;&gt;Tom Hudson&amp;rsquo;s&lt;/a&gt; dotfiles. Tom seems to like to script things, and some of those things include automatically setting up symlinks, and installing Ubuntu repository applications and other programs. This got me thinking. Could I automate the set up of a new machine to replicate my current one?&lt;/p&gt;
&lt;p&gt;Being someone generally inclined to take things apart in order to see how they work, I know I&amp;rsquo;ve messed up my laptop on occasion. (Usually when I&amp;rsquo;m away from home, and my backup harddrive isn&amp;rsquo;t.) On those rare but really inconvenient situations when my computer becomes a shell of its former self, (ba-dum-ching) it&amp;rsquo;d be quite nice to have a fast, simple way of putting Humpty Dumpty back together again, just the way I like.&lt;/p&gt;
&lt;p&gt;In contrast to creating a &lt;a href=&#34;https://askubuntu.com/questions/19901/how-to-make-a-disk-image-and-restore-from-it-later&#34;&gt;disk image and restoring it later&lt;/a&gt;, a collection of bash scripts is easier to create, maintain, and move around. They require no special utilities, only an external transportation method. It&amp;rsquo;s like passing along the recipe, instead of the whole bundt cake. (Mmm, cake.)&lt;/p&gt;
&lt;p&gt;Additionally, functionality like this would be super useful when setting up a virtual machine, or VM, or even just a virtual private server, or VPS. (Both of which, now that I write this, would probably make more forgiving targets for my more destructive experimentations&amp;hellip; live and learn!)&lt;/p&gt;
&lt;p&gt;Well, after some grepping and Googling and digging around, I now have a suite of scripts that can do this:&lt;/p&gt;
&lt;video controls=&#34;controls&#34; poster=&#34;cover.jpg&#34;&gt;
&lt;source src=&#34;setup.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;p&gt;This is the tail end of a test run of the set up scripts on a fresh Ubuntu desktop, loaded off a bootable USB. It had all my programs and settings restored in under three minutes!&lt;/p&gt;
&lt;p&gt;This post will cover how to achieve the automatic set up of a computer running Ubuntu Desktop (in my case, Ubuntu LTS 18.04) using bash scripts. The majority of the information covered is applicable to all the Linux desktop flavours, though some syntax may differ. The bash scripts cover three main areas: linking dotfiles, installing software from Ubuntu and elsewhere, and setting up the desktop environment. We&amp;rsquo;ll cover each of these areas and go over the important bits so that you can begin to craft your own scripts.&lt;/p&gt;
&lt;h1 id=&#34;dotfiles&#34;&gt;Dotfiles&lt;/h1&gt;
&lt;p&gt;Dotfiles are what most Linux enthusiasts call configuration files. They typically live in the user&amp;rsquo;s home directory (denoted in bash scripts with the &lt;a href=&#34;https://www.tldp.org/LDP/abs/html/internal.html#BUILTINREF&#34;&gt;builtin&lt;/a&gt; variable &lt;code&gt;$HOME&lt;/code&gt;) and control the appearance and behaviour of all kinds of programs. The file names begin with &lt;code&gt;.&lt;/code&gt;, which denotes hidden files in Linux (hence &amp;ldquo;dot&amp;rdquo; files). Here are some common dotfiles and ways in which they&amp;rsquo;re useful.&lt;/p&gt;
&lt;h2 id=&#34;bashrc&#34;&gt;&lt;code&gt;.bashrc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.bashrc&lt;/code&gt; file is a list of commands executed at startup by interactive, non-login shells. &lt;a href=&#34;https://www.tldp.org/LDP/abs/html/intandnonint.html&#34;&gt;Interactive vs non-interactive shells&lt;/a&gt; can be a little confusing, but aren&amp;rsquo;t necessary for us to worry about here. For our purposes, any time you open a new terminal, see a prompt, and can type commands into it, your &lt;code&gt;.bashrc&lt;/code&gt; was executed.&lt;/p&gt;
&lt;p&gt;Lines in this file can help improve your workflow by creating aliases that reduce keystrokes, or by displaying a helpful prompt with useful information. It can even run user-created programs, like &lt;a href=&#34;https://github.com/victoriadrake/eddie-terminal&#34;&gt;Eddie&lt;/a&gt;. For more ideas, you can have a look at &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/.bashrc&#34;&gt;my &lt;code&gt;.bashrc&lt;/code&gt; file on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;vimrc&#34;&gt;&lt;code&gt;.vimrc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.vimrc&lt;/code&gt; dotfile configures the champion of all text editors, &lt;a href=&#34;https://www.vim.org/about.php&#34;&gt;Vim&lt;/a&gt;. (If you haven&amp;rsquo;t yet wielded the powers of the keyboard shortcuts, I highly recommend &lt;a href=&#34;https://vim-adventures.com/&#34;&gt;a fun game to learn Vim with&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;.vimrc&lt;/code&gt;, we can set editor preferences such as display settings, colours, and custom keyboard shortcuts. You can take a look at &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/.vimrc&#34;&gt;my &lt;code&gt;.vimrc&lt;/code&gt; on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other dotfiles may be useful depending on the programs you use, such as &lt;code&gt;.gitconfig&lt;/code&gt; or &lt;code&gt;.tmux.conf&lt;/code&gt;. Exploring dotfiles on GitHub is a great way to get a sense of what&amp;rsquo;s available and useful to you!&lt;/p&gt;
&lt;h1 id=&#34;linking-dotfiles&#34;&gt;Linking dotfiles&lt;/h1&gt;
&lt;p&gt;We can use a script to create symbolic links, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link#POSIX_and_Unix-like_operating_systems&#34;&gt;symlinks&lt;/a&gt; for all our dotfiles. This allows us to keep all the files in a central repository, where they can easily be managed, while also providing a sort of placeholder in the spot that our programs expect the configuration file to be found. This is typically, but not always, the user home directory. For example, since I store my dotfiles on GitHub, I keep them in a directory with a path like &lt;code&gt;~/github/dotfiles/&lt;/code&gt; while the files themselves are symlinked, resulting in a path like &lt;code&gt;~/.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To programmatically check for and handle any existing files and symlinks, then create new ones, we can use &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/symlink.sh&#34;&gt;this elegant shell script&lt;/a&gt;. I compliment it only because I blatantly stole the core of it from &lt;a href=&#34;https://github.com/tomnomnom/dotfiles/blob/master/setup.sh&#34;&gt;Tom&amp;rsquo;s setup script&lt;/a&gt;, so I can&amp;rsquo;t take the credit for how lovely it is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;symlink.sh&lt;/code&gt; script works by attempting to create symlinks for each dotfile in our &lt;code&gt;$HOME&lt;/code&gt;. It first checks to see if a symlink already exists, or if a regular file or directory with the same name exists. In the former case, the symlink is removed and remade; in the latter, the file or directory is renamed, then the symlink is made.&lt;/p&gt;
&lt;h1 id=&#34;installing-software&#34;&gt;Installing software&lt;/h1&gt;
&lt;p&gt;One of the beautiful things about exploring shell scripts is discovering how much can be achieved using only the command line. As someone whose first exposure to computers was through a graphical operating system, I find working in the terminal to be refreshingly fast.&lt;/p&gt;
&lt;p&gt;With Ubuntu, most programs we likely require are available through the default Ubuntu software repositories. We typically search for these with the command &lt;code&gt;apt search &amp;lt;program&amp;gt;&lt;/code&gt; and install them with &lt;code&gt;sudo apt install &amp;lt;program&amp;gt;&lt;/code&gt;. Some software we&amp;rsquo;d like may not be in the default repositories, or may not be offered there in the most current version. In these cases, we can still install these programs in Ubuntu using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Ubuntu#Package_Archives&#34;&gt;PPA, or Personal Package Archive&lt;/a&gt;. We&amp;rsquo;ll just have to be careful that the PPAs we choose are from the official sources.&lt;/p&gt;
&lt;p&gt;If a program we&amp;rsquo;d like doesn&amp;rsquo;t appear in the default repositories or doesn&amp;rsquo;t seem to have a PPA, we may still be able to install it via command line. A quick search for &amp;ldquo;&lt;program&gt; installation command line&amp;rdquo; should get some answers.&lt;/p&gt;
&lt;p&gt;Since bash scripts are just a collection of commands that we could run individually in the terminal, creating a script to install all our desired programs is as straightforward as putting all the commands into a script file. I chose to organize my installation scripts between the default repositories, which are installed by &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/aptinstall.sh&#34;&gt;my &lt;code&gt;aptinstall.sh&lt;/code&gt; script&lt;/a&gt;, and programs that involve external sources, handled with &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/programs.sh&#34;&gt;my &lt;code&gt;programs.sh&lt;/code&gt; script&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-the-desktop-environment&#34;&gt;Setting up the desktop environment&lt;/h1&gt;
&lt;p&gt;On the recent occasions when I&amp;rsquo;ve gotten a fresh desktop (intentionally or otherwise) I always seem to forget how long it takes to remember, find, and then change all the desktop environment settings. Keyboard shortcuts, workspaces, sound settings, night mode&amp;hellip; it adds up!&lt;/p&gt;
&lt;p&gt;Thankfully, all these settings have to be stored somewhere in a non-graphical format, which means that if we can discover how that&amp;rsquo;s done, we can likely find a way to easily manipulate the settings with a bash script. Lo and behold the terminal command, &lt;code&gt;gsettings list-recursively&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a heck of a lot of settings for GNOME desktop environment. We can make the list easier to scroll through (if, like me, you&amp;rsquo;re sometimes the type of person to say &amp;ldquo;Just let me look at everything and figure out what I want!&amp;rdquo;) by piping to &lt;code&gt;less&lt;/code&gt;: &lt;code&gt;gsettings list-recursively | less&lt;/code&gt;. Alternatively, if we have an inkling as to what we might be looking for, we can use &lt;code&gt;grep&lt;/code&gt;: &lt;code&gt;gsettings list-recursively | grep &#39;keyboard&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can manipulate our settings with the &lt;code&gt;gsettings set&lt;/code&gt; command. It can sometimes be difficult to find the syntax for the setting we want, so when we&amp;rsquo;re first building our script, I recommend using the GUI to make the changes, then finding the &lt;code&gt;gsettings&lt;/code&gt; line we changed and recording its value.&lt;/p&gt;
&lt;p&gt;For some inspiration, you can view &lt;a href=&#34;https://github.com/victoriadrake/dotfiles/blob/master/scripts/desktop.sh&#34;&gt;my &lt;code&gt;desktop.sh&lt;/code&gt; settings script on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;Having modular scripts (one for symlinks, two for installing programs, another for desktop settings) is useful for both keeping things organized and for being able to run some but not all of the automated set up. For instance, if I were to set up a VPS in which I only use the command line, I wouldn&amp;rsquo;t need to bother with installing graphical programs or desktop settings.&lt;/p&gt;
&lt;p&gt;In cases where I do want to run all the scripts, however, doing so one-by-one is a little tedious. Thankfully, since bash scripts can themselves be run by terminal commands, we can simply write another master script to run them all!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my master script to handle the set up of a new Ubuntu desktop machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
./symlink.sh
./aptinstall.sh
./programs.sh
./desktop.sh
&lt;span class=&#34;c1&#34;&gt;# Get all upgrades&lt;/span&gt;
sudo apt upgrade -y
&lt;span class=&#34;c1&#34;&gt;# See our bash changes&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;span class=&#34;c1&#34;&gt;# Fun hello&lt;/span&gt;
figlet &lt;span class=&#34;s2&#34;&gt;&amp;#34;... and we&amp;#39;re back!&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I threw in the upgrade line for good measure. It will make sure that the programs installed on our fresh desktop have the latest updates. Now a simple, single bash command will take care of everything!&lt;/p&gt;
&lt;p&gt;You may have noticed that, while our desktop now looks and runs familiarly, these scripts don&amp;rsquo;t cover one very important area: our files. Hopefully, you have a back up method for those that involves some form of reliable external hardware. If not, and if you tend to put your work in external repository hosts like GitHub or GitLab, I do have a way to &lt;a href=&#34;https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/&#34;&gt;automatically clone and back up your GitHub repositories with bash one-liners&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relying on external repository hosts doesn&amp;rsquo;t offer 100% coverage, however. Files that you wouldn&amp;rsquo;t put in an externally hosted repository (private or otherwise) consequently can&amp;rsquo;t be pulled. Git ignored objects that can&amp;rsquo;t be generated from included files, like private keys and secrets, will not be recreated. Those files, however, are likely small enough that you could fit a whole bunch on a couple encrypted USB flash drives (and if you don&amp;rsquo;t have private key backups, maybe you ought to do that first?).&lt;/p&gt;
&lt;p&gt;That said, I hope this post has given you at least some inspiration as to how dotfiles and bash scripts can help to automate setting up a fresh desktop. If you come up with some settings you find useful, please help others discover them by sharing your dotfiles, too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/cover_hu7503ff9e94bb9ad2ad596a79338ed3ec_587274_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</link><pubDate>Tue, 06 Aug 2019 10:55:19 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</guid><description>Using xargs and awk in Bash to automate managing remote-hosted repositories.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" width="640" height="343"/>
&lt;p&gt;Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into automatically re-creating my laptop with Bash scripts (post to come!), I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well. Here they are.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-clone-all-your-github-repositories&#34;&gt;A Bash one-liner to clone all your GitHub repositories&lt;/h1&gt;
&lt;p&gt;Caveat: you&amp;rsquo;ll need a list of the GitHub repositories you want to clone. The good thing about that is it gives you full agency to choose just the repositories you want on your machine, instead of going in whole-hog.&lt;/p&gt;
&lt;p&gt;You can easily clone GitHub repositories without entering your password each time by using HTTPS with your &lt;a href=&#34;https://help.github.com/en/articles/caching-your-github-password-in-git&#34;&gt;15-minute cached credentials&lt;/a&gt; or, my preferred method, by &lt;a href=&#34;https://help.github.com/en/articles/connecting-to-github-with-ssh&#34;&gt;connecting to GitHub with SSH&lt;/a&gt;. For brevity I&amp;rsquo;ll assume we&amp;rsquo;re going with the latter, and our SSH keys are set up.&lt;/p&gt;
&lt;p&gt;Given a list of GitHub URLs in the file &lt;code&gt;gh-repos.txt&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@github.com:username/first-repository.git
git@github.com:username/second-repository.git
git@github.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xargs -n1 git clone &amp;lt; gh-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clones all the repositories on the list into the current folder. This same one-liner works for GitLab repositories as well, if you substitute the appropriate URLs.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;There are two halves to this one-liner: the input, counterintuitively on the right side, and the part that makes stuff happen, on the left. We could make the order of these parts more intuitive (maybe?) by writing the same command like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;lt;gh-repos.txt xargs -n1 git clone &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run a command for each line of our input, &lt;code&gt;gh-repos.txt&lt;/code&gt;, we use &lt;code&gt;xargs -n1&lt;/code&gt;. The tool &lt;code&gt;xargs&lt;/code&gt; reads items from input and executes any commands it finds (it will &lt;code&gt;echo&lt;/code&gt; if it doesn&amp;rsquo;t find any). By default, it assumes that items are separated by spaces; new lines also works and makes our list easier to read. The flag &lt;code&gt;-n1&lt;/code&gt; tells &lt;code&gt;xargs&lt;/code&gt; to use &lt;code&gt;1&lt;/code&gt; argument, or in our case, one line, per command. We build our command with &lt;code&gt;git clone&lt;/code&gt;, which &lt;code&gt;xargs&lt;/code&gt; then executes for each line. Ta-da.&lt;/p&gt;
&lt;h1 id=&#34;a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab&#34;&gt;A Bash one-liner to create and push many repositories on GitLab&lt;/h1&gt;
&lt;p&gt;GitLab, unlike GitHub, lets us do this nifty thing where we don&amp;rsquo;t have to use the website to make a new repository first. We can &lt;a href=&#34;https://gitlab.com/help/gitlab-basics/create-project#push-to-create-a-new-project&#34;&gt;create a new GitLab repository from our terminal&lt;/a&gt;. The newly created repository defaults to being set as Private, so if we want to make it Public on GitLab, we&amp;rsquo;ll have to do that manually later.&lt;/p&gt;
&lt;p&gt;The GitLab docs tell us to push to create a new project using &lt;code&gt;git push --set-upstream&lt;/code&gt;, but I don&amp;rsquo;t find this to be very convenient for using GitLab as a backup. As I work with my repositories in the future, I&amp;rsquo;d like to run one command that pushes to both GitHub &lt;em&gt;and&lt;/em&gt; GitLab without additional effort on my part.&lt;/p&gt;
&lt;p&gt;To make this Bash one-liner work, we&amp;rsquo;ll also need a list of repository URLs for GitLab (ones that don&amp;rsquo;t exist yet). We can easily do this by copying our GitHub repository list, opening it up with Vim, and doing a &lt;a href=&#34;https://vim.fandom.com/wiki/Search_and_replace&#34;&gt;search-and-replace&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp gh-repos.txt gl-repos.txt
vim gl-repos.txt
:%s/&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;github&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;/gitlab/g
:wq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces &lt;code&gt;gl-repos.txt&lt;/code&gt;, which looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;git@gitlab.com:username/first-repository.git
git@gitlab.com:username/second-repository.git
git@gitlab.com:username/third-repository.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create these repositories on GitLab, add the URLs as remotes, and push our code to the new repositories by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hang tight and I&amp;rsquo;ll explain it; for now, take note that &lt;code&gt;~/FULL/PATH/&lt;/code&gt; should be the full path to the directory containing our GitHub repositories.&lt;/p&gt;
&lt;p&gt;We do have to make note of a couple assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the directory on your local machine that contains the repository is the same as the name of the repository in the URL (this will be the case if it was cloned with the one-liner above);&lt;/li&gt;
&lt;li&gt;Each repository is currently checked out to the branch you want pushed, ie. &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The one-liner could be expanded to handle these assumptions, but it is the humble opinion of the author that at that point, we really ought to be writing a Bash script.&lt;/p&gt;
&lt;h2 id=&#34;what-s-going-on-here-1&#34;&gt;What&amp;rsquo;s going on here?&lt;/h2&gt;
&lt;p&gt;Our Bash one-liner uses each line (or URL) in the &lt;code&gt;gl-repos.txt&lt;/code&gt; file as input. With &lt;code&gt;awk&lt;/code&gt;, it splits off the name of the directory containing the repository on our local machine, and uses these pieces of information to build our larger command. If we were to &lt;code&gt;print&lt;/code&gt; the output of &lt;code&gt;awk&lt;/code&gt;, we&amp;rsquo;d see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/first-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/second-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/second-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/FULL/PATH/third-repository &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote set-url origin --add git@gitlab.com:username/third-repository.git &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at how we build this command.&lt;/p&gt;
&lt;h3 id=&#34;splitting-strings-with-awk&#34;&gt;Splitting strings with &lt;code&gt;awk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The tool &lt;code&gt;awk&lt;/code&gt; can split input based on &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Command-Line-Field-Separator.html&#34;&gt;field separators&lt;/a&gt;. The default separator is a whitespace character, but we can change this by passing the &lt;code&gt;-F&lt;/code&gt; flag. Besides single characters, we can also use a &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Regexp-Field-Splitting.html#Regexp-Field-Splitting&#34;&gt;regular expression field separator&lt;/a&gt;. Since our repository URLs have a set format, we can grab the repository names by asking for the substring between the slash character &lt;code&gt;/&lt;/code&gt; and the end of the URL, &lt;code&gt;.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to accomplish this is with our regex &lt;code&gt;\/|(\.git)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\/&lt;/code&gt; is an escaped &lt;code&gt;/&lt;/code&gt; character;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; means &amp;ldquo;or&amp;rdquo;, telling awk to match either expression;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(\.git)&lt;/code&gt; is the capture group at the end of our URL that matches &amp;ldquo;.git&amp;rdquo;, with an escaped &lt;code&gt;.&lt;/code&gt; character. This is a bit of a cheat, as &amp;ldquo;.git&amp;rdquo; isn&amp;rsquo;t strictly splitting anything (there&amp;rsquo;s nothing on the other side) but it&amp;rsquo;s an easy way for us to take this bit off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we&amp;rsquo;ve told &lt;code&gt;awk&lt;/code&gt; where to split, we can grab the right substring with the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Fields.html#index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator&#34;&gt;field operator&lt;/a&gt;. We refer to our fields with a &lt;code&gt;$&lt;/code&gt; character, then by the field&amp;rsquo;s column number. In our example, we want the second field, &lt;code&gt;$2&lt;/code&gt;. Here&amp;rsquo;s what all the substrings look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: git@gitlab.com:username
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: first-repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the whole string, or in our case, the whole URL, we use the field operator &lt;code&gt;$0&lt;/code&gt;. To write the command, we just substitute the field operators for the repository name and URL. Running this with &lt;code&gt;print&lt;/code&gt; as we&amp;rsquo;re building it can help to make sure we&amp;rsquo;ve got all the spaces right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print &amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;running-the-command&#34;&gt;Running the command&lt;/h3&gt;
&lt;p&gt;We build our command inside the parenthesis of &lt;code&gt;system()&lt;/code&gt;. By using this as the output of &lt;code&gt;awk&lt;/code&gt;, each command will run as soon as it is built and output. The &lt;code&gt;system()&lt;/code&gt; function creates a &lt;a href=&#34;https://en.wikipedia.org/wiki/Child_process&#34;&gt;child process&lt;/a&gt; that executes our command, then returns once the command is completed. In plain English, this lets us perform the Git commands on each repository, one-by-one, without breaking from our main process in which &lt;code&gt;awk&lt;/code&gt; is doing things with our input file. Here&amp;rsquo;s our final command again, all put together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk -F&lt;span class=&#34;s1&#34;&gt;&amp;#39;\/|(\.git)&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{system(&amp;#34;cd ~/FULL/PATH/&amp;#34; $2 &amp;#34; &amp;amp;&amp;amp; git remote set-url origin --add &amp;#34; $0 &amp;#34; &amp;amp;&amp;amp; git push&amp;#34;)}&amp;#39;&lt;/span&gt; gl-repos.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-our-backups&#34;&gt;Using our backups&lt;/h3&gt;
&lt;p&gt;By adding the GitLab URLs as remotes, we&amp;rsquo;ve simplified the process of pushing to both externally hosted repositories. If we run &lt;code&gt;git remote -v&lt;/code&gt; in one of our repository directories, we&amp;rsquo;ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@github.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
origin git@gitlab.com:username/first-repository.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, simply running &lt;code&gt;git push&lt;/code&gt; without arguments will push the current branch to both remote repositories.&lt;/p&gt;
&lt;p&gt;We should also note that &lt;code&gt;git pull&lt;/code&gt; will generally only try to pull from the remote repository you originally cloned from (the URL marked &lt;code&gt;(fetch)&lt;/code&gt; in our example above). Pulling from multiple Git repositories at the same time is possible, but complicated, and beyond the scope of this post. Here&amp;rsquo;s an &lt;a href=&#34;https://astrofloyd.wordpress.com/2015/05/05/git-pushing-to-and-pulling-from-multiple-remote-locations-remote-url-and-pushurl/&#34;&gt;explanation of pushing and pulling to multiple remotes&lt;/a&gt; to help get you started, if you&amp;rsquo;re curious. The &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34;&gt;Git documentation on remotes&lt;/a&gt; may also be helpful.&lt;/p&gt;
&lt;h1 id=&#34;to-elaborate-on-the-succinctness-of-bash-one-liners&#34;&gt;To elaborate on the succinctness of Bash one-liners&lt;/h1&gt;
&lt;p&gt;Bash one-liners, when understood, can be fun and handy shortcuts. At the very least, being aware of tools like &lt;code&gt;xargs&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; can help to automate and alleviate a lot of tediousness in our work. However, there are some downsides.&lt;/p&gt;
&lt;p&gt;In terms of an easy-to-understand, maintainable, and approachable tool, Bash one-liners suck. They&amp;rsquo;re usually more complicated to write than a Bash script using &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops, and certainly more complicated to read. It&amp;rsquo;s likely that when we write them, we&amp;rsquo;ll miss a single quote or closing parenthesis somewhere; and as I hope this post demonstrates, they can take quite a bit of explaining, too. So why use them?&lt;/p&gt;
&lt;p&gt;Imagine reading a recipe for baking a cake, step by step. You understand the methods and ingredients, and gather your supplies. Then, as you think about it, you begin to realize that if you just throw all the ingredients at the oven in precisely the right order, a cake will instantly materialize. You try it, and it works!&lt;/p&gt;
&lt;p&gt;That would be pretty satisfying, wouldn&amp;rsquo;t it?&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/cover_hue964d861d1f646dadaea936b29727a7c_1082491_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A quick guide to changing your GitHub username</title><link>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</link><pubDate>Sun, 28 Jul 2019 15:19:13 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/</guid><description>Some additional steps to consider after making a change to your username on GitHub.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" width="640" height="421"/>
&lt;p&gt;This being the 2,38947234th and probably last time I&amp;rsquo;ll change my username, (marriage is permanent, right?) I thought I&amp;rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read &lt;a href=&#34;https://help.github.com/en/articles/changing-your-github-username&#34;&gt;official instructions on how to change your GitHub username&lt;/a&gt; here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider &lt;em&gt;afterwards.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;where-to-make-changes&#34;&gt;Where to make changes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Change username in &lt;a href=&#34;https://github.com/settings/admin&#34;&gt;GitHub account settings.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If using GitHub Pages, change name of your &amp;ldquo;username.github.io&amp;rdquo; repository.&lt;/li&gt;
&lt;li&gt;If using other services that point to your &amp;ldquo;username.github.io&amp;rdquo; repository address, update them.&lt;/li&gt;
&lt;li&gt;If using Netlify, you &lt;em&gt;may&lt;/em&gt; want to sign in and reconnect your repositories. (Mine still worked, but due to a possibly unrelated issue, I&amp;rsquo;m not positive.)&lt;/li&gt;
&lt;li&gt;Sign in to Travis CI and other integrations (find them in your repository Settings tab -&amp;gt; Integrations &amp;amp; services). This will update your username there.&lt;/li&gt;
&lt;li&gt;Update your local files and repository links with &lt;em&gt;very carefully executed&lt;/em&gt; &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands, and push back changes to GitHub.&lt;/li&gt;
&lt;li&gt;Redeploy any websites you may have with your updated GitHub link.&lt;/li&gt;
&lt;li&gt;Fix any links around the web to your profile, your repositories, or Gists you may have shared.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;local-file-updates&#34;&gt;Local file updates&lt;/h1&gt;
&lt;p&gt;Here are some suggestions for strings to search and replace your username in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;github.com/username&lt;/code&gt; (References to your GitHub page in READMEs or in website copy)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username.github.io&lt;/code&gt; (Links to your GitHub Page)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git@github.com:username&lt;/code&gt; (Git config remote ssh urls)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;travis-ci.com/username&lt;/code&gt; (Travis badges in READMEs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shields.io/github/.../username&lt;/code&gt; (Shields badges in READMEs, types include &lt;code&gt;contributors&lt;/code&gt;, &lt;code&gt;stars&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, and more)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can quickly identify where the above strings are located using this command for each string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -rnw -e &#39;foobar&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will recursively (&lt;code&gt;r&lt;/code&gt;) search all files for strings matching the whole (&lt;code&gt;w&lt;/code&gt;) pattern (&lt;code&gt;e&lt;/code&gt;) provided and prefix results with the line numbers (&lt;code&gt;n&lt;/code&gt;) so you can easily find them.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; can make these changes much faster. See &lt;a href=&#34;https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/&#34;&gt;this article on search and replace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy your new handle! (I hope it sticks.)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-quick-guide-to-changing-your-github-username/cover_hu7812c3e32a841cc1ab09568139e9132c_71747_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Two ways to deploy a public GitHub Pages site from a private Hugo repository</title><link>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</link><pubDate>Mon, 22 Apr 2019 10:05:15 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</guid><description>Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site - from a separate private repository.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hua0c104d819921f3f45be661545f8932d_2244173_640x0_resize_box_2.png" width="640" height="370"/>
&lt;p&gt;Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used Hugo to build my site for years, but until this past week I&amp;rsquo;d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place - and if you&amp;rsquo;re using GitHub Pages with the free version of GitHub, &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&#34;&gt;that place is public&lt;/a&gt;. That means that all my three-in-the-morning bright ideas and messy unfinished (and unfunny) drafts would be publicly available - and no amount of continuous convenience was going to convince me to do that.&lt;/p&gt;
&lt;p&gt;So I kept things separated, with Hugo&amp;rsquo;s messy behind-the-scenes stuff in a local Git repository, and the generated &lt;code&gt;public/&lt;/code&gt; folder pushing to my GitHub Pages remote repository. Each time I wanted to deploy my site, I&amp;rsquo;d have to get on my laptop and &lt;code&gt;hugo&lt;/code&gt; to build my site, then &lt;code&gt;cd public/ &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit&lt;/code&gt;&amp;hellip; etc etc. And all was well, except for the nagging feeling that there was a better way to do this.&lt;/p&gt;
&lt;p&gt;I wrote another article a little while back about &lt;a href=&#34;https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; to make changes to my repositories on my iPad whenever I&amp;rsquo;m out and about. It seemed off to me that I could do everything except deploy my site from my iPad, so I set out to change that.&lt;/p&gt;
&lt;p&gt;A couple three-in-the-morning bright ideas and a revoked access token later (oops), I now have not one but &lt;em&gt;two&lt;/em&gt; ways to deploy to my public GitHub Pages repository from an entirely separated, private GitHub repository. In this post, I&amp;rsquo;ll take you through achieving this with &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis CI&lt;/a&gt; or using &lt;a href=&#34;http://netlify.com/&#34;&gt;Netlify&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing hackish about it - my public GitHub Pages repository still looks the same as it does when I pushed to it locally from my terminal. Only now, I&amp;rsquo;m able to take advantage of a couple great deployment tools to have the site update whenever I push to my private repo, whether I&amp;rsquo;m on my laptop or out and about with my iPad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;im-on-a-bridge.jpg#center&#34; alt=&#34;Hashtag: you did not push from there&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;#YouDidNotPushFromThere&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;This article assumes you have working knowledge of Git and GitHub Pages. If not, you may like to spin off some browser tabs from my articles on &lt;a href=&#34;https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/&#34;&gt;using GitHub and Working Copy&lt;/a&gt; and &lt;a href=&#34;https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/&#34;&gt;building a site with Hugo and GitHub Pages&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;private-to-public-github-pages-deployment-with-travis-ci&#34;&gt;Private-to-public GitHub Pages deployment with Travis CI&lt;/h1&gt;
&lt;p&gt;Travis CI has the built-in ability (♪) to &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/&#34;&gt;deploy to GitHub Pages&lt;/a&gt; following a successful build. They do a decent job in the docs of explaining how to add this feature, especially if you&amp;rsquo;ve used Travis CI before&amp;hellip; which I haven&amp;rsquo;t. Don&amp;rsquo;t worry, I did the bulk of the figuring-things-out for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Travis CI gets all its instructions from a configuration file in the root of your repository called &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You need to provide a &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;GitHub personal access token&lt;/a&gt; as a secure encrypted variable, which you can generate using &lt;code&gt;travis&lt;/code&gt; on the command line&lt;/li&gt;
&lt;li&gt;Once your script successfully finishes doing what you&amp;rsquo;ve told it to do (not necessarily what you &lt;em&gt;want&lt;/em&gt; it to do but that&amp;rsquo;s a whole other blog post), Travis will deploy your build directory to a repository you can specify with the &lt;code&gt;repo&lt;/code&gt; configuration variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-the-travis-configuration-file&#34;&gt;Setting up the Travis configuration file&lt;/h2&gt;
&lt;p&gt;Create a new configuration file for Travis with the filename &lt;code&gt;.travis.yml&lt;/code&gt; (note the leading &amp;ldquo;.&amp;rdquo;). These scripts are very customizable and I struggled to find a relevant example to use as a starting point - luckily, you don&amp;rsquo;t have that problem!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my basic &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;git&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;depth&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HUGO_VERSION=&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.54.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;matrix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;YOUR_ENCRYPTED_VARIABLE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;wget&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-q&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tar&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xf&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mv&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;~/bin/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hugo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--gc&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--minify&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;provider&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pages&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;skip-cleanup&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;github-token&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;$GITHUB_TOKEN&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;keep-history&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local-dir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;public&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gh-username/gh-username.github.io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;target-branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;verbose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;branch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script downloads and installs Hugo, builds the site with the garbage collection and minify &lt;a href=&#34;https://gohugo.io/commands/hugo/#synopsis&#34;&gt;flags&lt;/a&gt;, then deploys the &lt;code&gt;public/&lt;/code&gt; directory to the specified &lt;code&gt;repo&lt;/code&gt; - in this example, your public GitHub Pages repository. You can read about each of the &lt;code&gt;deploy&lt;/code&gt; configuration options &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/#further-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables#defining-encrypted-variables-in-travisyml&#34;&gt;add the GitHub personal access token as an encrypted variable&lt;/a&gt;, you don&amp;rsquo;t need to manually edit your &lt;code&gt;.travis.yml&lt;/code&gt;. The &lt;code&gt;travis&lt;/code&gt; gem commands below will encrypt and add the variable for you when you run them in your repository directory.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;travis&lt;/code&gt; with &lt;code&gt;sudo gem install travis&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;generate your GitHub personal access token&lt;/a&gt;, copy it (it only shows up once!) and run the commands below in your repository root, substituting your token for the kisses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;travis login --pro --github-token xxxxxxxxxxxxxxxxxxxxxxxxxxx
travis encrypt &lt;span class=&#34;nv&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxx --add env.matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your encrypted token magically appears in the file. Once you&amp;rsquo;ve committed &lt;code&gt;.travis.yml&lt;/code&gt; to your private Hugo repository, Travis CI will run the script and if the build succeeds, will deploy your site to your public GitHub Pages repo. Magic!&lt;/p&gt;
&lt;p&gt;Travis will always run a build each time you push to your private repository. If you don&amp;rsquo;t want to trigger this behavior with a particular commit, &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build&#34;&gt;add the &lt;code&gt;skip&lt;/code&gt; command to your commit message&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yo that&amp;rsquo;s cool but I like Netlify.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Okay fine.&lt;/p&gt;
&lt;h1 id=&#34;deploying-to-a-separate-repository-with-netlify-and-make&#34;&gt;Deploying to a separate repository with Netlify and Make&lt;/h1&gt;
&lt;p&gt;We can get Netlify to do our bidding by using a Makefile, which we&amp;rsquo;ll run with Netlify&amp;rsquo;s build command.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what our &lt;code&gt;Makefile&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SHELL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;/bin/bash
&lt;span class=&#34;nv&#34;&gt;BASEDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;OUTPUTDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clean&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Removing public directory&amp;#34;&lt;/span&gt;
rm -rf &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;BASEDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_repository&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;get_repository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Getting public repository&amp;#34;&lt;/span&gt;
git clone https://github.com/gh-username/gh-username.github.io.git public
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Generating site&amp;#34;&lt;/span&gt;
hugo --gc --minify
&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deploy&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Preparing commit&amp;#34;&lt;/span&gt;
@cd &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;you@youremail.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Name&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Deploy via Makefile&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push -f -q https://&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;GITHUB_TOKEN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;@github.com/gh-username/gh-username.github.io.git master
@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pushed to remote&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To preserve the Git history of our separate GitHub Pages repository, we&amp;rsquo;ll first clone it, build our new Hugo site to it, and then push it back to the Pages repository. This script first removes any existing &lt;code&gt;public/&lt;/code&gt; folder that might contain files or a Git history. It then clones our Pages repository to &lt;code&gt;public/&lt;/code&gt;, builds our Hugo site (essentially updating the files in &lt;code&gt;public/&lt;/code&gt;), then takes care of committing the new site to the Pages repository.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;deploy&lt;/code&gt; section, you&amp;rsquo;ll notice lines starting with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. These are chained commands. Since Make &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Execution.html#Execution&#34;&gt;invokes a new sub-shell for each line&lt;/a&gt;, it starts over with every new line from our root directory. To get our &lt;code&gt;cd&lt;/code&gt; to stick and avoid running our Git commands in the project root directory, we&amp;rsquo;re chaining the commands and using the backslash character to &lt;a href=&#34;http://clarkgrubb.com/makefile-style-guide#breaking-long-lines&#34;&gt;break long lines&lt;/a&gt; for readability.&lt;/p&gt;
&lt;p&gt;By chaining our commands, we&amp;rsquo;re able to &lt;a href=&#34;https://stackoverflow.com/questions/6116548/how-to-tell-git-to-use-the-correct-identity-name-and-email-for-a-given-project&#34;&gt;configure our Git identity&lt;/a&gt;, add all our updated files, and create a commit for our Pages repository.&lt;/p&gt;
&lt;p&gt;Similarly to using Travis CI, we&amp;rsquo;ll need to pass in a &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;GitHub personal access token&lt;/a&gt; to push to our public GitHub Pages repository - only Netlify doesn&amp;rsquo;t provide a straightforward way to encrypt the token in our Makefile.&lt;/p&gt;
&lt;p&gt;Instead, we&amp;rsquo;ll use Netlify&amp;rsquo;s &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#build-environment-variables&#34;&gt;Build Environment Variables&lt;/a&gt;, which live safely in our site settings in the Netlify app. We can then call our token variable in the Makefile. We use it to push (quietly, to avoid printing the token in logs) to our Pages repository by &lt;a href=&#34;https://stackoverflow.com/questions/44773415/how-to-push-a-commit-to-github-from-a-circleci-build-using-a-personal-access-tok&#34;&gt;passing it in the remote URL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid printing the token in Netlify&amp;rsquo;s logs, we suppress &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Echoing.html#Echoing&#34;&gt;recipe echoing&lt;/a&gt; for that line with the leading &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;With your Makefile in the root of your private GitHub repository, you can set up Netlify to run it for you.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-netlify&#34;&gt;Setting up Netlify&lt;/h2&gt;
&lt;p&gt;Getting set up with Netlify via the &lt;a href=&#34;https://app.netlify.com/&#34;&gt;web UI&lt;/a&gt; is straightforward. Once you sign in with GitHub, choose the private GitHub repository where your Hugo site lives. The next page Netlify takes you to lets you enter deploy settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-new-site.png&#34; alt=&#34;Create a new site page&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can specify the build command that will run your Makefile (&lt;code&gt;make all&lt;/code&gt; for this example). The branch to deploy and the publish directory don&amp;rsquo;t matter too much in our specific case, since we&amp;rsquo;re only concerned with pushing to a separate repository. You can enter the typical &lt;code&gt;master&lt;/code&gt; deploy branch and &lt;code&gt;public&lt;/code&gt; publish directory.&lt;/p&gt;
&lt;p&gt;Under &amp;ldquo;Advanced build settings&amp;rdquo; click &amp;ldquo;New variable&amp;rdquo; to add your GitHub personal access token as a Build Environment Variable. In our example, the variable name is &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. Click &amp;ldquo;Deploy site&amp;rdquo; to make the magic happen.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve already previously set up your repository with Netlify, find the settings for Continuous Deployment under Settings &amp;gt; Build &amp;amp; deploy.&lt;/p&gt;
&lt;p&gt;Netlify will build your site each time you push to the private repository. If you don&amp;rsquo;t want a particular commit to trigger a build, &lt;a href=&#34;https://www.netlify.com/docs/continuous-deployment/#skipping-a-deploy&#34;&gt;add &lt;code&gt;[skip ci]&lt;/code&gt; in your Git commit message&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;same-same-but-different&#34;&gt;Same same but different&lt;/h2&gt;
&lt;p&gt;One effect of using Netlify this way is that your site will be built in two places: one is the separate, public GitHub Pages repository that the Makefile pushes to, and the other is your Netlify site that deploys on their CDN from your linked private GitHub repository. The latter is useful if you&amp;rsquo;re going to play with &lt;a href=&#34;https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/&#34;&gt;Deploy Previews&lt;/a&gt; and other Netlify features, but those are outside the scope of this post.&lt;/p&gt;
&lt;p&gt;The main point is that your GitHub Pages site is now updated in your public repo. Yay!&lt;/p&gt;
&lt;h1 id=&#34;go-forth-and-deploy-fearlessly&#34;&gt;Go forth and deploy fearlessly&lt;/h1&gt;
&lt;p&gt;I hope the effect of this new information is that you feel more able to update your sites, wherever you happen to be. The possibilities are endless - at home on your couch with your laptop, out cafe-hopping with your iPad, or in the middle of a first date on your phone. Endless!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;date-deploy.png&#34; alt=&#34;Don&#39;t update your site from your phone on a date&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Don&amp;rsquo;t do stuff on your phone when you&amp;rsquo;re on a date. Not if you want a second one, anyway.&lt;/p&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/cover_hua0c104d819921f3f45be661545f8932d_2244173_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A remote sync solution for iOS and Linux: Git and Working Copy</title><link>https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/</link><pubDate>Fri, 15 Mar 2019 11:55:28 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/</guid><description>How to set up a cross-platform cloud sync solution for working anywhere using Git on iOS.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/cover_remote-sync_hu1984111f2d75b603219adcc3d215dc57_618766_640x0_resize_box_2.png" width="640" height="418"/>
&lt;p&gt;I previously wrote about a (hackish) way to use a &lt;a href=&#34;https://victoria.dev/blog/how-i-set-up-a-single-dropbox-folder-on-my-dual-boot-windows-and-linux-system/&#34;&gt;single Dropbox folder on a dual-boot Windows and Linux machine&lt;/a&gt;. I&amp;rsquo;ve since &lt;del&gt;gained some sense&lt;/del&gt; gone full Linux with Ubuntu 18.04 LTS, but the Dropbox set up seems to have stopped being an option in any case. Fortunately, I&amp;rsquo;ve since found a much better (far less hackish) way to remote-sync files across different file systems. Reflecting my current set up, I&amp;rsquo;m talking about iOS (iPad and iPhone) and my Linux machine.&lt;/p&gt;
&lt;p&gt;The new sync system is based on Git, very customizable, and conveniently extensible. Beyond text files, you can sync anything that Git can (which is almost everything - if you want to edit your &lt;code&gt;.gitignore&lt;/code&gt;d files on the go I&amp;rsquo;m not sure I can help). If you&amp;rsquo;re already familiar with Git, getting set up will be a walk in the park. If Git is new to you, I think these tools help make the concepts of Git cloning, pulling, and pushing straightforward to understand.&lt;/p&gt;
&lt;h1 id=&#34;components&#34;&gt;Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://workingcopy.app&#34;&gt;Working Copy app&lt;/a&gt; ($15.99 one-time pro-unlock and well worth it, iOS only)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ia.net/writer&#34;&gt;iA Writer app&lt;/a&gt; ($8.99 one-time purchase for iOS, also available on Mac, Windows, and Android)&lt;/li&gt;
&lt;li&gt;GitHub repositories (&lt;a href=&#34;https://github.blog/2019-01-07-new-year-new-github/&#34;&gt;private&lt;/a&gt; or public, both free)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was inspired by &lt;a href=&#34;https://www.macstories.net/ios/my-markdown-writing-and-collaboration-workflow-powered-by-working-copy-3-6-icloud-drive-and-github/&#34;&gt;this article&lt;/a&gt; as well as &lt;a href=&#34;http://blog.joncairns.com/2011/10/how-to-use-git-submodules/&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;get-set-up&#34;&gt;Get set up&lt;/h1&gt;
&lt;p&gt;Here are the steps to setting up that I&amp;rsquo;ll walk you through in this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create your remote repository&lt;/li&gt;
&lt;li&gt;Clone repository to iPad with Working Copy&lt;/li&gt;
&lt;li&gt;Open and edit files with iA Writer&lt;/li&gt;
&lt;li&gt;Push changes back to remote&lt;/li&gt;
&lt;li&gt;Pull changes from repository on your computer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This system is straightforward to set up whether you&amp;rsquo;re a command line whiz or just getting into Git. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id=&#34;create-your-remote-repository&#34;&gt;Create your remote repository&lt;/h2&gt;
&lt;p&gt;GitHub now offers free &lt;a href=&#34;https://github.blog/2019-01-07-new-year-new-github/&#34;&gt;private repositories&lt;/a&gt; for up to three collaborators. Choose &amp;ldquo;Private&amp;rdquo; on GitHub&amp;rsquo;s repository creation page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github-private-repo.png#screenshot&#34; alt=&#34;Selection options for public and private repository&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Create the repository. If you&amp;rsquo;d like to, you can follow GitHub&amp;rsquo;s instructions to push some files to it from your computer, or you can add files later from your iPad.&lt;/p&gt;
&lt;h2 id=&#34;clone-repository-to-ipad-with-working-copy&#34;&gt;Clone repository to iPad with Working Copy&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;https://workingcopy.app&#34;&gt;Working Copy&lt;/a&gt; from the App Store. It&amp;rsquo;s one of the more expensive apps I&amp;rsquo;ve purchased, but I think it&amp;rsquo;s well worth it. Developer &lt;a href=&#34;https://twitter.com/palmin&#34;&gt;Anders Borum&lt;/a&gt; has a steady track record of frequent updates and incorporating the latest features for iOS apps, like &lt;a href=&#34;https://workingcopy.app/manual/dragdrop&#34;&gt;drag and drop&lt;/a&gt; on iPad. I think he&amp;rsquo;s fairly priced his product in light of the work he puts into maintaining and enhancing it.&lt;/p&gt;
&lt;p&gt;In Working Copy, find the gear icon in the top left corner and touch to open Settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-settings.png#screenshot&#34; alt=&#34;Settings menu in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tap on SSH Keys, and you&amp;rsquo;ll see this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-ssh.png#screenshot&#34; alt=&#34;SSH Key for Working Copy on iPad&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SSH keys, or Secure Shell keys, are access credentials used in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH protocol&lt;/a&gt;. Your key is a password that your device will use to securely connect with your remote repository host - GitHub, in our example. Since anyone with your SSH keys can potentially pretend to be you and gain access to your files, it&amp;rsquo;s important not to share them accidentally, like in a screenshot on a blog post.&lt;/p&gt;
&lt;p&gt;Tap on the second line that looks like &amp;ldquo;WorkingCopy@iPad-xxxxxxxx&amp;rdquo; to get this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-ssh-connect.png#screenshot&#34; alt=&#34;Connect to GitHub or Bitbucket in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Working Copy supports easy connection to both BitBucket and GitHub. Tap &amp;ldquo;Connect With GitHub&amp;rdquo; or BitBucket to bring up some familiar sign-in screens that will authorize Working Copy to access your account(s).&lt;/p&gt;
&lt;p&gt;Once connected, tap the &amp;ldquo;+&amp;rdquo; symbol in the top right of the side bar to add a new repository. Choose &amp;ldquo;Clone repository&amp;rdquo; to bring up this screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-read-repos.png#screenshot&#34; alt=&#34;Loading repositories from remote&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, you can either manually input the remote URL, or simply choose from the list of repositories that Working Copy fetches from your connected account. When you make your choice, the app clones the repository to your iPad and it will show up in the sidebar. You&amp;rsquo;re connected!&lt;/p&gt;
&lt;h2 id=&#34;open-and-edit-files-with-ia-writer&#34;&gt;Open and edit files with iA Writer&lt;/h2&gt;
&lt;p&gt;One of the (many) reasons I adore &lt;a href=&#34;https://ia.net/writer&#34;&gt;iA Writer&lt;/a&gt; is its ability to select your freshly cloned remote repository as a Library Location. To do this in the iA Writer app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the main Library list, in the top right of the sidebar, tap &amp;ldquo;Edit&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Add Location&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;A helpful popup appears. Tap OK.&lt;/li&gt;
&lt;li&gt;From the Working Copy location, tap &amp;ldquo;Select&amp;rdquo; in the top right, then choose the repository folder.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Open&amp;rdquo;, then &amp;ldquo;Done&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your remote repository now appears as a Location in the sidebar. Tap on it to work within this directory.&lt;/p&gt;
&lt;p&gt;While inside this location, new files you create (by tapping the pencil-and-paper icon in the top right corner) will be saved to this folder locally. As you work, iA Writer automatically saves your progress. Next, we&amp;rsquo;ll look at pushing those files and changes back to your remote.&lt;/p&gt;
&lt;h2 id=&#34;push-changes-back-to-remote&#34;&gt;Push changes back to remote&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve made changes to your files, open Working Copy again. You should see a yellow dot on your changed repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-changed-repo.png#screenshot&#34; alt=&#34;Yellow dot indicating changes to repository&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tap on your repository name, then on &amp;ldquo;Repository Status and Configuration&amp;rdquo; at the top of the sidebar. Your changed files will be indicated by yellow dots or green &amp;ldquo;+&amp;rdquo; symbols. These mean that you&amp;rsquo;ve modified or added files, respectively.&lt;/p&gt;
&lt;p&gt;Working Copy is a sweet iOS Git client, and you can tap on your files to see additional information including a comparison of changes (&amp;ldquo;diff&amp;rdquo;) as well as status and Git history. You can even edit files right within the app, with &lt;a href=&#34;https://workingcopyapp.com/manual/edit&#34;&gt;syntax highlighting&lt;/a&gt; for its many supported languages. For now, we&amp;rsquo;ll look at how to push your changed work to your remote repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-changes-to-commit.png#screenshot&#34; alt=&#34;Changes to commit&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the &amp;ldquo;Repository Status and Configuration&amp;rdquo; page, you&amp;rsquo;ll see right at the top that there are changes to be committed. If you&amp;rsquo;re new to Git, this is like &amp;ldquo;saving your changes&amp;rdquo; to your Git history, something typically done with the terminal command &lt;a href=&#34;https://git-scm.com/docs/git-commit&#34;&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;. You can think of this as saving the files that we&amp;rsquo;ll want to send to the GitHub repository. Tap &amp;ldquo;Commit changes.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-commit-changes.png#screenshot&#34; alt=&#34;Add a commit message and select files to commit&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Enter your commit message, and select the files you want to add. Turn on the &amp;ldquo;Push&amp;rdquo; switch to send everything to your remote repository when you commit the files. Then tap &amp;ldquo;Commit.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a progress bar as your files are uploaded, and then a confirmation message on the status screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-commit-success.png#screenshot&#34; alt=&#34;Commit success message&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! Your changes are now present in your remote repository on GitHub. You&amp;rsquo;ve successfully synced your files remotely!&lt;/p&gt;
&lt;h2 id=&#34;pull-changes-from-repository-on-your-computer&#34;&gt;Pull changes from repository on your computer&lt;/h2&gt;
&lt;p&gt;To bring your updated files full circle to your computer, you pull them from the GitHub repository. I prefer to use the terminal for this as it&amp;rsquo;s quick and easy, but GitHub also offers a &lt;a href=&#34;https://help.github.com/en/desktop/getting-started-with-github-desktop&#34;&gt;graphical client&lt;/a&gt; if terminal commands seem a little alien for now.&lt;/p&gt;
&lt;p&gt;If you started with the GitHub repository, you can clone it to a folder on your computer by following &lt;a href=&#34;https://help.github.com/en/articles/cloning-a-repository&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;staying-in-sync&#34;&gt;Staying in sync&lt;/h2&gt;
&lt;p&gt;When you update your work on your computer, you&amp;rsquo;ll use Git to push your changes to the remote repository. To do this, you can use GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/desktop/getting-started-with-github-desktop&#34;&gt;graphical client&lt;/a&gt;, or follow &lt;a href=&#34;https://help.github.com/en/articles/adding-an-existing-project-to-github-using-the-command-line&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On your iOS device, Working Copy makes pulling and pushing as simple as a single tap. On the Repository Status and Configuration page, tap on the remote name under &amp;ldquo;Remotes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;workingcopy-git-remote.png#screenshot&#34; alt=&#34;List of Remotes in Working Copy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then tap &amp;ldquo;Synchronize&amp;rdquo;. Working Copy will take care of the details of pushing your committed changes and/or pulling any new changes it finds from the remote repository.&lt;/p&gt;
&lt;h1 id=&#34;not-bad-right&#34;&gt;Not bad, right?&lt;/h1&gt;
&lt;p&gt;For a Git-based developer and work-anywhere-aholic like me, this set up couldn&amp;rsquo;t be more convenient. Working Copy really makes staying in sync with my remote repositories seamless, nevermind the ability to work with any of my GitHub repos on the go.&lt;/p&gt;
&lt;p&gt;For editing on the go, here&amp;rsquo;s a useful tip. Use &lt;code&gt;.gitignore&lt;/code&gt; in your sync repository if you don&amp;rsquo;t need to move large files, like images, around with you. This will stop the ignored files from being pushed to GitHub and pulled to your iOS device - they&amp;rsquo;ll only remain on your computer&amp;rsquo;s larger hard drive. The &lt;code&gt;.gitignore&lt;/code&gt; file of one of my sync repositories looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*.png
*.jpeg
*.jpg
*.mp4
*.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means all the media files stay on my computer, and I can pull just the text file content to my iPad from GitHub to work on while I&amp;rsquo;m out and about.&lt;/p&gt;
&lt;p&gt;I most recently used this set up to get some writing done while hanging out in the atrium of Washington DC&amp;rsquo;s National Portrait Gallery, which is pleasantly photogenic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;washington-portrait-gallery.jpg&#34; alt=&#34;The atrium of the National Portrait Gallery&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;I&amp;rsquo;d love to hear&lt;/a&gt; how this set up works for you and how you use it. In the meantime, happy working!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/cover_remote-sync_hu1984111f2d75b603219adcc3d215dc57_618766_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>On doing great things</title><link>https://victoria.dev/blog/on-doing-great-things/</link><pubDate>Fri, 08 Mar 2019 18:36:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/on-doing-great-things/</guid><description>Some thoughts inspired by International Women&#39;s Day, Grace Hopper, and making contributions to the world of tech.</description><content:encoded>
&lt;p&gt;It&amp;rsquo;s International Women&amp;rsquo;s Day, and I&amp;rsquo;m thinking about Grace Hopper.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Grace_Hopper&#34;&gt;Grace Hopper&lt;/a&gt; was an amazing lady who did great things. She envisioned and helped create programming languages that translate English terms into machine code. She persevered in her intention to join the US Navy from the time she was rejected at 34 years old, to being sworn in to the US Navy Reserve three years later, to retiring with the rank of commander at age 60&amp;hellip; then was recalled (twice) and promoted to the rank of captain at the age of 67. She advocated for distributed networks and developed computer testing standards we use today, among other achievements too numerous to list here.&lt;/p&gt;
&lt;p&gt;By my read, throughout her life, she kept her focus on her work. She did great things because she could do them, and felt some duty to do them. Her work speaks for itself.&lt;/p&gt;
&lt;p&gt;I recently came across a sizeable rock denoting a rather small, quiet park. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;grace-murray-hopper-park.jpeg#center&#34; alt=&#34;Signage on a rock denoting Grace Murray Hopper Park&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When I first saw this park, I thought it in no way did this great lady justice. But upon some reflection, its lack of assumption and grandeur grew on me. And today, it drew to the forefront something that&amp;rsquo;s been on my mind.&lt;/p&gt;
&lt;p&gt;I try and contribute regularly to the wide world of technology, usually through building things, writing, and mentorship. I sometimes get asked to participate in female-focused tech events. I hear things like, &amp;ldquo;too few developers are women,&amp;rdquo; or &amp;ldquo;we need more women in blockchain,&amp;rdquo; or &amp;ldquo;we need more female coders.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;For some time I haven&amp;rsquo;t been sure how to respond, because while my answer isn&amp;rsquo;t &amp;ldquo;yes,&amp;rdquo; it&amp;rsquo;s not exactly &amp;ldquo;no,&amp;rdquo; either. It&amp;rsquo;s really, &amp;ldquo;no, because&amp;hellip;&amp;rdquo; and it&amp;rsquo;s because I&amp;rsquo;m afraid. I&amp;rsquo;m afraid of misrepresenting myself, my values, and my goals.&lt;/p&gt;
&lt;p&gt;Discrimination and racism are real things. They exist in the minds and attitudes of a very small percentage of very loud people, as they always will. These people aren&amp;rsquo;t, however, the majority. They are small.&lt;/p&gt;
&lt;p&gt;I think that on the infrequent occasions when we encounter these people, we should do our best to lead by example. We should have open minds, tell our stories, listen to theirs. Try and learn something. That&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;When I present myself, I don&amp;rsquo;t point out that I&amp;rsquo;m a woman. I don&amp;rsquo;t align myself with &amp;ldquo;women in tech&amp;rdquo; or seek to represent them. I don&amp;rsquo;t go to women-only meetings or support organizations that discriminate against men, or anyone at all. It&amp;rsquo;s not because I&amp;rsquo;m insecure as a woman, or ashamed that I&amp;rsquo;m a woman, or some other inflammatory adjective that lately shows up in conjunction with being female. It&amp;rsquo;s because I&amp;rsquo;ve no reason to point out my gender, any more than needing to point out that my hair is black, or that I&amp;rsquo;m short. It&amp;rsquo;s obvious and simultaneously irrelevant.&lt;/p&gt;
&lt;p&gt;When I identify with a group, I talk about the go-getters who wake up at 0500 every day and go work out - no matter the weather, or whether they feel like it. I tell stories about the people I met in different countries around the world, who left home, struck out on their own, and had an adventure, because they saw value in the experience. I identify with people who constantly build things, try things, design and make things, and then share those things with the world, because they love to do so. This is how I see myself. This is what matters to me.&lt;/p&gt;
&lt;p&gt;Like the unassuming park named after an amazing woman, when truly great things are done, they are done relatively quietly. Not done for the fanfare of announcing them to the world, but for the love of the thing itself. So go do great things, please. The world still needs them.&lt;/p&gt;</content:encoded></item><item><title>Git commit practices your future self will thank you for</title><link>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</link><pubDate>Mon, 06 Aug 2018 08:54:56 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/</guid><description>How squash commits, vimrc, and git tags can help you make great Git commits.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/cover_git-commit-art_hu3c5d7a1ac69b5f3a44f90a6688078cc1_89530_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?&lt;/p&gt;
&lt;p&gt;If, like me, there &lt;em&gt;might&lt;/em&gt; be one or two less than stellar ones, well, we&amp;rsquo;re only human. A nice part of being human is having the ability to learn new and complex things fairly quickly, and continuously improve ourselves. In that spirit, I&amp;rsquo;d like to share some things I&amp;rsquo;ve learned about creating clean, useful, and responsible Git commits.&lt;/p&gt;
&lt;h1 id=&#34;what-does-it-mean-to-commit-responsibly&#34;&gt;What does it mean to commit responsibly?&lt;/h1&gt;
&lt;p&gt;Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today. Being responsible can mean a lot of things to different people, so I enlisted some of &lt;a href=&#34;https://mastodon.technology/@victoria/&#34;&gt;mastodon.technology&lt;/a&gt; and &lt;a href=&#34;https://dev.to/victoria/what-does-it-mean-to-commit-responsibly-22mi&#34;&gt;dev.to&lt;/a&gt; to help round out my list. From those (really great) threads, I distilled these main points:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Committing responsibly&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide and/or use tests to avoid committing bugs or broken builds&lt;/li&gt;
&lt;li&gt;Write clean code that meets style specifications&lt;/li&gt;
&lt;li&gt;Use descriptive commit messages that reference related discussion&lt;/li&gt;
&lt;li&gt;Make only one change per commit and avoid including unrelated changes&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of the above is achieved through maintaining a short feedback loop that helps you improve your code quality while staying accountable to yourself. &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/&#34;&gt;I wrote another article&lt;/a&gt; that discusses this in detail, especially the part about &lt;a href=&#34;https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/#block-out-time-for-code-review&#34;&gt;code review&lt;/a&gt;. Other items on this list have to do specifically with making commits in Git. There are some features of Git that can benefit us in these areas, as can harnessing tools like Vim. I&amp;rsquo;ll cover those topics here.&lt;/p&gt;
&lt;p&gt;If the majority of your Git commits so far have been created with something like &lt;code&gt;git commit -m &amp;quot;Bug fixes&amp;quot;&lt;/code&gt; then this is the article for you!&lt;/p&gt;
&lt;h1 id=&#34;write-great-git-commit-messages-with-a-template&#34;&gt;Write great Git commit messages with a template&lt;/h1&gt;
&lt;p&gt;I think &lt;a href=&#34;https://github.com/torvalds/subsurface-for-dirk/commit/b6590150d68df528efd40c889ba6eea476b39873&#34;&gt;Linus&lt;/a&gt; would be very happy if we didn&amp;rsquo;t use &lt;code&gt;git commit -m &amp;quot;Fix bug&amp;quot;&lt;/code&gt; in a public repository ever again. As very well put in &lt;a href=&#34;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;this classic post&lt;/a&gt; and &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;the seven rules of a great Git commit message&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A properly formed Git commit subject line should always be able to complete the following sentence:&lt;/p&gt;
&lt;p&gt;If applied, this commit will &lt;em&gt;your subject line here&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://who-t.blogspot.com/2009/12/on-commit-messages.html&#34;&gt;This other classic post&lt;/a&gt; also discusses three questions that the body of the commit message should answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why is it necessary?&lt;br /&gt;
How does it address the issue?&lt;br /&gt;
What effects does the patch have?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be a lot to remember to cover, but there&amp;rsquo;s a slick way to have these prompts at hand right when you need it. You can set up a commit message template by using the &lt;code&gt;commit.template&lt;/code&gt; &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&#34;&gt;configuration value&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To set it, configure Git to use a template file (for example, &lt;code&gt;.gitmessage&lt;/code&gt; in your home directory), then create the template file with Vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global commit.template ~/.gitmessage
vim ~/.gitmessage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run &lt;code&gt;git commit&lt;/code&gt; without the &lt;code&gt;-m&lt;/code&gt; message flag, the editor will open with our helpful template ready to go. Here&amp;rsquo;s my commit message template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# If applied, this commit will...
# [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]
# Why is it necessary? (Bug fix, feature, improvements?)
-
# How does the change address the issue?
-
# What side effects does this change have?
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m a fan of this format because commented lines are not included in the final message. I can simply fill in the blank lines with text and bullet points under the prompts, and it comes out looking something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Fix #16 missing CSS variables
- Fix for unstyled elements
- Add background color, height for code blocks
- Only affects highlight class&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reference-related-discussion&#34;&gt;Reference related discussion&lt;/h2&gt;
&lt;p&gt;Issue trackers in &lt;a href=&#34;https://help.github.com/articles/closing-issues-using-keywords/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html&#34;&gt;Bitbucket&lt;/a&gt; both recognize the keywords &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;fix&lt;/code&gt;, and &lt;code&gt;resolve&lt;/code&gt; followed immediately by the issue or pull request number. These keywords conveniently help us close the referenced issue or pull request, and this helps maintain a clear trail of changes. &lt;a href=&#34;https://about.gitlab.com/2016/03/08/gitlab-tutorial-its-all-connected/&#34;&gt;GitLab&lt;/a&gt;, and issue trackers like &lt;a href=&#34;https://confluence.atlassian.com/jirasoftwarecloud/referencing-issues-in-your-development-work-777002789.html&#34;&gt;Jira&lt;/a&gt; offer similar functionalities.&lt;/p&gt;
&lt;h2 id=&#34;use-helpful-vim-settings-for-git-commit-messages&#34;&gt;Use helpful Vim settings for git commit messages&lt;/h2&gt;
&lt;p&gt;By adding a few lines to our Vim configuration, we can make writing great git commit messages easy. We can add these lines to &lt;code&gt;~/.vimrc&lt;/code&gt; to turn on syntax highlighting in general, and spell check and text wrapping for commit messages in particular:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vimrc&#34; data-lang=&#34;vimrc&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Filetype detection, plugins, and indent rules&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filetype&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plugin&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indent&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Syntax highlighting&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34; Spell check and line wrap just for git commit messages&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;autocmd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Filetype&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gitcommit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setlocal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spell&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;textwidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;72&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;rsquo;re curious, &lt;a href=&#34;https://gist.github.com/victoriadrake/81699ada73748ecf7603c7708a5385ff&#34;&gt;my full &lt;code&gt;~/.vimrc&lt;/code&gt; is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other editors have settings that can help us out as well. I came across &lt;a href=&#34;https://dev.to/shreyasminocha/how-i-do-my-git-commits-34d&#34;&gt;these for Sublime Text 3&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/vscode-docs/blob/master/docs/getstarted/tips-and-tricks.md#language-specific-settings&#34;&gt;language specific settings for VS Code&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;one-change-per-commit-how-to-squash-git-commits&#34;&gt;One change per commit: how to squash Git commits&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;git-commit-squash.png&#34; alt=&#34;A doodle of squash&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Still life Git&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get one thing out of the way first: rewriting Git history just for the sake of having a pretty tree, especially with public repositories, is generally not advisable. It&amp;rsquo;s kind of like going back in time, where changes you make to your version of the project cause it to look completely different from a version that someone else forked from a point in history that you&amp;rsquo;ve now erased - I mean, haven&amp;rsquo;t you seen &lt;em&gt;Back to the Future Part II&lt;/em&gt;? (If you&amp;rsquo;d rather maintain that only one &lt;em&gt;Back to the Future&lt;/em&gt; movie was ever made, thus sparing your future self from having to watch the sequels, I get it.)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the main point. If you&amp;rsquo;ve pushed messy commits to a public repository, I say go right ahead and leave them be, instead of complicating things further. (We all learn from our embarrassments, especially the public ones - I&amp;rsquo;m looking at you, past-Vicky.) If your messy commits currently only exist on your local version, great! We can tidy them up into one clean, well-described commit that we&amp;rsquo;ll be proud to push, and no one will be the wiser.&lt;/p&gt;
&lt;p&gt;There are a couple different ways to squash commits, and choosing the appropriate one depends on what we need to achieve.&lt;/p&gt;
&lt;p&gt;The following examples are illustrated using &lt;code&gt;git log --graph&lt;/code&gt;, with some options for brevity. We can set a handy alias to see this log format in our terminal with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global alias.plog &lt;span class=&#34;s2&#34;&gt;&amp;#34;log --graph --pretty=format:&amp;#39;%h -%d %s %n&amp;#39; --abbrev-commit --date=relative --branches&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we just do &lt;code&gt;git plog&lt;/code&gt; to see the pretty log.&lt;/p&gt;
&lt;h2 id=&#34;method-1-one-commit-to-rule-the-master-branch&#34;&gt;Method #1: one commit to rule the master branch&lt;/h2&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;re committing directly to master&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t intend to open a pull request to merge a feature&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t want to preserve history of branches or changes we haven&amp;rsquo;t yet pushed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method takes a Git tree that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 3e8fd79 - (HEAD -&amp;gt; master) Fix a thing
|
* 4f0d387 - Tweak something
|
* 0a6b8b3 - Merge branch &amp;#39;new-article&amp;#39;
|\
| * 33b5509 - (new-article) Update article again again
| |
| * 1782e63 - Update article again
| |
| * 3c5b6a8 - Update article
| |
* | f790737 - (master) Tweak unrelated article
|/
|
* 65af7e7 Add social media link
|
* 0e3fa32 (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And makes it look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 7f9a127 - (HEAD -&amp;gt; master) Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s how to do it - hold on to your hoverboards, it&amp;rsquo;s super complicated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset --soft origin/master
git commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yup that&amp;rsquo;s all. We can delete the unwanted branch with &lt;code&gt;git branch -D new-article&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;method-2-not-that-much&#34;&gt;Method #2: not &lt;em&gt;that&lt;/em&gt; much!&lt;/h2&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want to squash the last &lt;em&gt;x&lt;/em&gt; commits but not &lt;em&gt;all&lt;/em&gt; commits since &lt;code&gt;origin/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We want to open a pull request to merge a branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method takes a Git tree that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 13a070f - (HEAD -&amp;gt; new-article) Finish new article
|
* 78e728a - Edit article draft
|
* d62603c - Add example
|
* 1aeb20e - Update draft
|
* 5a8442a - Add new article draft
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And makes it look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 90da69a - (HEAD -&amp;gt; new-article) Add new article
|
| * 65af7e7 - (master) Add social media link
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To squash the last five commits on branch &lt;code&gt;new-article&lt;/code&gt; into one, we use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset --soft HEAD~5
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;New message for the combined commit&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;--soft&lt;/code&gt; leaves our files untouched and staged, and &lt;code&gt;5&lt;/code&gt; can be thought of as &amp;ldquo;the number of previous commits I want to combine.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We can then do &lt;code&gt;git merge master&lt;/code&gt; and create our pull request.&lt;/p&gt;
&lt;h2 id=&#34;method-3-getting-picky&#34;&gt;Method #3: getting picky&lt;/h2&gt;
&lt;p&gt;Say we had a really confusing afternoon and our Git tree looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* dc89918 - (HEAD -&amp;gt; master) Add link
|
* 9b6780f - Update image asset
|
* 6379956 - Fix CSS bug
|
* 16ee1f3 - Merge master into branch
|\
| |
| * ccec365 - Update list page
| |
* | 033dee7 - Fix typo
| |
* | 90da69a - Add new article
|/
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to retain some of this history, but clean up the commits. We also want to change the messages for some of the commits. To achieve this, we&amp;rsquo;ll use &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is appropriate when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want to squash only some commits&lt;/li&gt;
&lt;li&gt;We want to edit previous commit messages&lt;/li&gt;
&lt;li&gt;We want to delete or reorder specific commits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git &lt;code&gt;rebase&lt;/code&gt; is a powerful tool, and handy once we&amp;rsquo;ve got the hang of it. To change all the commits since &lt;code&gt;origin/master&lt;/code&gt;, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase -i origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, we can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase -i 0e3fa32&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the commit hash is the last commit we want to retain as-is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; option lets us run the interactive rebase tool, which launches our editor with, essentially, a script for us to modify. We&amp;rsquo;ll see a list of our commits in reverse order to the git log, with the oldest at the top:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;pick 90da69a Add new article
pick 033dee7 Fix typo
pick ccec365 Update list page
pick 6379956 Fix CSS bug
pick 9b6780f Update image asset
pick dc89918 Add link
# Rebase 0e3fa32..dc89918 onto 0e3fa32 (6 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &amp;#34;squash&amp;#34;, but discard this commit&amp;#39;s log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
#
~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The comments give us a handy guide as to what we&amp;rsquo;re able to do. For now, let&amp;rsquo;s squash the commits with small changes into the more significant commits. In our editor, we change the script to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;pick 90da69a Add new article
squash 033dee7 Fix typo
pick ccec365 Update list page
squash 6379956 Fix CSS bug
squash 9b6780f Update image asset
squash dc89918 Add link&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we save the changes, the interactive tool continues to run. It will execute our instructions in sequence. In this case, we see the editor again with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# This is a combination of 2 commits.
# This is the 1st commit message:
Add new article
# This is the commit message #2:
Fix typo
# Please enter the commit message for your changes. Lines starting
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.
#
# interactive rebase in progress; onto 0e3fa32
# Last commands done (2 commands done):
# pick 90da69a Add new article
# squash 033dee7 Fix typo
# Next commands to do (4 remaining commands):
# pick ccec365 Update list page
# squash 6379956 Fix CSS bug
# You are currently rebasing branch &amp;#39;master&amp;#39; on &amp;#39;0e3fa32&amp;#39;.
#
# Changes to be committed:
# modified: ...
#
~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s our chance to create a new commit message for this first squash, if we want to. Once we save it, the interactive tool will go on to the next instructions. Unless&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;[detached HEAD 3cbad01] Add new article
1 file changed, 129 insertions(+), 19 deletions(-)
Auto-merging content/dir/file.md
CONFLICT (content): Merge conflict in content/dir/file.md
error: could not apply ccec365... Update list page
Resolve all conflicts manually, mark them as resolved with
&amp;#34;git add/rm &amp;lt;conflicted_files&amp;gt;&amp;#34;, then run &amp;#34;git rebase --continue&amp;#34;.
You can instead skip this commit: run &amp;#34;git rebase --skip&amp;#34;.
To abort and get back to the state before &amp;#34;git rebase&amp;#34;, run &amp;#34;git rebase --abort&amp;#34;.
Could not apply ccec365... Update list page&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, the tool offers some very helpful instructions. Once we fix the merge conflict, we can resume the process with &lt;code&gt;git rebase --continue&lt;/code&gt;. Our interactive rebase picks up where it left off.&lt;/p&gt;
&lt;p&gt;Once all the squashing is done, our Git tree looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 3564b8c - (HEAD -&amp;gt; master) Update list page
|
* 3cbad01 - Add new article
|
* 0e3fa32 - (origin/master, origin/HEAD) Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Phew, much better.&lt;/p&gt;
&lt;h1 id=&#34;git-stash&#34;&gt;Git stash&lt;/h1&gt;
&lt;p&gt;If we&amp;rsquo;re in the middle of some work and it&amp;rsquo;s not a good time to commit, but we need to switch branches, &lt;a href=&#34;https://git-scm.com/book/en/v1/Git-Tools-Stashing&#34;&gt;stashing&lt;/a&gt; can be a good option. Stashing lets us save our unfinished work without needing to create a half-assed commit. It&amp;rsquo;s like that pile of paper on your desk representing all the stuff you&amp;rsquo;ve been in the middle of doing since two weeks ago. Yup, that one.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s as easy as typing &lt;code&gt;git stash&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Saved working directory and index state WIP on master: 3564b8c Update list page&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The dirty work we&amp;rsquo;re in the midst of is safely tucked away, and our working directory is clean - just as it was after our last commit. To see what&amp;rsquo;s in our stash stack, we do &lt;code&gt;git stash list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;stash@{0}: WIP on master: 3564b8c Update list page
stash@{1}: WIP on master: 90da69a Add new article
stash@{2}: WIP on cleanup: 0e3fa32 Update theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To restore our work in progress, we use &lt;code&gt;git stash apply&lt;/code&gt;. Git will try and apply our most recent stashed work. To apply an older stash, we use &lt;code&gt;git stash apply stash@{1}&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is the stash to apply. If changes since stashing our work prevent the stash from reapplying cleanly, Git will give us a merge conflict to resolve.&lt;/p&gt;
&lt;p&gt;Applying a stash doesn&amp;rsquo;t remove it from our list. To remove a stash from our stack, we do &lt;code&gt;git stash drop stash@{0}&lt;/code&gt; where &lt;code&gt;0&lt;/code&gt; is the one we want to remove.&lt;/p&gt;
&lt;p&gt;We can also use &lt;code&gt;git stash pop&lt;/code&gt; to apply the most recent stash and then immediately remove it from the stack.&lt;/p&gt;
&lt;h1 id=&#34;tag-release-versions-using-annotated-git-tags&#34;&gt;Tag release versions using annotated Git tags&lt;/h1&gt;
&lt;p&gt;In the spirit of having a beautiful, clean Git history, there&amp;rsquo;s one more thing we can do to help make our commit log inspire infinite joy in its viewers. If you&amp;rsquo;ve never heard of &lt;code&gt;git tag&lt;/code&gt;, your master branch history might look like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 0377782 - Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - Add main content (#6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be nice if it looked like this instead?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;* 0377782 - (tag: v2.1.0) Update theme
|
* ecf8128 - Add about page (#25)
|
* 33e432f - Fix #23 navigation bug
|
* 08b853b - (tag: v2.0.0) Create blog section
|
* 63d18b4 - Add theme (#12)
|
* 233e23f - (tag: v1.1.0) Add main content (#6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can tag Git commits with anything, but tags are especially helpful for semantic versioning of releases. Sites like &lt;a href=&#34;https://help.github.com/articles/creating-releases/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ce/workflow/releases.html&#34;&gt;GitLab&lt;/a&gt; have pages for repositories that list tags, letting viewers of our project browse the release versions. This can be helpful for public projects to differentiate major releases, updates with bug fixes, or beta versions.&lt;/p&gt;
&lt;p&gt;There are two types of Git tags: lightweight and annotated. For adding a version tag to commits, we use annotated Git tags.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://git-scm.com/docs/git-tag&#34;&gt;Git tag documentation&lt;/a&gt; explains it this way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tag objects (created with -a, -s, or -u) are called &amp;ldquo;annotated&amp;rdquo; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &amp;ldquo;lightweight&amp;rdquo; tag is simply a name for an object (usually a commit object).&lt;/p&gt;
&lt;p&gt;Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can think of lightweight tags as bookmarks, and annotated tags as signed releases.&lt;/p&gt;
&lt;p&gt;For public repositories, annotated tags allow us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See who tagged the commit, which may differ from the commit author&lt;/li&gt;
&lt;li&gt;See all the tags with &lt;code&gt;git describe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Avoid conflicting tag names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create an annotated Git tag and attach it to our current (last) commit, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git tag -a v1.2.0 -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Clever release title&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tags the commit on our local repository. To push all annotated tags to the remote, we do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git push --follow-tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also set our Git configuration to push our annotated tags by default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global push.followTags true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we then want to skip pushing tags this time, we pass &lt;code&gt;--no-follow-tags&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;practice-responsible-commits&#34;&gt;Practice responsible commits&lt;/h1&gt;
&lt;p&gt;A little time invested in getting familiar with these tools and practices can make your commits even more useful and well-crafted. With a little practice, these processes will become second nature. You can make it even easier by creating a personal commit checklist on paper to keep handy while you work - or if that isn&amp;rsquo;t fun enough, &lt;a href=&#34;https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/&#34;&gt;make it an interactive pre-commit hook.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating clean, useful, and responsible Git commits says a lot about you. Especially in the current climate of remote work, Git commits may be a primary way that people interact with you over projects. With a little practice and effort, you can make your commit habits an even better reflection of your best work - work that is evidently created with care and pride.&lt;/p&gt;
&lt;h1 id=&#34;reference-links&#34;&gt;Reference links&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&#34;&gt;Git Tools - Rewriting History&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/docs/git-describe&#34;&gt;git-describe&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work&#34;&gt;Git Tools - Signing Your Work&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&#34;&gt;Customizing Git - Git Configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v1/Git-Tools-Stashing&#34;&gt;Git Tools - Stashing&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;Git Basics - Tagging&lt;/a&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/cover_git-commit-art_hu3c5d7a1ac69b5f3a44f90a6688078cc1_89530_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>An automatic interactive pre-commit checklist, in the style of infomercials</title><link>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</link><pubDate>Mon, 23 Jul 2018 09:38:09 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</guid><description>How to set up an interactive checklist using a Git pre-commit hook script.</description><content:encoded>
&lt;p&gt;What&amp;rsquo;s that, you say? You&amp;rsquo;ve become tired of regular old boring &lt;em&gt;paper checklists?&lt;/em&gt; Well, my friend, today is your lucky day! You, yes, &lt;em&gt;you,&lt;/em&gt; can become the proud owner of a brand-spanking-new &lt;em&gt;automatic interactive pre-commit hook checklist!&lt;/em&gt; You&amp;rsquo;re gonna love this! Your life will be so much easier! Just wait until your friends see you.&lt;/p&gt;
&lt;h1 id=&#34;what-s-a-pre-commit-hook&#34;&gt;What&amp;rsquo;s a pre-commit hook?&lt;/h1&gt;
&lt;p&gt;Did you know that nearly &lt;em&gt;1 out of 5 coders&lt;/em&gt; are too embarrassed to ask this question? Don&amp;rsquo;t worry, it&amp;rsquo;s perfectly normal. In the next 60 seconds we&amp;rsquo;ll tell you all you need to know to pre-commit with confidence.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;Git hook&lt;/a&gt; is a feature of Git that triggers custom scripts at useful moments. They can be used for all kinds of reasons to help you automate your work, and best of all, you already have them! In every repository that you initialize with &lt;code&gt;git init&lt;/code&gt;, you&amp;rsquo;ll have a set of example scripts living in &lt;code&gt;.git/hooks&lt;/code&gt;. They all end with &lt;code&gt;.sample&lt;/code&gt; and activating them is as easy as renaming the file to remove the &lt;code&gt;.sample&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;Git hooks are not copied when a repository is cloned, so you can make them as personal as you like.&lt;/p&gt;
&lt;p&gt;The useful moment in particular that we&amp;rsquo;ll talk about today is the &lt;em&gt;pre-commit&lt;/em&gt;. This hook is run after you do &lt;code&gt;git commit&lt;/code&gt;, and before you write a commit message. Exiting this hook with a non-zero status will abort the commit, which makes it extremely useful for last-minute quality checks. Or, a bit of fun. Why not both!&lt;/p&gt;
&lt;h1 id=&#34;how-do-i-get-a-pre-commit-checklist&#34;&gt;How do I get a pre-commit checklist?&lt;/h1&gt;
&lt;p&gt;I only want the best for my family and my commits, and that&amp;rsquo;s why I choose an interactive pre-commit checklist. Not only is it fun to use, it helps to keep my projects safe from unexpected off-spec mistakes!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s so easy! I just write a bash script that can read user input, and plop it into &lt;code&gt;.git/hooks&lt;/code&gt; as a file named &lt;code&gt;pre-commit&lt;/code&gt;. Then I do &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; to make it executable, and I&amp;rsquo;m done!&lt;/p&gt;
&lt;p&gt;Oh look, here comes an example bash script now!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Would you like to play a game?&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Read user input, assign stdin to keyboard&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Have you double checked that only relevant files were added? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please ensure the right files were added!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Has the documentation been updated? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please add or update the docs!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Do you know which issue or PR numbers to reference? (Y/n) &amp;#34;&lt;/span&gt; yn&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$yn&lt;/span&gt; in
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; break&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Nn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Better go check those tracking numbers!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
* &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please answer y (yes) or n (no):&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;take-my-money&#34;&gt;Take my money!&lt;/h1&gt;
&lt;p&gt;Don&amp;rsquo;t delay! Take advantage &lt;em&gt;right now&lt;/em&gt; of this generous &lt;em&gt;one-time offer!&lt;/em&gt; An interactive pre-commit hook checklist can be yours, today, for the low, low price of&amp;hellip; free? Wait, who wrote this script?&lt;/p&gt;</content:encoded></item><item><title>How to set up a short feedback loop as a solo coder</title><link>https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/</link><pubDate>Mon, 02 Jul 2018 10:08:41 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/</guid><description>Strategies for continuous improvement when you&#39;re a freelance developer.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/cover_feedback-pbjreview_hu8e37b70b3728865778c1f4fe4adf7fff_53513_640x0_resize_box_2.png" width="640" height="288"/>
&lt;p&gt;I&amp;rsquo;ve spent the last couple years as a solo freelance developer. Comparing this experience to previously working in companies, I&amp;rsquo;ve noticed that those of us who work alone can have fewer iterative opportunities for improvement than developers who work on teams. Integral to having opportunities to improve is the concept of a short feedback loop: a process of incorporating new learning from observation and previous experience continuously over a short period of time. This process has to be &lt;em&gt;manufactured&lt;/em&gt; by people working mostly alone, instead of, as is often the case, &lt;em&gt;adopted&lt;/em&gt; when you join a team.&lt;/p&gt;
&lt;p&gt;In this post I hope to share what I&amp;rsquo;ve learned about setting yourself up to improve quickly and continuously as a solo coder.&lt;/p&gt;
&lt;h1 id=&#34;about-feedback-loops&#34;&gt;About feedback loops&lt;/h1&gt;
&lt;p&gt;United States Air Force Colonel John Boyd developed the concept of the &lt;a href=&#34;https://en.wikipedia.org/wiki/OODA_loop&#34;&gt;OODA loop&lt;/a&gt;, OODA being an acronym for &lt;em&gt;observe, orient, decide, act&lt;/em&gt;. In military operations, this illustrates a process of decision-making based on the constant ingestion of new information:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observe:&lt;/strong&gt; Obtain raw information about unfolding circumstances and the current environment.&lt;br /&gt;
&lt;strong&gt;Orient:&lt;/strong&gt; Put raw observations in context. Consider such things as relevancy to the current situation and previously gained knowledge and expertise.&lt;br /&gt;
&lt;strong&gt;Decide:&lt;/strong&gt; Make a plan for moving towards your goal.&lt;br /&gt;
&lt;strong&gt;Act:&lt;/strong&gt; Execute the plan.&lt;/p&gt;
&lt;p&gt;Since it&amp;rsquo;s a loop, the &lt;em&gt;act&lt;/em&gt; stage leads directly back into the &lt;em&gt;observe&lt;/em&gt; stage. This is the critical &amp;ldquo;feed back&amp;rdquo; concept that enables increasingly successful iterations. It&amp;rsquo;s widely applicable beyond military operations - you may recognize it as the origin of the &lt;a href=&#34;https://en.wikipedia.org/wiki/PDCA&#34;&gt;PDCA&lt;/a&gt; (plan-do-check-act) method.&lt;/p&gt;
&lt;p&gt;I like the OODA loop for being a succinct illustration of a general feedback loop. Many concepts and working methods build on the idea of feedback loops, including &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Agile_software_development&#34;&gt;Agile software development&lt;/a&gt; methods.&lt;/p&gt;
&lt;h2 id=&#34;development-team-feedback-loop&#34;&gt;Development team feedback loop&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at what some components of a feedback loop for a developer on a team might look like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direction from product owners or reviews from users&lt;/li&gt;
&lt;li&gt;Daily scrum/standup with whole team&lt;/li&gt;
&lt;li&gt;Prioritization with developer team&lt;/li&gt;
&lt;li&gt;Individual coding and testing&lt;/li&gt;
&lt;li&gt;Peer code review&lt;/li&gt;
&lt;li&gt;Deployment and performance monitoring&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Implicit in these steps is the support of co-workers and management - in other words, someone to answer to. How can a solo freelance developer create a similar environment of accountability?&lt;/p&gt;
&lt;h2 id=&#34;solo-developer-feedback-loop&#34;&gt;Solo developer feedback loop&lt;/h2&gt;
&lt;p&gt;Here are some possible steps that an individual freelance developer can implement to create a short feedback loop:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build discipline&lt;/li&gt;
&lt;li&gt;Clarify concrete top-level goals&lt;/li&gt;
&lt;li&gt;Prioritize and plan mid-level and low-level goals&lt;/li&gt;
&lt;li&gt;Automate your work&lt;/li&gt;
&lt;li&gt;Block out time for code review&lt;/li&gt;
&lt;li&gt;Block out time for process review&lt;/li&gt;
&lt;li&gt;Update your goals and processes with the results of your reviews&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll cover each of these stages in detail below.&lt;/p&gt;
&lt;h1 id=&#34;build-discipline&#34;&gt;Build discipline&lt;/h1&gt;
&lt;p&gt;More of a prerequisite than a stage in itself, building discipline is what enables our short feedback loop to work. Nothing else in this article will be helpful unless we have the skill to do something we don&amp;rsquo;t want to do. Discipline is most certainly a skill. It can be learned, trained, and improved just like any other.&lt;/p&gt;
&lt;p&gt;Why is discipline so important? Because when we&amp;rsquo;re crunching to get a project completed this Friday evening, we&amp;rsquo;re not going to want to write a good commit message. We&amp;rsquo;re not going to want to clean up the code comments. We just want to see the darn thing go, &lt;em&gt;Hello, git push -f&lt;/em&gt;. It&amp;rsquo;s in those moments that discipline enables us to not miss an opportunity to practice, learn, and improve our work process. Discipline helps us avoid Friday night commits that turn into Monday morning &lt;code&gt;git reset --hard&lt;/code&gt;s.&lt;/p&gt;
&lt;h1 id=&#34;clarify-concrete-top-level-goals&#34;&gt;Clarify concrete top-level goals&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;feedback-topgoal.png&#34; alt=&#34;Envisioning a peanut butter and jelly sandwich&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Whether working for a client or bootstrapping our own best-new-app-ever, we won&amp;rsquo;t be able to measure any progress or improvements without something to measure them against.&lt;/p&gt;
&lt;p&gt;When I&amp;rsquo;m discussing a new project with a client, I always speak in terms of concrete achievements. This could take the form of accomplishing a specific feature by a certain date, or deciding what the MVP looks like to a user. This is as much to my benefit as my client&amp;rsquo;s. By agreeing, in writing, &lt;em&gt;what&lt;/em&gt; will be achieved and &lt;em&gt;when&lt;/em&gt;, my client and I have clearly defined top-level goals and can both assess how the project is progressing. When I&amp;rsquo;m working for myself, I treat myself as I would a client. I make a commitment, in writing, describing what will be achieved, and when. This can be something as simple as a goals list for the week, or as detailed as a kanban board.&lt;/p&gt;
&lt;p&gt;The point of having a concrete goal, however, is not to stick to it at all costs. It&amp;rsquo;s important to set an expectation, with ourselves and with our clients, that the goals will be revisited at mutually-agreeable dates over the course of the project. This enables the all-important &amp;ldquo;feed back&amp;rdquo; part of the loop.&lt;/p&gt;
&lt;h1 id=&#34;prioritize-and-plan-mid-level-and-low-level-goals&#34;&gt;Prioritize and plan mid-level and low-level goals&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;feedback-stepgoals.png&#34; alt=&#34;The components of a peanut butter and jelly sandwich&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Few goals are achieved all in one step. Even the simple process of making a peanut butter and jelly sandwich (a favourite computer programming &lt;a href=&#34;https://www.youtube.com/watch?v=y62zj9ozPOM&amp;amp;t=1016s&#34;&gt;teaching example&lt;/a&gt;) can be broken down into successively smaller, more precise instructions. While we humans may not require the granularity that a computer program does, goals that are chunked into time-boxed, achievable steps are much more easily digested. 🥪&lt;/p&gt;
&lt;p&gt;Start with the mid-level goals, and make each step concrete. If the goal is to release a new open source web app, for example, the steps might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete app JavaScript&lt;/li&gt;
&lt;li&gt;Create front end and stylesheet&lt;/li&gt;
&lt;li&gt;Do local tests&lt;/li&gt;
&lt;li&gt;Set up cloud server&lt;/li&gt;
&lt;li&gt;Deploy app to cloud&lt;/li&gt;
&lt;li&gt;Do tests&lt;/li&gt;
&lt;li&gt;Add repository to GitHub&lt;/li&gt;
&lt;li&gt;Post on Hacker News&lt;/li&gt;
&lt;li&gt;Profit!!!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of the above examples encapsulates many smaller, low-level goals - we can think of these as our to-do list items. For example, &amp;ldquo;Set up cloud server&amp;rdquo; might involve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Research cloud providers&lt;/li&gt;
&lt;li&gt;Decide on service and sign up&lt;/li&gt;
&lt;li&gt;Set up server/instance&lt;/li&gt;
&lt;li&gt;Add integrations&lt;/li&gt;
&lt;li&gt;Test deployment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our parameters for chunk sizes and what constitutes a &amp;ldquo;step&amp;rdquo; may be different from one another, and will likely change from project to project. If your mid-level and low-level steps clearly define a concrete path for achieving the top-level goals you set, then you&amp;rsquo;re in good shape. Later on, evaluating the decision process that brought us to these mid-level and low-level goals enables us to bring our feedback loop full circle.&lt;/p&gt;
&lt;h1 id=&#34;automate-your-work&#34;&gt;Automate your work&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;feedback-autorobot.png&#34; alt=&#34;Peanut butter and jelly sandwich robot&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I recently read a great article entitled &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=3197520&#34;&gt;Manual Work is a Bug&lt;/a&gt;. It discusses a process by which successful developers document and eventually automate their work. The beauty of this idea is in its simplicity. By writing down the things we do manually, we&amp;rsquo;re able to correct and refine our processes. By refining our processes, we can more easily translate them into code snippets and scripts. With a collection of scripts that we can string together, we can automate our work.&lt;/p&gt;
&lt;p&gt;Automating work isn&amp;rsquo;t only about saving time. It reduces haven&amp;rsquo;t-had-my-coffee-yet errors, minimizes cognitive load allowing more room for creativity, and allows our processes to be repeatable across collaborators and projects. It help shorten our feedback loop by ensuring we aren&amp;rsquo;t doing the same thing three times in three different ways.&lt;/p&gt;
&lt;p&gt;We can begin to automate by starting our own personal wiki. If we build a habit of writing down every manual thing we do, no matter how basic it may seem at the time, we give ourselves more opportunities to spot patterns, and thus possible integrations and improvements.&lt;/p&gt;
&lt;p&gt;The first time we do something manually, we write out the steps. The second time, we follow the steps. This gives us the opportunity to correct and refine them based on what we&amp;rsquo;ve learned since the first time. Over successive iterations, we might replace parts of manual commands with variables; we might find handy snippets of bash scripts that automate just a part of our task. As long as we keep revising and improving our personal wiki, we&amp;rsquo;re moving towards automation.&lt;/p&gt;
&lt;h1 id=&#34;block-out-time-for-code-review&#34;&gt;Block out time for code review&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;cover_feedback-pbjreview.png&#34; alt=&#34;Reviewing a peanut butter and jelly sandwich with a clipboard&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s all too easy to commit messy code when we work alone. We think, &lt;em&gt;who&amp;rsquo;s going to see it? I&amp;rsquo;ll fix it later.&lt;/em&gt; Each time that happens, though, we&amp;rsquo;re building a habit. It&amp;rsquo;s a bad one.&lt;/p&gt;
&lt;p&gt;Working alone means there&amp;rsquo;s no one likely to give feedback on our commits when we&amp;rsquo;re doing something that doesn&amp;rsquo;t make sense, or that could be improved. Instead, we have to actively seek out opportunities to improve. Open source communities are amazing for this. There&amp;rsquo;s a wealth of information available to us in terms of coding styles, examples of refactored code, and a smorgasbord of snippets that achieve that-thing-we-were-trying-to-do but in fewer lines. We can learn all we please, if we just block out the time to do it.&lt;/p&gt;
&lt;p&gt;Schedule your own code review at a time that makes sense for you and the project you&amp;rsquo;re working on. This might be each time you finish a fix or feature, or at regular intervals daily or weekly. If you have someone who can help, book them. There are also &lt;a href=&#34;https://victoria.dev/blog/top-free-resources-for-developing-coding-superpowers/&#34;&gt;chatrooms full of people&lt;/a&gt; happy to lend a hand.&lt;/p&gt;
&lt;p&gt;Do some research on basic best practices for what you&amp;rsquo;re working on. Set yourself a time limit though, and take what you read with a grain of salt. There&amp;rsquo;s a lot of rabbit holes in that field. As a starting point, I&amp;rsquo;d recommend learning about DRY code, and watching &lt;a href=&#34;https://www.youtube.com/watch?v=p0O1VVqRSK0&amp;amp;feature=youtu.be&amp;amp;t=330&#34;&gt;Uncle Bob demand professionalism in software development&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;code-review-checklist&#34;&gt;Code review checklist&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s my personal code review checklist, based off some general best practices. Feel free to use it as a starting point for your own!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Victoria&amp;rsquo;s Code Review Extravaganza!&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; This solves a high-priority item.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; This is a complete implementation that follows the specification.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Off-topic changes were not included and have been added to backlog.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Variable names are meaningful and there are no magic numbers.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Correct and useful error messages are returned at every opportunity.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; No debugging print statements were left in.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; This code is DRY and modular.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; This code is secure. Private and public code are well separated.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; This code is its own documentation, or the documentation is up to date.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; A five-year-old could follow this, seriously it&amp;rsquo;s that readable.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Unit tests successfully pass.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Master was merged into the branch and tested.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Formatting follows style guidelines.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; I cannot find any further edge cases or known defects.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; I would be happy if this code was publicly attributed to me.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; I fully understand what the code does and the impact of the changes I made.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; I actually verified that it actually does what I said it does.&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/gonedark/writing-clean-code&#34;&gt;Here is an excellent example&lt;/a&gt; of cleaning up code with some of the above points in mind.&lt;/p&gt;
&lt;h1 id=&#34;block-out-time-for-process-review&#34;&gt;Block out time for process review&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;feedback-robotreview.png&#34; alt=&#34;Reviewing sandwich making robot with clipboard&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Just as we learn from reviewing our code, we refine our processes by reviewing them as well. Process review is most beneficial when visited at regular intervals throughout the project, not just after the project&amp;rsquo;s completion. For short-term projects, a good starting point for scheduling process reviews is at each half-mark - once midway through, and again after completion. Long-term projects may have reviews at each quarter-mark.&lt;/p&gt;
&lt;h2 id=&#34;process-review-questions&#34;&gt;Process review questions&lt;/h2&gt;
&lt;p&gt;Process review can be as simple as a short list of questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What were my top-level goals for this period? Did I meet them?&lt;/li&gt;
&lt;li&gt;What were my mid-level and low-level goals for this period? Did I meet them?&lt;/li&gt;
&lt;li&gt;Would I have been better served with different or more specific goals? Why?&lt;/li&gt;
&lt;li&gt;Did I successfully remove or automate obstacles?&lt;/li&gt;
&lt;li&gt;Did I stick to my code review schedule? Why or why not?&lt;/li&gt;
&lt;li&gt;How might I remove obstacles next time?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Setting aside dedicated time for our process review can help us to answer questions like these thoughtfully and honestly. This allows us to squeeze out every bit of learning we can from our review, helping to shorten our feedback loop.&lt;/p&gt;
&lt;h1 id=&#34;update-your-goals-and-processes-with-the-results-of-your-reviews&#34;&gt;Update your goals and processes with the results of your reviews&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;feedback-updategoals.png&#34; alt=&#34;Adding additional arms to robot while envisioning a multi-layer PB&amp;amp;J&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All the performance data in the world is no good to us if we don&amp;rsquo;t put it into practice. With each successive code review, we can refine and add to our checklist. With what we learn from each process review, we can fine tune and improve our processes. The more we can invent concrete and observable ways to implement our learning, the more success we&amp;rsquo;ll have.&lt;/p&gt;
&lt;p&gt;Making a conscious effort to utilize and practice the things we&amp;rsquo;ve learned is the final, vital, component of our feedback loop. The more often we incorporate new learning, the shorter our loop becomes, allowing us to improve that much faster.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/cover_feedback-pbjreview_hu8e37b70b3728865778c1f4fe4adf7fff_53513_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Adorable bookmarklets want to help delete your social media data</title><link>https://victoria.dev/blog/adorable-bookmarklets-want-to-help-delete-your-social-media-data/</link><pubDate>Thu, 14 Jun 2018 13:12:02 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/adorable-bookmarklets-want-to-help-delete-your-social-media-data/</guid><description>Bookmarklets you can use in your browser to help clean up your social media data.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/adorable-bookmarklets-want-to-help-delete-your-social-media-data/cover_bookmarklet-card_huf77dc50c841330e47b423811f322d666_99199_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;A little while ago I wrote about &lt;a href=&#34;https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/&#34;&gt;a Lambda function I called ephemeral&lt;/a&gt; for deleting my old tweets. While it&amp;rsquo;s a great project for someone familiar with or wanting to learn to use Lambda, it isn&amp;rsquo;t simple for a non-technical person to set up. There are services out there that will delete your tweets for you, but require your access credentials. There didn&amp;rsquo;t seem to be anything that provided convenience without also requiring authentication.&lt;/p&gt;
&lt;p&gt;So, I went oldschool and created the ephemeral bookmarklet.&lt;/p&gt;
&lt;p&gt;If that didn&amp;rsquo;t make you instantly nostalgic, a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; is a little application that lives as a bookmark in your web browser. You &amp;ldquo;install&amp;rdquo; it by dragging the link to your bookmarks toolbar, or right-clicking on the link and choosing &amp;ldquo;Bookmark this link&amp;rdquo; (Firefox). You click it to execute the program on the current page.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the ephemeral bookmarklet will do:&lt;/p&gt;
&lt;video width=&#34;600px&#34; controls=&#34;controls&#34; poster=&#34;bookmarklet-card.png&#34;&gt;
&lt;source src=&#34;ephemeralbookmarklet.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;/video&gt;
&lt;p&gt;The ephemeral bookmarklet is part of a new suite of tools for personal data management that I&amp;rsquo;m co-creating with Adam Drake. You can &lt;a href=&#34;https://adamdrake.github.io/pdmtools/&#34;&gt;get all the bookmarklets on this page&lt;/a&gt;, and they&amp;rsquo;re also open source &lt;a href=&#34;https://github.com/adamdrake/pdmtools&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are currently bookmarklets for managing your data on LinkedIn and Twitter. We&amp;rsquo;re looking for testers and contributors to help make this a comprehensive toolset for your social media data management. If you write code, I invite you to contribute and help this toolset grow.&lt;/p&gt;
&lt;p&gt;∩{｡◕‿◕｡}∩ &amp;ndash; Bookmarklet says hi!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/adorable-bookmarklets-want-to-help-delete-your-social-media-data/cover_bookmarklet-card_huf77dc50c841330e47b423811f322d666_99199_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A coffee-break introduction to time complexity of algorithms</title><link>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</link><pubDate>Wed, 30 May 2018 14:08:28 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/</guid><description>A groundwork understanding of algorithm time complexity in about fifteen minutes.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/cover_wibbly_hu64a4c7ed5bb41a17b8b90ed2af9d238b_2572713_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;Just like writing your very first &lt;code&gt;for&lt;/code&gt; loop, understanding time complexity is an integral milestone to learning how to write efficient complex programs. Think of it as having a superpower that allows you to know exactly what type of program might be the most efficient in a particular situation - before even running a single line of code.&lt;/p&gt;
&lt;p&gt;The fundamental concepts of complexity analysis are well worth studying. You&amp;rsquo;ll be able to better understand how the code you&amp;rsquo;re writing will interact with the program&amp;rsquo;s input, and as a result, you&amp;rsquo;ll spend a lot less wasted time writing slow and problematic code. It won&amp;rsquo;t take long to go over all you need to know in order to start writing more efficient programs - in fact, we can do it in about fifteen minutes. You can go grab a coffee right now (or tea, if that&amp;rsquo;s your thing) and I&amp;rsquo;ll take you through it before your coffee break is over. Go ahead, I&amp;rsquo;ll wait.&lt;/p&gt;
&lt;p&gt;All set? Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;what-is-time-complexity-anyway&#34;&gt;What is &amp;ldquo;time complexity&amp;rdquo; anyway?&lt;/h1&gt;
&lt;p&gt;The time complexity of an algorithm is an &lt;strong&gt;approximation&lt;/strong&gt; of how long that algorithm will take to process some input. It describes the efficiency of the algorithm by the magnitude of its operations. This is different than the number of times an operation repeats; I&amp;rsquo;ll expand on that later. Generally, the fewer operations the algorithm has, the faster it will be.&lt;/p&gt;
&lt;p&gt;We write about time complexity using &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt;, which looks something like &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;). There&amp;rsquo;s rather a lot of math involved in its formal definition, but informally we can say that Big O notation gives us our algorithm&amp;rsquo;s approximate run time in the &lt;strong&gt;worst case&lt;/strong&gt;, or in other words, its upper bound.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;2&lt;/a&gt;]&lt;/sup&gt; It is inherently relative and comparative.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;3&lt;/a&gt;]&lt;/sup&gt; We&amp;rsquo;re describing the algorithm&amp;rsquo;s efficiency relative to the increasing size of its input data, &lt;em&gt;n&lt;/em&gt;. If the input is a string, then &lt;em&gt;n&lt;/em&gt; is the length of the string. If it&amp;rsquo;s a list of integers, &lt;em&gt;n&lt;/em&gt; is the length of the list.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easiest to picture what Big O notation represents with a graph:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graph.png#screenshot&#34; alt=&#34;A graph showing different classes of time complexity&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Lines made with the very excellent Desmos graph calculator. You can &lt;a href=&#34;https://www.desmos.com/calculator/xpfyjl1lbn&#34; target=&#34;__blank&#34; rel=&#34;noopener&#34;&gt;play with this graph here&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Here are the main important points to remember as you read the rest of this article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity is an approximation&lt;/li&gt;
&lt;li&gt;An algorithm&amp;rsquo;s time complexity approximates its worst case run time&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;determining-time-complexity&#34;&gt;Determining time complexity&lt;/h1&gt;
&lt;p&gt;There are different classes of complexity that we can use to quickly understand an algorithm. I&amp;rsquo;ll illustrate some of these classes using nested loops and other examples.&lt;/p&gt;
&lt;h2 id=&#34;polynomial-time-complexity&#34;&gt;Polynomial time complexity&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;polynomial&lt;/strong&gt;, from the Greek &lt;em&gt;poly&lt;/em&gt; meaning &amp;ldquo;many,&amp;rdquo; and Latin &lt;em&gt;nomen&lt;/em&gt; meaning &amp;ldquo;name,&amp;rdquo; describes an expression comprised of constant variables, and addition, multiplication, and exponentiation to a non-negative integer power.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;4&lt;/a&gt;]&lt;/sup&gt; That&amp;rsquo;s a super math-y way to say that it contains variables usually denoted by letters, and symbols that look like these:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;polynomial.png&#34; alt=&#34;A polynomial example&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below classes describe polynomial algorithms. Some have food examples.&lt;/p&gt;
&lt;h3 id=&#34;constant&#34;&gt;Constant&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;constant time&lt;/strong&gt; algorithm doesn&amp;rsquo;t change its running time in response to the input data. No matter the size of the data it receives, the algorithm takes the same amount of time to run. We denote this as a time complexity of &lt;em&gt;O&lt;/em&gt;(1).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graph(1).png#screenshot&#34; alt=&#34;A graph showing constant time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s one example of a constant algorithm that takes the first item in a slice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;takeCupcake&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cupcakes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cupcakes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;cupcakes.png&#34; alt=&#34;Types of cupcakes&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Choice of flavours are: vanilla cupcake, strawberry cupcake, mint chocolate cupcake, lemon cupcake, and &amp;ldquo;wibbly wobbly, timey wimey&amp;rdquo; cupcake.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;With this contant-time algorithm, no matter how many cupcakes are on offer, you just get the first one. Oh well. Flavours are overrated anyway.&lt;/p&gt;
&lt;h3 id=&#34;linear&#34;&gt;Linear&lt;/h3&gt;
&lt;p&gt;The running duration of a &lt;strong&gt;linear&lt;/strong&gt; algorithm is constant. It will process the input in &lt;em&gt;n&lt;/em&gt; number of operations. This is often the best possible (most efficient) case for time complexity where all the data must be examined.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graph(n).png#screenshot&#34; alt=&#34;A graph showing linear time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of code with time complexity of &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// dip chip
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s another example of code with time complexity of &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// double dip chip
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It doesn&amp;rsquo;t matter whether the code inside the loop executes once, twice, or any number of times. Both these loops process the input by a constant factor of &lt;em&gt;n&lt;/em&gt;, and thus can be described as linear.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dip.png&#34; alt=&#34;Lifeguard MIQ says no double dipping&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Don&amp;rsquo;t double dip in a shared bowl.&lt;/p&gt;&lt;/p&gt;
&lt;h3 id=&#34;quadratic&#34;&gt;Quadratic&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;graph(n2).png#screenshot&#34; alt=&#34;A graph showing quadratic time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now here&amp;rsquo;s an example of code with time complexity of &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pizzaDelivery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pizzas&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// slice pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// eat slice of pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because there are two nested loops, or nested linear operations, the algorithm process the input &lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; times.&lt;/p&gt;
&lt;h3 id=&#34;cubic&#34;&gt;Cubic&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;graph(n3).png#screenshot&#34; alt=&#34;A graph showing cubic time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Extending on the previous example, this code with three nested loops has time complexity of &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pizzaDelivery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boxesDelivered&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boxesDelivered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// open box
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// slice pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// eat slice of pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;unsliced.png&#34; alt=&#34;A pizza pie in a box with a pizza slicer dependency&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Seriously though, who delivers unsliced pizza??&lt;/p&gt;&lt;/p&gt;
&lt;h3 id=&#34;logarithmic&#34;&gt;Logarithmic&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;logarithmic&lt;/strong&gt; algorithm is one that reduces the size of the input at every step.
We denote this time complexity as &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;), where &lt;strong&gt;log&lt;/strong&gt;, the logarithm function, is this shape:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graph(logn).png#screenshot&#34; alt=&#34;A graph showing logarithmic time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One example of this is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_algorithm&#34;&gt;binary search algorithm&lt;/a&gt; that finds the position of an element within a sorted array. Here&amp;rsquo;s how it would work, assuming we&amp;rsquo;re trying to find the element &lt;em&gt;x&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;em&gt;x&lt;/em&gt; matches the middle element &lt;em&gt;m&lt;/em&gt; of the array, return the position of &lt;em&gt;m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If &lt;em&gt;x&lt;/em&gt; doesn&amp;rsquo;t match &lt;em&gt;m&lt;/em&gt;, see if &lt;em&gt;m&lt;/em&gt; is larger or smaller than &lt;em&gt;x&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;If larger, discard all array items greater than &lt;em&gt;m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If smaller, discard all array items smaller than &lt;em&gt;m&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Continue by repeating steps 1 and 2 on the remaining array until &lt;em&gt;x&lt;/em&gt; is found&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find the clearest analogy for understanding binary search is imagining the process of locating a book in a bookstore aisle. If the books are organized by author&amp;rsquo;s last name and you want to find &amp;ldquo;Terry Pratchett,&amp;rdquo; you know you need to look for the &amp;ldquo;P&amp;rdquo; section.&lt;/p&gt;
&lt;p&gt;You can approach the shelf at any point along the aisle and look at the author&amp;rsquo;s last name there. If you&amp;rsquo;re looking at a book by Neil Gaiman, you know you can ignore all the rest of the books to your left, since no letters that come before &amp;ldquo;G&amp;rdquo; in the alphabet happen to be &amp;ldquo;P.&amp;rdquo; You would then move down the aisle to the right any amount, and repeat this process until you&amp;rsquo;ve found the Terry Pratchett section, which should be rather sizable if you&amp;rsquo;re at any decent bookstore because wow did he write a lot of books.&lt;/p&gt;
&lt;h3 id=&#34;quasilinear&#34;&gt;Quasilinear&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;graph(nlogn).png#screenshot&#34; alt=&#34;A graph showing quasilinear time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Often seen with sorting algorithms, the time complexity &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt;) can describe a data structure where each operation takes &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;) time. One example of this is &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34;&gt;quick sort&lt;/a&gt;, a divide-and-conquer algorithm.&lt;/p&gt;
&lt;p&gt;Quick sort works by dividing up an unsorted array into smaller chunks that are easier to process. It sorts the sub-arrays, and thus the whole array. Think about it like trying to put a deck of cards in order. It&amp;rsquo;s faster if you split up the cards and get five friends to help you.&lt;/p&gt;
&lt;h2 id=&#34;non-polynomial-time-complexity&#34;&gt;Non-polynomial time complexity&lt;/h2&gt;
&lt;p&gt;The below classes of algorithms are non-polynomial.&lt;/p&gt;
&lt;h3 id=&#34;factorial&#34;&gt;Factorial&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;graph(nfac).png#screenshot&#34; alt=&#34;A graph showing factorial time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;An algorithm with time complexity &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;!) often iterates through all permutations of the input elements. One common example is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Brute-force_search&#34;&gt;brute-force search&lt;/a&gt; seen in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Travelling_salesman_problem#Computing_a_solution&#34;&gt;travelling salesman problem&lt;/a&gt;. It tries to find the least costly path between a number of points by enumerating all possible permutations and finding the ones with the lowest cost.&lt;/p&gt;
&lt;h3 id=&#34;exponential&#34;&gt;Exponential&lt;/h3&gt;
&lt;p&gt;An &lt;strong&gt;exponential&lt;/strong&gt; algorithm often also iterates through all subsets of the input elements. It is denoted &lt;em&gt;O&lt;/em&gt;(2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;) and is often seen in brute-force algorithms. It is similar to factorial time except in its rate of growth, which as you may not be surprised to hear, is exponential. The larger the data set, the more steep the curve becomes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graph(2n).png#screenshot&#34; alt=&#34;A graph showing exponential time complexity&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In cryptography, a brute-force attack may systematically check all possible elements of a password by iterating through subsets. Using an exponential algorithm to do this, it becomes incredibly resource-expensive to brute-force crack a long password versus a shorter one. This is one reason that a long password is considered more secure than a shorter one.&lt;/p&gt;
&lt;p&gt;There are further time complexity classes less commonly seen that I won&amp;rsquo;t cover here, but you can read about these and find examples in &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities&#34;&gt;this handy table&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;recursion-time-complexity&#34;&gt;Recursion time complexity&lt;/h2&gt;
&lt;p&gt;As I described in my article &lt;a href=&#34;https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/&#34;&gt;explaining recursion using apple pie&lt;/a&gt;, a recursive function calls itself under specified conditions. Its time complexity depends on how many times the function is called and the time complexity of a single function call. In other words, it&amp;rsquo;s the product of the number of times the function runs and a single execution&amp;rsquo;s time complexity.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a recursive function that eats pies until no pies are left:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatPies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatPies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The time complexity of a single execution is constant. No matter how many pies are input, the program will do the same thing: check to see if the input is 0. If so, return, and if not, call itself with one fewer pie.&lt;/p&gt;
&lt;p&gt;The initial number of pies could be any number, and we need to process all of them, so we can describe the input as &lt;em&gt;n&lt;/em&gt;. Thus, the time complexity of this recursive function is the product &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;piespile.png&#34; alt=&#34;A pile of pizza boxes with pies to be eaten&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;This function&amp;rsquo;s return value is zero, plus some indigestion.&lt;/p&gt;&lt;/p&gt;
&lt;h2 id=&#34;worst-case-time-complexity&#34;&gt;Worst case time complexity&lt;/h2&gt;
&lt;p&gt;So far, we&amp;rsquo;ve talked about the time complexity of a few nested loops and some code examples. Most algorithms, however, are built from many combinations of these. How do we determine the time complexity of an algorithm containing many of these elements strung together?&lt;/p&gt;
&lt;p&gt;Easy. We can describe the total time complexity of the algorithm by finding the largest complexity among all of its parts. This is because the slowest part of the code is the bottleneck, and time complexity is concerned with describing the worst case for the algorithm&amp;rsquo;s run time.&lt;/p&gt;
&lt;p&gt;Say we have a program for an office party. If our program looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;takeCupcake&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cupcakes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Have cupcake number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cupcakes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cupcakes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Have some chips!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bowlOfChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// dip chip
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No more chips.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pizzaDelivery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boxesDelivered&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Pizza is here!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boxesDelivered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// open box
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizzaBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// slice pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// eat slice of pizza
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Pizza is gone.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatPies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Someone ate all the pies!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Eating pie...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eatPies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;takeCupcake&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;eatChips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;pizzaDelivery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;eatPies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Food gone. Back to work!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can describe the time complexity of all the code by the complexity of its most complex part. This program is made up of functions we&amp;rsquo;ve already seen, with the following time complexity classes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Big O&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeCupcake&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eatChips&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;linear&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pizzaDelivery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cubic&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eatPies&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;linear (recursive)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To describe the time complexity of the entire office party program, we choose the worst case. This program would have the time complexity &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the office party soundtrack, just for fun.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Have cupcake number &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
Have some chips!
No more chips.
Pizza is here!
Pizza is gone.
Eating pie...
Eating pie...
Eating pie...
Someone ate all the pies!
Food gone. Back to work!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;p-vs-np-np-complete-and-np-hard&#34;&gt;P vs NP, NP-complete, and NP-hard&lt;/h1&gt;
&lt;p&gt;You may come across these terms in your explorations of time complexity. Informally, &lt;strong&gt;P&lt;/strong&gt; (for Polynomial time), is a class of problems that is quick to solve. &lt;strong&gt;NP&lt;/strong&gt;, for Nondeterministic Polynomial time, is a class of problems where the answer can be quickly verified in polynomial time. NP encompasses P, but also another class of problems called &lt;strong&gt;NP-complete&lt;/strong&gt;, for which no fast solution is known.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;5&lt;/a&gt;]&lt;/sup&gt; Outside of NP but still including NP-complete is yet another class called &lt;strong&gt;NP-hard&lt;/strong&gt;, which includes problems that no one has been able to verifiably solve with polynomial algorithms.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;6&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pnpeuler.svg#screenshot&#34; alt=&#34;Euler diagram, CC from Wikipedia.&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;P vs NP Euler diagram, &lt;a href=&#34;https://commons.wikimedia.org/w/index.php?curid=3532181&#34; target=__&#34;blank&#34; rel=&#34;noopener&#34;&gt;by Behnam Esfahbod, CC BY-SA 3.0&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/P_versus_NP_problem&#34;&gt;P versus NP&lt;/a&gt; is an unsolved, open question in computer science.&lt;/p&gt;
&lt;p&gt;Anyway, you don&amp;rsquo;t generally need to know about NP and NP-hard problems to begin taking advantage of understanding time complexity. They&amp;rsquo;re a whole other Pandora&amp;rsquo;s box.&lt;/p&gt;
&lt;h1 id=&#34;approximate-the-efficiency-of-an-algorithm-before-you-write-the-code&#34;&gt;Approximate the efficiency of an algorithm before you write the code&lt;/h1&gt;
&lt;p&gt;So far, we&amp;rsquo;ve identified some different time complexity classes and how we might determine which one an algorithm falls into. So how does this help us before we&amp;rsquo;ve written any code to evaluate?&lt;/p&gt;
&lt;p&gt;By combining a little knowledge of time complexity with an awareness of the size of our input data, we can take a guess at an efficient algorithm for processing our data within a given time constraint. We can base our estimation on the fact that a modern computer can perform some hundreds of millions of operations in a second.&lt;sup&gt;[&lt;a href=&#34;#sources&#34;&gt;1&lt;/a&gt;]&lt;/sup&gt; The following table from the &lt;a href=&#34;#sources&#34;&gt;Competitive Programmer&amp;rsquo;s Handbook&lt;/a&gt; offers some estimates on required time complexity to process the respective input size in a time limit of one second.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input size&lt;/th&gt;
&lt;th&gt;Required time complexity for 1s processing time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;n ≤ 10&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n ≤ 20&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n ≤ 500&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n ≤ 5000&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n ≤ 10&lt;sup&gt;6&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt;) or &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n is large&lt;/td&gt;
&lt;td&gt;&lt;em&gt;O&lt;/em&gt;(1) or &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Keep in mind that time complexity is an approximation, and not a guarantee. We can save a lot of time and effort by immediately ruling out algorithm designs that are unlikely to suit our constraints, but we must also consider that Big O notation doesn&amp;rsquo;t account for &lt;strong&gt;constant factors&lt;/strong&gt;. Here&amp;rsquo;s some code to illustrate.&lt;/p&gt;
&lt;p&gt;The following two algorithms both have &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) time complexity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makeCoffee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoops&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add instant coffee
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makeStrongCoffee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoops&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add instant coffee
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first function makes a cup of coffee with the number of scoops we ask for. The second function also makes a cup of coffee, but it triples the number of scoops we ask for. To see an illustrative example, let&amp;rsquo;s ask both these functions for a cup of coffee with a million scoops.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the output of the Go test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Benchmark_makeCoffee-4 &lt;span class=&#34;m&#34;&gt;1000000000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.29 ns/op
Benchmark_makeStrongCoffee-4 &lt;span class=&#34;m&#34;&gt;1000000000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.86 ns/op&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our first function, &lt;code&gt;makeCoffee&lt;/code&gt;, completed in an average 0.29 nanoseconds. Our second function, &lt;code&gt;makeStrongCoffee&lt;/code&gt;, completed in an average of 0.86 nanoseconds. While those may both seem like pretty small numbers, consider that the stronger coffee took near three times longer to make. This should make sense intuitively, since we asked it to triple the scoops. Big O notation alone wouldn&amp;rsquo;t tell you this, since the constant factor of the tripled scoops isn&amp;rsquo;t accounted for.&lt;/p&gt;
&lt;h1 id=&#34;improve-time-complexity-of-existing-code&#34;&gt;Improve time complexity of existing code&lt;/h1&gt;
&lt;p&gt;Becoming familiar with time complexity gives us the opportunity to write code, or refactor code, to be more efficient. To illustrate, I&amp;rsquo;ll give a concrete example of one way we can refactor a bit of code to improve its time complexity.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say a bunch of people at the office want some pie. Some people want pie more than others. The amount that everyone wants some pie is represented by an &lt;code&gt;int&lt;/code&gt; &amp;gt; 0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;87&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, we&amp;rsquo;re bootstrapped and there are only three forks to go around. Since we&amp;rsquo;re a cooperative bunch, the three people who want pie the most will receive the forks to eat it with. Even though they&amp;rsquo;ve all agreed on this, no one seems to want to sort themselves out and line up in an orderly fashion, so we&amp;rsquo;ll have to make do with everybody jumbled about.&lt;/p&gt;
&lt;p&gt;Without sorting the list of diners, return the three largest integers in the slice.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a function that solves this problem and has &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;) time complexity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;giveForks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// make a slice to store diners who will receive forks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop over three forks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// variables to keep track of the highest integer and where it is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxIndex&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop over the diners slice
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if this integer is higher than max, update max and maxIndex
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;maxIndex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// remove the highest integer from the diners slice for the next loop
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxIndex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// keep track of who gets a fork
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program works, and eventually returns diners &lt;code&gt;[88 87 56]&lt;/code&gt;. Everyone gets a little impatient while it&amp;rsquo;s running though, since it takes rather a long time (about 120 nanoseconds) just to hand out three forks, and the pie&amp;rsquo;s getting cold. How could we improve it?&lt;/p&gt;
&lt;p&gt;By thinking about our approach in a slightly different way, we can refactor this program to have &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) time complexity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;giveForks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// make a slice to store diners who will receive forks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// create variables for each fork
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop over the diners
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// assign the forks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// list the final result of who gets a fork
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withForks&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s how the new program works:&lt;/p&gt;
&lt;p&gt;Initially, diner &lt;code&gt;2&lt;/code&gt; (the first in the list) is assigned the &lt;code&gt;first&lt;/code&gt; fork. The other forks remain unassigned.&lt;/p&gt;
&lt;p&gt;Then, diner &lt;code&gt;88&lt;/code&gt; is assigned the first fork instead. Diner &lt;code&gt;2&lt;/code&gt; gets the &lt;code&gt;second&lt;/code&gt; one.&lt;/p&gt;
&lt;p&gt;Diner &lt;code&gt;87&lt;/code&gt; isn&amp;rsquo;t greater than &lt;code&gt;first&lt;/code&gt; which is currently &lt;code&gt;88&lt;/code&gt;, but it is greater than &lt;code&gt;2&lt;/code&gt; who has the &lt;code&gt;second&lt;/code&gt; fork. So, the &lt;code&gt;second&lt;/code&gt; fork goes to &lt;code&gt;87&lt;/code&gt;. Diner &lt;code&gt;2&lt;/code&gt; gets the &lt;code&gt;third&lt;/code&gt; fork.&lt;/p&gt;
&lt;p&gt;Continuing in this violent and rapid fork exchange, diner &lt;code&gt;16&lt;/code&gt; is then assigned the &lt;code&gt;third&lt;/code&gt; fork instead of &lt;code&gt;2&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;We can add a print statement in the loop to see how the fork assignments play out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;43&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;87&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program is much faster, and the whole epic struggle for fork domination is over in 47 nanoseconds.&lt;/p&gt;
&lt;p&gt;As you can see, with a little change in perspective and some refactoring, we&amp;rsquo;ve made this simple bit of code faster and more efficient.&lt;/p&gt;
&lt;p&gt;Well, it looks like our fifteen minute coffee break is up! I hope I&amp;rsquo;ve given you a comprehensive introduction to calculating time complexity. Time to get back to work, hopefully applying your new knowledge to write more effective code! Or maybe just sound smart at your next office party. :)&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;p&gt;&amp;ldquo;If I have seen further it is by standing on the shoulders of Giants.&amp;rdquo; &amp;ndash;Isaac Newton, 1675&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Antti Laaksonen. &lt;em&gt;&lt;a href=&#34;https://cses.fi/book.pdf&#34;&gt;Competitive Programmer&amp;rsquo;s Handbook (pdf)&lt;/a&gt;,&lt;/em&gt; 2017&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflow: &lt;a href=&#34;https://stackoverflow.com/a/487278&#34;&gt;What is a plain English explanation of “Big O” notation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/Polynomial&#34;&gt;Polynomial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/NP-completeness&#34;&gt;NP-completeness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/NP-hardness&#34;&gt;NP-hardness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.desmos.com/&#34;&gt;Desmos graph calculator&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/cover_wibbly_hu64a4c7ed5bb41a17b8b90ed2af9d238b_2572713_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Knapsack problem algorithms for my real-life carry-on knapsack</title><link>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</link><pubDate>Wed, 09 May 2018 21:00:35 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/</guid><description>Using a greedy algorithm and dynamic programming to pack my full-time nomad travel bag.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/cover_knapsack-doodle_hu7070e09a25cc0b4f24775e27e4fe15a9_203336_640x0_resize_box_2.png" width="640" height="320"/>
&lt;h1 id=&#34;the-knapsack-problem&#34;&gt;The knapsack problem&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m a nomad and live out of one carry-on bag. This means that the total weight of all my worldly possessions must fall under airline cabin baggage weight limits - usually 10kg. On some smaller airlines, however, this weight limit drops to 7kg. Occasionally, I have to decide not to bring something with me to adjust to the smaller weight limit.&lt;/p&gt;
&lt;p&gt;As a practical exercise, deciding what to leave behind (or get rid of altogether) entails laying out all my things and choosing which ones to keep. That decision is based on the item&amp;rsquo;s usefulness to me (its worth) and its weight.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-stuff.jpeg&#34; alt=&#34;All my stuff.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;This is all my stuff, and my Minaal Carry-on bag.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Being a programmer, I&amp;rsquo;m aware that decisions like this could be made more efficiently by a computer. It&amp;rsquo;s done so frequently and so ubiquitously, in fact, that many will recognize this scenario as the classic &lt;em&gt;packing problem&lt;/em&gt; or &lt;em&gt;knapsack problem.&lt;/em&gt; How do I go about telling a computer to put as many important items in my bag as possible while coming in at or under a weight limit of 7kg? With algorithms! Yay!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll discuss two common approaches to solving the knapsack problem: one called a &lt;em&gt;greedy algorithm,&lt;/em&gt; and another called &lt;em&gt;dynamic programming&lt;/em&gt; (a little harder, but better, faster, stronger&amp;hellip;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to it.&lt;/p&gt;
&lt;h1 id=&#34;the-set-up&#34;&gt;The set up&lt;/h1&gt;
&lt;p&gt;I prepared my data in the form of a CSV file with three columns: the item&amp;rsquo;s name (a string), a representation of its worth (an integer), and its weight in grams (an integer). There are 40 items in total. I represented worth by ranking each item from 40 to 1, with 40 being the most important and 1 equating with something like &amp;ldquo;why do I even have this again?&amp;rdquo; (If you&amp;rsquo;ve never listed out all your possessions and ranked them by order of how useful they are to you, I highly recommend you try it. It can be a very revealing exercise.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of all items and bag:&lt;/strong&gt; 9003g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bag weight:&lt;/strong&gt; 1415g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Airline limit:&lt;/strong&gt; 7000g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maximum weight of items I can pack:&lt;/strong&gt; 5585g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total possible worth of items:&lt;/strong&gt; 820&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The challenge:&lt;/strong&gt; Pack as many items as the limit allows while maximizing the total worth.&lt;/p&gt;
&lt;h1 id=&#34;data-structures&#34;&gt;Data structures&lt;/h1&gt;
&lt;h2 id=&#34;reading-in-a-file&#34;&gt;Reading in a file&lt;/h2&gt;
&lt;p&gt;Before we can begin thinking about how to solve the knapsack problem, we have to solve the problem of reading in and storing our data. Thankfully, the Go standard library&amp;rsquo;s &lt;code&gt;io/ioutil&lt;/code&gt; package makes the first part straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ReadFile()&lt;/code&gt; function takes a file path and returns the file&amp;rsquo;s contents and an error (&lt;code&gt;nil&lt;/code&gt; if the call is successful) so we&amp;rsquo;ve also created a &lt;code&gt;check()&lt;/code&gt; function to handle any errors that might be returned. In a real-world application we probably would want to do something more sophisticated than &lt;code&gt;panic&lt;/code&gt;, but that&amp;rsquo;s not important right now.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-struct&#34;&gt;Creating a struct&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our data, we should probably do something with it. Since we&amp;rsquo;re working with real-life items and a real-life bag, let&amp;rsquo;s create some types to represent them and make it easier to conceptualize our program. A &lt;code&gt;struct&lt;/code&gt; in Go is a typed collection of fields. Here are our two types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is helpful to use field names that are very descriptive. You can see that the structs are set up just as we&amp;rsquo;ve described the things they represent. An &lt;code&gt;item&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt; (string), and a &lt;code&gt;worth&lt;/code&gt; and &lt;code&gt;weight&lt;/code&gt; (integers). A &lt;code&gt;bag&lt;/code&gt; has several fields of type &lt;code&gt;int&lt;/code&gt; representing its attributes, and also has the ability to hold &lt;code&gt;items&lt;/code&gt;, represented in the struct as a slice of &lt;code&gt;item&lt;/code&gt; type thingamabobbers.&lt;/p&gt;
&lt;h2 id=&#34;parsing-and-storing-our-data&#34;&gt;Parsing and storing our data&lt;/h2&gt;
&lt;p&gt;Several comprehensive Go packages exist that we could use to parse our CSV data&amp;hellip; but where&amp;rsquo;s the fun in that? Let&amp;rsquo;s go basic with some string splitting and a for loop. Here&amp;rsquo;s our updated &lt;code&gt;readItems()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;strings.Split&lt;/code&gt;, we split our &lt;code&gt;dat&lt;/code&gt; on newlines. We then create an empty &lt;code&gt;itemList&lt;/code&gt; to hold our items.&lt;/p&gt;
&lt;p&gt;In our for loop, we skip the first line of our CSV file (the headers) then iterate over each line. We use &lt;code&gt;strconv.Atoi&lt;/code&gt; (read &amp;ldquo;A to i&amp;rdquo;) to convert the values for each item&amp;rsquo;s worth and weight into integers. We then create a &lt;code&gt;newItem&lt;/code&gt; with these field values and append it to the &lt;code&gt;itemList&lt;/code&gt;. Finally, we return &lt;code&gt;itemList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what our set up looks like so far:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// skip the headers on the first line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWorth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItemWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our data structures set up, let&amp;rsquo;s get packing (🥁) on the first approach.&lt;/p&gt;
&lt;h1 id=&#34;greedy-algorithm&#34;&gt;Greedy algorithm&lt;/h1&gt;
&lt;p&gt;A greedy algorithm is the most straightforward approach to solving the knapsack problem, in that it is a one-pass algorithm that constructs a single final solution. At each stage of the problem, the greedy algorithm picks the option that is locally optimal, meaning it looks like the most suitable option right now. It does not revise its previous choices as it progresses through our data set.&lt;/p&gt;
&lt;h2 id=&#34;building-our-greedy-algorithm&#34;&gt;Building our greedy algorithm&lt;/h2&gt;
&lt;p&gt;The steps of the algorithm we&amp;rsquo;ll use to solve our knapsack problem are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sort items by worth, in descending order.&lt;/li&gt;
&lt;li&gt;Start with the highest worth item. Put items into the bag until the next item on the list cannot fit.&lt;/li&gt;
&lt;li&gt;Try to fill any remaining capacity with the next item on the list that can fit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you read my &lt;a href=&#34;https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/&#34;&gt;article about solving problems and making paella&lt;/a&gt;, you&amp;rsquo;ll know that I always start by figuring out what the next most important question is. In this case, there are three main operations we need to figure out how to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort items by worth.&lt;/li&gt;
&lt;li&gt;Put an item in the bag.&lt;/li&gt;
&lt;li&gt;Check to see if the bag is full.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is just a docs lookup away. Here&amp;rsquo;s how we sort a slice in Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;sort.Slice()&lt;/code&gt; function orders our items according to the less function we provide. In this case, it will order the highest worth items before the lowest worth items.&lt;/p&gt;
&lt;p&gt;Given that we don&amp;rsquo;t want to put an item in the bag if it doesn&amp;rsquo;t fit, we&amp;rsquo;ll complete the last two tasks in reverse. First, we&amp;rsquo;ll check to see if the item fits. If so, it goes in the bag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not fit item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code&gt;*&lt;/code&gt; in our first line there. That indicates that &lt;code&gt;bag&lt;/code&gt; is a pointer receiver (as opposed to a value receiver). It&amp;rsquo;s a concept that can be slightly confusing if you&amp;rsquo;re new to Go. Here are &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments#receiver-type&#34;&gt;some things to consider&lt;/a&gt; that might help you decide when to use a value receiver and when to use a pointer receiver. For the purposes of our &lt;code&gt;addItem()&lt;/code&gt; function, this case applies:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the method needs to mutate the receiver, the receiver must be a pointer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our use of a pointer receiver tells our function we want to operate on &lt;em&gt;this specific bag in particular&lt;/em&gt;, not a new bag. It&amp;rsquo;s important because without it, every item would always fit in a newly created bag! A little detail like this can make the difference between code that works and code that keeps you up until 4am chugging Red Bull and muttering to yourself. (Go to bed on time even if your code doesn&amp;rsquo;t work - you&amp;rsquo;ll thank me later.)&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got our components, let&amp;rsquo;s put together our greedy algorithm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in our &lt;code&gt;main()&lt;/code&gt; function, we&amp;rsquo;ll create our bag, read in our data, and call our greedy algorithm. Here&amp;rsquo;s what it looks like, all set up and ready to go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;greedy-algorithm-results&#34;&gt;Greedy algorithm results&lt;/h2&gt;
&lt;p&gt;So how does this algorithm do when it comes to efficiently packing our bag to maximize its total worth? Here&amp;rsquo;s the result:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6987g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 716&lt;/p&gt;
&lt;p&gt;Here are the items our greedy algorithm chose, sorted by worth:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lenovo X1 Carbon (5th Gen)&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup PlusSlim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchylong-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It&amp;rsquo;s clear that the greedy algorithm is a straightforward way to quickly find a feasible solution. For small data sets, it will probably be close to the optimal solution. The algorithm packed a total item worth of 716 (104 points less than the maximum possible value), while filling the bag with just 13g left over.&lt;/p&gt;
&lt;p&gt;As we learned earlier, the greedy algorithm doesn&amp;rsquo;t improve upon the solution it returns. It simply adds the next highest worth item it can to the bag.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at another method for solving the knapsack problem that will give us the optimal solution - the highest possible total worth under the weight limit.&lt;/p&gt;
&lt;h1 id=&#34;dynamic-programming&#34;&gt;Dynamic programming&lt;/h1&gt;
&lt;p&gt;The name &amp;ldquo;dynamic programming&amp;rdquo; can be a bit misleading. It&amp;rsquo;s not a style of programming, as the name might cause you to infer, but simply another approach.&lt;/p&gt;
&lt;p&gt;Dynamic programming differs from the straightforward greedy algorithm in a few key ways. Firstly, a dynamic programming bag packing solution enumerates the entire solution space with all possibilities of item combinations that could be used to pack our bag. Where a greedy algorithm chooses the most optimal &lt;em&gt;local&lt;/em&gt; solution, dynamic programming algorithms are able to find the most optimal &lt;em&gt;global&lt;/em&gt; solution.&lt;/p&gt;
&lt;p&gt;Secondly, dynamic programming uses memoization to store the results of previously computed operations and returns the cached result when the operation occurs again. This allows it to &amp;ldquo;remember&amp;rdquo; previous combinations. This takes less time than it would to re-compute the answer again.&lt;/p&gt;
&lt;h2 id=&#34;building-our-dynamic-programming-algorithm&#34;&gt;Building our dynamic programming algorithm&lt;/h2&gt;
&lt;p&gt;To use dynamic programming to find the optimal recipe for packing our bag, we&amp;rsquo;ll need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a matrix representing all subsets of the items (the solution space) with rows representing items and columns representing the bag&amp;rsquo;s remaining weight capacity&lt;/li&gt;
&lt;li&gt;Loop through the matrix and calculate the worth that can be obtained by each combination of items at each stage of the bag&amp;rsquo;s capacity&lt;/li&gt;
&lt;li&gt;Examine the completed matrix to determine which items to add to the bag in order to produce the maximum possible worth for the bag in total&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will be most helpful to visualize our solution space. Here&amp;rsquo;s a representation of what we&amp;rsquo;re building with our code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-matrix.jpg&#34; alt=&#34;A sketch of the matrix with rows for items and columns for grams of weight.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;The empty knapsackian multiverse.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;In Go, we can create this matrix as a slice of slices.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// rows representing items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// columns representing grams of weight
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve padded the rows and columns by &lt;code&gt;1&lt;/code&gt; so that the indicies match the item and weight numbers.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve created our matrix, we&amp;rsquo;ll fill it by looping over the rows and the columns:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// loop through table rows
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table columns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// do stuff in each element
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then for each element, we&amp;rsquo;ll calculate the worth value to ascribe to it. We do this with code that represents the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the item at the index matching the current row fits within the weight capacity represented by the current column, take the maximum of either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The total worth of the items already in the bag or,&lt;/li&gt;
&lt;li&gt;The total worth of all the items in the bag except the item at the previous row index, plus the new item&amp;rsquo;s worth&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, as our algorithm considers one of the items, we&amp;rsquo;re asking it to decide whether this item added to the bag would produce a higher total worth than the last item it added to the bag, at the bag&amp;rsquo;s current total weight. If this current item is a better choice, put it in - if not, leave it out.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code that accomplishes this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// if weight of item matching this index can fit at the current capacity column...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without this item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without the previous item, and this item instead
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// take maximum of either valueOne or valueTwo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if the new worth is not more, carry over the previous worth
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This process of comparing item combinations will continue until every item has been considered at every possible stage of the bag&amp;rsquo;s increasing total weight. When all the above have been considered, we&amp;rsquo;ll have enumerated the solution space - filled the matrix - with all possible total worth values.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll have a big chart of numbers, and in the last column at the last row we&amp;rsquo;ll have our highest possible value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;knapsack-matrix-filled.jpg&#34; alt=&#34;A strictly representative representation of the filled matrix.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;A strictly representative representation of the filled matrix.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s great, but how do we find out which combination of items were put in the bag to achieve that worth?&lt;/p&gt;
&lt;h2 id=&#34;getting-our-optimized-item-list&#34;&gt;Getting our optimized item list&lt;/h2&gt;
&lt;p&gt;To see which items combine to create our optimal packing list, we&amp;rsquo;ll need to examine our matrix in reverse to the way we created it. Since we know the highest possible value is in the last row in the last column, we&amp;rsquo;ll start there. To find the items, we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the value of the current cell&lt;/li&gt;
&lt;li&gt;Compare the value of the current cell to the value in the cell directly above it&lt;/li&gt;
&lt;li&gt;If the values differ, there was a change to the bag items; find the next cell to examine by moving backwards through the columns according to the current item&amp;rsquo;s weight (find the value of the bag before this current item was added)&lt;/li&gt;
&lt;li&gt;If the values match, there was no change to the bag items; move up to the cell in the row above and repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The nature of the action we&amp;rsquo;re trying to achieve lends itself well to a recursive function. If you recall from &lt;a href=&#34;https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/&#34;&gt;my previous article about making apple pie&lt;/a&gt;, recursive functions are simply functions that call themselves under certain conditions. Here&amp;rsquo;s what it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code&gt;checkItem()&lt;/code&gt; function calls itself if the condition we described in step 4 is true. If step 3 is true, it also calls itself, but with different arguments.&lt;/p&gt;
&lt;p&gt;Recursive functions require a base case. In this example, we want the function to stop once we run out of values of worth to compare. Thus our base case is when either &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;w&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how the dynamic programming approach looks when it&amp;rsquo;s all put together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// number of items in knapsack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// capacity of knapsack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// create the empty matrix
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// rows representing items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// columns representing grams of weight
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table rows
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// loop through table columns
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if weight of item matching this index can fit at the current capacity column...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without this item
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// worth of this subset without the previous item, and this item instead
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// take maximum of either valueOne or valueTwo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;valueTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// if the new worth is not more, carry over the previous worth
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// add other statistics to the bag
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWorth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalWeight&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;dynamic-programming-results&#34;&gt;Dynamic programming results&lt;/h2&gt;
&lt;p&gt;We expect that the dynamic programming approach will give us a more optimized solution than the greedy algorithm. So did it? Here are the results:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6982g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 757&lt;/p&gt;
&lt;p&gt;Here are the items our dynamic programming algorithm chose, sorted by worth:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup Plus Slim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchy long-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Important papers&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deuter First Aid Kit Active&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stanley Classic Vacuum Camp Mug 16oz&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;454&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anker SoundCore nano Bluetooth Speaker&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ray Ban Wayfarer Classic&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peak Design Cuff Camera Wrist Strap&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Travelon Micro Scale&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humangear GoBites Duo&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There&amp;rsquo;s an obvious improvement to our dynamic programming solution over what the greedy algorithm gave us. Our total worth of 757 is 41 points greater than the greedy algorithm&amp;rsquo;s solution of 716, and for a few grams less weight too!&lt;/p&gt;
&lt;h2 id=&#34;input-sort-order&#34;&gt;Input sort order&lt;/h2&gt;
&lt;p&gt;While testing my dynamic programming solution, I implemented the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher-Yates shuffle algorithm&lt;/a&gt; on the input before passing it into my function, just to ensure that the answer wasn&amp;rsquo;t somehow dependent on the sort order of the input. Here&amp;rsquo;s what the shuffle looks like in Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UnixNano&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Intn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course I then realized that Go 1.10 now has a built-in shuffle&amp;hellip; it works precisely the same way and looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So did the order in which the items were processed affect the outcome? Well&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;suddenly-a-rogue-weight-appears&#34;&gt;Suddenly&amp;hellip; a rogue weight appears!&lt;/h3&gt;
&lt;p&gt;As it turns out, in a way, the answer did depend on the order of the input. When I ran my dynamic programming algorithm several times, I sometimes saw a different total weight for the bag, though the total worth remained at 757. I initially thought this was a bug before examining the two sets of items that accompanied the two different total weight values. Everything was the same except for a few changes that collectively added up to a different item subset accounting for 14 of the 757 worth points.&lt;/p&gt;
&lt;p&gt;In this case, there were two equally optimal solutions based only on the success metric of the highest total possible worth. Shuffling the input seemed to affect the placement of the items in the matrix and thus, the path that the &lt;code&gt;checkItem()&lt;/code&gt; function took as it went through the matrix to find the chosen items. Since the success metric of having the highest possible worth was the same in both item sets, we don&amp;rsquo;t have a single unique solution - there&amp;rsquo;s two!&lt;/p&gt;
&lt;p&gt;As an academic exercise, both these sets of items are correct answers. We may choose to optimize further by another metric, say, the total weight of all the items. The highest possible worth at the least possible weight could be seen as an ideal solution.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the second, lighter, dynamic programming result:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total weight of bag and items:&lt;/strong&gt; 6955g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total worth of packed items:&lt;/strong&gt; 757&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Worth&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 pairs thongs&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 Underarmour Strappy&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair Uniqlo leggings&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Lululemon Cool Racerback&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chargers and cables in Mini Bomber Travel Kit&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Roost Stand&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThinkPad Compact Bluetooth Keyboard with trackpoint&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate Backup Plus Slim&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 pair black denim shorts&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Nike Pro shorts&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Lululemon shorts&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isabella T-Strap Croc sandals&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 Underarmour HeatGear CoolSwitch tank tops&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 pairs black socks&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 pairs Injinji Women&amp;rsquo;s Run Lightweight No-Show Toe Socks&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 fancy tank top&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 light and stretchy long-sleeve shirt (Gap Fit)&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uniqlo Ultralight Down insulating jacket&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patagonia Torrentshell&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lightweight Merino Wool Buff&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 LBD (H&amp;amp;M)&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field Notes Pitch Black Memo Book Dot-Graph&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innergie PocketCell USB-C 6000mAh power bank&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;148&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Important papers&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deuter First Aid Kit Active&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBL Reflect Mini Bluetooth Sport Headphones&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anker SoundCore nano Bluetooth Speaker&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oakley Latch Sunglasses&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ray Ban Wayfarer Classic&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zip bag of toiletries&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Petzl E+LITE Emergency Headlamp&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peak Design Cuff Camera Wrist Strap&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Travelon Micro Scale&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlitzWolf Bluetooth Tripod/Monopod&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humangear GoBites Duo&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vapur Bottle 1L&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;which-approach-is-better&#34;&gt;Which approach is better?&lt;/h1&gt;
&lt;h2 id=&#34;go-benchmarking&#34;&gt;Go benchmarking&lt;/h2&gt;
&lt;p&gt;The Go standard library&amp;rsquo;s &lt;code&gt;testing&lt;/code&gt; package makes it straightforward for us to &lt;a href=&#34;https://golang.org/pkg/testing/#hdr-Benchmarks&#34;&gt;benchmark&lt;/a&gt; these two approaches. We can find out how long it takes each algorithm to run, and how much memory each uses. Here&amp;rsquo;s a simple &lt;code&gt;main_test.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Benchmark_greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;greedy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Benchmark_dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;objects.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bagWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxItemsWeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;dynamic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minaal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can run &lt;code&gt;go test -bench=. -benchmem&lt;/code&gt; to see these results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Benchmark_greedy-4 &lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1619&lt;/span&gt; ns/op &lt;span class=&#34;m&#34;&gt;2128&lt;/span&gt; B/op &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; allocs/op
Benchmark_dynamic-4 &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1545322&lt;/span&gt; ns/op &lt;span class=&#34;m&#34;&gt;2020332&lt;/span&gt; B/op &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt; allocs/op&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;greedy-algorithm-performance&#34;&gt;Greedy algorithm performance&lt;/h3&gt;
&lt;p&gt;After running the greedy algorithm 1,000,000 times, the speed of the algorithm was reliably measured to be 0.001619 milliseconds (translation: very fast). It required 2128 Bytes or 2-ish kilobytes of memory and 9 distinct memory allocations per iteration.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-programming-performance&#34;&gt;Dynamic programming performance&lt;/h3&gt;
&lt;p&gt;The dynamic programming algorithm was run 1,000 times. Its speed was measured to be 1.545322 milliseconds or 0.001545322 seconds (translation: still pretty fast). It required 2,020,332 Bytes or 2-ish Megabytes, and 49 distinct memory allocations per iteration.&lt;/p&gt;
&lt;h2 id=&#34;the-verdict&#34;&gt;The verdict&lt;/h2&gt;
&lt;p&gt;Part of choosing the right approach to solving any programming problem is taking into account the size of the input data set. In this case, it&amp;rsquo;s a small one. In this scenario, a one-pass greedy algorithm will always be faster and less resource-needy than dynamic programming, simply because it has fewer steps. Our greedy algorithm was almost two orders of magnitude faster and less memory-hungry than our dynamic programming algorithm.&lt;/p&gt;
&lt;p&gt;Not having those extra steps, however, means that getting the best possible solution from the greedy algorithm is unlikely.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s clear that the dynamic programming algorithm gave us better numbers: a lower weight, and higher overall worth.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Greedy algorithm&lt;/th&gt;
&lt;th&gt;Dynamic programming&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total weight:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;6987g&lt;/td&gt;
&lt;td&gt;6955g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total worth:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;716&lt;/td&gt;
&lt;td&gt;757&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Where dynamic programming on small data sets lacks in performance, it makes up in optimization. The question then becomes whether that additional optimization is worth the performance cost.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Better,&amp;rdquo; of course, is a subjective judgement. If speed and low resource usage is our success metric, then the greedy algorithm is clearly better. If the total worth of items in the bag is our success metric, then dynamic programming is clearly better. However, our scenario is a practical one, and only one of these algorithm designs returned an answer I&amp;rsquo;d choose. In optimizing for the overall greatest possible total worth of the items in the bag, the dynamic programming algorithm left out my highest-worth, but also heaviest, item: my laptop. The chargers and cables, Roost stand, and keyboard that were included aren&amp;rsquo;t much use without it.&lt;/p&gt;
&lt;h2 id=&#34;better-algorithm-design&#34;&gt;Better algorithm design&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a simple way to alter the dynamic programming approach so that the laptop is always included: we can modify the data so that the worth of the laptop is greater than the sum of the worth of all the other items. (Try it out!)&lt;/p&gt;
&lt;p&gt;Perhaps in re-designing the dynamic programming algorithm to be more practical, we might choose another success metric that better reflects an item&amp;rsquo;s importance, instead of a subjective worth value. There are many possible metrics we can use to represent the value of an item. Here are a few examples of a good proxy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amount of time spent using the item&lt;/li&gt;
&lt;li&gt;Initial cost of purchasing the item&lt;/li&gt;
&lt;li&gt;Cost of replacement if the item were lost today&lt;/li&gt;
&lt;li&gt;Dollar value of the product of using the item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the same token, the greedy algorithm&amp;rsquo;s results might be improved with the use of one of these alternate metrics.&lt;/p&gt;
&lt;p&gt;On top of choosing an appropriate approach to solving the knapsack problem in general, it is helpful to design our algorithm in a way that translates the practicalities of a scenario into code.&lt;/p&gt;
&lt;p&gt;There are many considerations for better algorithm design beyond the scope of this introductory post. One of these is &lt;strong&gt;time complexity&lt;/strong&gt;, and I&amp;rsquo;ve &lt;a href=&#34;https://victoria.dev/blog/a-coffee-break-introduction-to-time-complexity-of-algorithms/&#34;&gt;written about it here&lt;/a&gt;. A future algorithm may very well decide my bag&amp;rsquo;s contents on the next trip, but we&amp;rsquo;re not quite there yet. Stay tuned!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/knapsack-problem-algorithms-for-my-real-life-carry-on-knapsack/cover_knapsack-doodle_hu7070e09a25cc0b4f24775e27e4fe15a9_203336_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Why I&#39;m automatically deleting my old tweets using AWS Lambda</title><link>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</link><pubDate>Thu, 12 Apr 2018 10:51:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/</guid><description>From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.</description><content:encoded>
&lt;p&gt;From now on, my tweets are ephemeral. Here’s why I’m deleting all my old tweets, and the AWS Lambda function I’m using to do all this for free.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://victoria.dev/blog/why-im-automatically-deleting-my-old-tweets-using-aws-lambda/#ephemeral-tweets&#34;&gt;&lt;em&gt;Click here to skip to the code part.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;stuff-and-opinions&#34;&gt;Stuff and opinions&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve only been a one-bag nomad for a little over a year and a half. Before that, I lived as most people do in an apartment or a house. I owned furniture, more clothing than I strictly needed, and enough &amp;ldquo;stuff&amp;rdquo; to fill at least a few moving boxes. If I went to live somewhere else, moving for school or family or work, I packed up all my things and brought them with me. Over the years, I accumulated more and more stuff.&lt;/p&gt;
&lt;p&gt;Adopting what many would call a minimalist lifestyle has rapidly changed a lot of my longstanding views. Giving away all my stuff (an idea I once thought to be interesting in principle but practically a little bit ridiculous) has become normal. It&amp;rsquo;s normal for me, now, to not own things that I don&amp;rsquo;t use on a regular basis. I don&amp;rsquo;t keep wall shelves packed with old books or dishes or clothing or childhood toys because those items aren&amp;rsquo;t relevant to me anymore. I just keep fond memories, instead.&lt;/p&gt;
&lt;p&gt;Imagine, for a moment, that I still lived in a house. Imagine that in that house, on the fridge, is a drawing I made when I was six-years-old. In the bottom right corner of that drawing scribbled in green crayon are the words &amp;ldquo;broccoli is dumb - Victoria, Age 6.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you were in my house and saw that drawing on the fridge, would you assume that the statement &amp;ldquo;broccoli is dumb&amp;rdquo; comprised an accurate and current account of my opinions on broccoli? Of course not. I was six when I wrote that. I&amp;rsquo;ve had plenty of time to change my mind.&lt;/p&gt;
&lt;h1 id=&#34;social-media-isn-t-social&#34;&gt;Social media isn&amp;rsquo;t social&lt;/h1&gt;
&lt;p&gt;I have a friend whom I&amp;rsquo;ve known since we were both in kindergarten. We went through grade school together, then spoke to and saw each other on infrequent occasions across the years. We&amp;rsquo;re both adults now. Sometimes when we chat, we&amp;rsquo;ll recall some amusing memory from when we were younger. The nature of memory being what it is, I have no illusion that what we recall is recounted with much accuracy. Our impressions of things that happened - mistakes we made and moments of victory alike - are coloured by the experiences we&amp;rsquo;ve had since then, and all the things we&amp;rsquo;ve learned. An awkward moment at a school colleague&amp;rsquo;s birthday party becomes an example of a child learning to socialize, instead of the world-ending moment of embarrassment it probably felt like at the time.&lt;/p&gt;
&lt;p&gt;This is how memory works. In a sense, it gets updated, as well it should. People living in small communities remember things that their neighbour did many years ago, but recall them in the context of who their neighbour is now, and what their current relationship is like. This re-colouring of history is an important part of how people &lt;a href=&#34;https://www.smithsonianmag.com/science-nature/how-our-brains-make-memories-14466850/&#34;&gt;heal&lt;/a&gt;, &lt;a href=&#34;http://news.feinberg.northwestern.edu/2014/02/memory_rewrite/&#34;&gt;make good decisions&lt;/a&gt;, and &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709095/&#34;&gt;socialize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Social media does not do this. Your perfectly preserved tweet from five days or five years ago can be recalled with absolute accuracy. For most people, this is not particularly worrying. We tend to tweet about pretty mundane things - things that pop into mind when we&amp;rsquo;re bored and want someone to notice us. Individually, usually, our old tweets are pretty insignificant. In aggregate, however, they paint a pretty complete picture of a person&amp;rsquo;s random, unintentionally telling thoughts. This is the problem.&lt;/p&gt;
&lt;p&gt;The assumption made of things written in social media and on Twitter specifically is a very different assumption than you might make about someone&amp;rsquo;s notepad scribble from last week. I&amp;rsquo;m not endeavoring to speculate why - I&amp;rsquo;ve just seen enough cases of someone getting publicly flogged for something they posted years ago to know that it does happen. This is weird. If you wouldn&amp;rsquo;t assume that a notepad scribble from last week or a crayon drawing from decades ago reflects the essence of who someone is &lt;em&gt;now,&lt;/em&gt; why would you assume that an old tweet does?&lt;/p&gt;
&lt;p&gt;You are not the same person you were last month - you&amp;rsquo;ve seen things, read things, understood and learned things that have, in some small way, changed you. While a person may have the same sense of self and identity through most of their life, even this grows and changes over the years. We change our opinions, our desires, our habits. We are not stagnant beings, and we should not let ourselves be represented as such, however unintentionally.&lt;/p&gt;
&lt;h1 id=&#34;ephemeral-tweets&#34;&gt;Ephemeral tweets&lt;/h1&gt;
&lt;p&gt;If you look at my Twitter profile page today, you&amp;rsquo;ll see fewer tweets there than you have fingers (I hope). I&amp;rsquo;m using &lt;a href=&#34;https://github.com/victoriadrake/ephemeral&#34;&gt;ephemeral&lt;/a&gt; - a lightweight utility I wrote for use on &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; - to delete all my tweets older than a few days. I&amp;rsquo;m doing this for the same reason that I don&amp;rsquo;t hang on to stuff that I no longer use - that stuff isn&amp;rsquo;t relevant to me anymore. It doesn&amp;rsquo;t represent me, either.&lt;/p&gt;
&lt;p&gt;The code that makes up ephemeral is written in Go. AWS Lambda creates an environment for each Lambda function, so ephemeral utilizes environment variables for your private Twitter API keys and the maximum age of the tweets you want to keep, represented in hours, like &lt;code&gt;72h&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;consumerSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;accessTokenSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TWITTER_ACCESS_TOKEN_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;maxTweetAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MAX_TWEET_AGE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;logger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;missing required environment variable &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program uses the &lt;a href=&#34;https://github.com/ChimeraCoder/anaconda&#34;&gt;anaconda&lt;/a&gt; library. It fetches your timeline up to the Twitter API&amp;rsquo;s limit of 200 tweets per request, then compares each tweet&amp;rsquo;s date of creation to your &lt;code&gt;MAX_TWEET_AGE&lt;/code&gt; variable to decide whether it&amp;rsquo;s old enough to be deleted. After deleting all the expired tweets, the Lambda function terminates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deleteFromTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anaconda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TwitterApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getTimeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not get timeline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CreatedAtTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Couldn&amp;#39;t parse time &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ageLimit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DeleteTweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DELETED: Age - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; - &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to delete! &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No more tweets to delete.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read the full code &lt;a href=&#34;https://github.com/victoriadrake/ephemeral/blob/master/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a use case like this, AWS Lambda has a free tier that costs nothing. If you&amp;rsquo;re any level of developer, it&amp;rsquo;s an extremely useful tool to become familiar with. For a full walkthrough with screenshots of how to set up a Lambda function that tweets for you, you can read &lt;a href=&#34;https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/&#34;&gt;this article&lt;/a&gt;. The set up for ephemeral is the same, it just has an opposite function. :)&lt;/p&gt;
&lt;p&gt;I forked ephemeral from Adam Drake&amp;rsquo;s &lt;a href=&#34;https://github.com/adamdrake/harold&#34;&gt;Harold&lt;/a&gt;, a Twitter tool that has many useful functions beyond keeping your timeline trimmed. If you have more than 200 tweets to delete at first pass, please use Harold to do that first. You can run Harold with the &lt;code&gt;deletetimeline&lt;/code&gt; flag from your terminal.&lt;/p&gt;
&lt;p&gt;You may like to first &lt;a href=&#34;https://twitter.com/settings/your_twitter_data&#34;&gt;download all your tweets before deleting them&lt;/a&gt; for sentimental value.&lt;/p&gt;
&lt;h1 id=&#34;why-use-twitter-at-all&#34;&gt;Why use Twitter at all?&lt;/h1&gt;
&lt;p&gt;In anticipation of the question, let me say that yes, I do use Twitter besides just as a bucket for my Lambda functions to fill and empty. It has its benefits, most related to what I perceive to be its original intended purpose: to be a means of near-instant communication for short, digestible pieces of information reaching a widespread pool of people.&lt;/p&gt;
&lt;p&gt;I use it as a way to keep tabs on what&amp;rsquo;s happening &lt;em&gt;right now.&lt;/em&gt; I use it to comment on, joke about, and commiserate with things tweeted by the people I follow &lt;em&gt;right now.&lt;/em&gt; By keeping my timeline restricted to only the most recent few days, I feel like I&amp;rsquo;m using Twitter more like it was meant to be used: a way to join the conversation and see what&amp;rsquo;s happening in the world &lt;em&gt;right now&lt;/em&gt; - instead of just another place to amass more &amp;ldquo;stuff.&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Running a free Twitter bot on AWS Lambda</title><link>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</link><pubDate>Mon, 05 Mar 2018 10:29:15 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/</guid><description>How to save some time with automated link sharing on Twitter - for free!</description><content:encoded>
&lt;img src="https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;If you read &lt;a href=&#34;https://victoria.dev/blog/about-time/&#34;&gt;About time&lt;/a&gt;, you&amp;rsquo;ll know that I&amp;rsquo;m a big believer in spending time now on building things that save time in the future. To this end I built a simple Twitter bot in Go that would occasionally post links to my articles and keep my account interesting even when I&amp;rsquo;m too busy to use it. The tweets help drive traffic to my sites, and I don&amp;rsquo;t have to lift a finger.&lt;/p&gt;
&lt;p&gt;I ran the bot on an Amazon EC2 instance for about a month. My AWS usage has historically been pretty inexpensive (less than the price of a coffee in most of North America), so I was surprised when the little instance I was using racked up a bill 90% bigger than the month before. I don&amp;rsquo;t think AWS is expensive, to be clear, but still&amp;hellip; I&amp;rsquo;m cheap. I want my Twitter bot, and I want it for less.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d been meaning to explore AWS Lamda, and figured this was a good opportunity. Unlike an EC2 instance that is constantly running (and charging you for it), Lambda charges you per request and according to the duration of time your function takes to run. There&amp;rsquo;s a free tier, too, and the first 1 million requests, plus a certain amount of compute time, are free. Roughly translated to running a Twitter bot that posts for you, say, twice a day, your monthly cost for using Lambda would total&amp;hellip; carry the one&amp;hellip; nothing. I&amp;rsquo;ve been running my Lambda function for a couple weeks now, completely free.&lt;/p&gt;
&lt;p&gt;When recently it came to me to take the reigns of the &lt;a href=&#34;https://twitter.com/freeCodeCampTO&#34;&gt;@freeCodeCampTO&lt;/a&gt; Twitter, I decided to employ a similar strategy, and also use this opportunity to document the process for you, dear reader.&lt;/p&gt;
&lt;p&gt;So if you&amp;rsquo;re currently using a full-time running instance for a task that could be served by a cron job, this is the article for you. I&amp;rsquo;ll cover how to write your function for Lambda, how to get it set up to run automatically, and as a sweet little bonus, a handy bash script that updates your function from the command line whenever you need to make a change. Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h1 id=&#34;is-lambda-right-for-you&#34;&gt;Is Lambda right for you?&lt;/h1&gt;
&lt;p&gt;When I wrote the code for my Twitter bot in Go, I intended to have it run on an AWS instance and borrowed heavily from &lt;a href=&#34;https://github.com/campoy/justforfunc/tree/master/14-twitterbot&#34;&gt;Francesc&amp;rsquo;s awesome Just for Func episode&lt;/a&gt;. Some time later I modified it to randomly choose an article from my RSS feeds and tweet the link, twice a day. I wanted to do something similar for the @freeCodeCampTO bot, and have it tweet an inspiring quote about programming every morning.&lt;/p&gt;
&lt;p&gt;This is a good use case for Lambda because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The program should execute once&lt;/li&gt;
&lt;li&gt;It runs on a regular schedule, using time as a trigger&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t need to run constantly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The important thing to keep in mind is that Lambda runs a function once in response to an event that you define. The most widely applicable trigger is a simple cron expression, but there are many other trigger events you can hook up. You can get an overview &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;write-a-lambda-function&#34;&gt;Write a Lambda function&lt;/h1&gt;
&lt;p&gt;I found this really straightforward to do in Go. First, grab the &lt;a href=&#34;https://github.com/aws/aws-lambda-go&#34;&gt;aws-lambda-go&lt;/a&gt; library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/aws/aws-lambda-go/lambda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then make this your &lt;code&gt;func main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tweetFeed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;tweetFeed&lt;/code&gt; is the name of the function that makes everything happen. While I won&amp;rsquo;t go into writing the whole Twitter bot here, you can view my code &lt;a href=&#34;https://gist.github.com/victoriadrake/7859dab68df87e28f40d6715d08383c7&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-aws-lambda&#34;&gt;Setting up AWS Lambda&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m assuming you already have an AWS account. If not, first things first here: &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-create-your-function&#34;&gt;1. Create your function&lt;/h2&gt;
&lt;p&gt;Find AWS Lambda in the list of services, then look for this shiny button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-01.png#screenshot&#34; alt=&#34;Create function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to author a function from scratch. Name your function, then under &lt;strong&gt;Runtime&lt;/strong&gt; choose &amp;ldquo;Go 1.x&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Role name&lt;/strong&gt; write any name you like. It&amp;rsquo;s a required field but irrelevant for this use case.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Create function.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-02.png#screenshot&#34; alt=&#34;Author from scratch&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-configure-your-function&#34;&gt;2. Configure your function&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll see a screen for configuring your new function. Under &lt;strong&gt;Handler&lt;/strong&gt; enter the name of your Go program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-03.png#screenshot&#34; alt=&#34;Configure your function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you scroll down, you&amp;rsquo;ll see a spot to enter environment variables. This is a great place to enter the Twitter API tokens and secrets, using the variable names that your program expects. The AWS Lambda function will create the environment for you using the variables you provide here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-04.png#screenshot&#34; alt=&#34;Environment variables&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No further settings are necessary for this use case. Click &lt;strong&gt;Save&lt;/strong&gt; at the top of the page.&lt;/p&gt;
&lt;h2 id=&#34;3-upload-your-code&#34;&gt;3. Upload your code&lt;/h2&gt;
&lt;p&gt;You can upload your function code as a zip file on the configuration screen. Since we&amp;rsquo;re using Go, you&amp;rsquo;ll want to &lt;code&gt;go build&lt;/code&gt; first, then zip the resulting executable before uploading that to Lambda.&lt;/p&gt;
&lt;p&gt;&amp;hellip;Of course I&amp;rsquo;m not going to do that manually every time I want to tweak my function. That&amp;rsquo;s what &lt;code&gt;awscli&lt;/code&gt; and this bash script is for!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go build &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;zip fcc-tweet.zip fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;aws lambda update-function-code --function-name fcc-tweet --zip-file fileb://fcc-tweet.zip &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;rm fcc-tweet.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever I make a tweak, I just run &lt;code&gt;bash update.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not already using &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS Command Line Interface&lt;/a&gt;, do &lt;code&gt;pip install awscli&lt;/code&gt; and thank me later. Find instructions for getting set up and configured in a few minutes &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;here&lt;/a&gt; under &lt;strong&gt;Quick Configuration&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-test-your-function&#34;&gt;4. Test your function&lt;/h2&gt;
&lt;p&gt;Wanna see it go? Of course you do! Click &amp;ldquo;Configure test events&amp;rdquo; in the dropdown at the top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-05.png#screenshot&#34; alt=&#34;Configure test events&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since you&amp;rsquo;ll use a time-based trigger for this function, you don&amp;rsquo;t need to enter any code to define test events in the popup window. Simply write any name under &lt;strong&gt;Event name&lt;/strong&gt; and empty the JSON in the field below. Then click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-06.png#screenshot&#34; alt=&#34;Configuring an empty test event&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Test&lt;/strong&gt; at the top of the page, and if everything is working correctly you should see&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-07.png#screenshot&#34; alt=&#34;Test success notification&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-set-up-cloudwatch-events&#34;&gt;5. Set up CloudWatch Events&lt;/h2&gt;
&lt;p&gt;To run our function as we would a cron job - as a regularly scheduled time-based event - we&amp;rsquo;ll use CloudWatch. Click &lt;strong&gt;CloudWatch Events&lt;/strong&gt; in the &lt;strong&gt;Designer&lt;/strong&gt; sidebar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-08.png#screenshot&#34; alt=&#34;CloudWatch Events trigger&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Configure triggers&lt;/strong&gt;, you&amp;rsquo;ll create a new rule. Choose a descriptive name for your rule without spaces or punctuation, and ensure &lt;strong&gt;Schedule expression&lt;/strong&gt; is selected. Then input the time you want your program to run as a &lt;em&gt;rate expression&lt;/em&gt;, or cron expression.&lt;/p&gt;
&lt;p&gt;A cron expression looks like this: &lt;code&gt;cron(0 12 * * ? *)&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Minutes&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Day of month&lt;/th&gt;
&lt;th&gt;Month&lt;/th&gt;
&lt;th&gt;Day of week&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;In English&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Run at noon (UTC) every day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more on how to write your cron expressions, read &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html&#34;&gt;this.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To find out what the current time in UTC is, click &lt;a href=&#34;https://codepen.io/victoriadrake/full/OQabar/&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want your program to run twice a day, say once at 10am and again at 3pm, you&amp;rsquo;ll need to set two separate CloudWatch Events triggers and cron expression rules.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;lambda-09.png#screenshot&#34; alt=&#34;Set cron expression rule&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;watch-it-go&#34;&gt;Watch it go&lt;/h1&gt;
&lt;p&gt;That&amp;rsquo;s all you need to get your Lambda function up and running! Now you can sit back, relax, and do more important things than share your RSS links on Twitter.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/running-a-free-twitter-bot-on-aws-lambda/cover_lambda-doodle_hucb9f83d1ec58f009806cb9ad01277199_85268_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Moving to a new domain without breaking old links with AWS &amp; Disqus</title><link>https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</link><pubDate>Wed, 10 Jan 2018 08:56:20 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</guid><description>I moved my site&#39;s blog to its own domain without breaking old links or losing comments. Here&#39;s how.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/cover_aws-moving_hu21a1b010075379d4e5c1954a648363b3_119465_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;I started blogging about my nomadic travels last year, and so far the habit has stuck. Like all side projects, I won&amp;rsquo;t typically invest heavily in setting up web properties before I can be reasonably certain that such an investment is worth my time or enjoyment. In other words: don&amp;rsquo;t buy the domain until you&amp;rsquo;ve proven to yourself that you&amp;rsquo;ll stick with it!&lt;/p&gt;
&lt;p&gt;After some months of regular posting I felt I was ready to commit (short courtship, I know, but we&amp;rsquo;re all adults here) and I bought a dedicated domain, &lt;a href=&#34;https://heronebag.com&#34;&gt;herOneBag.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until recently, my #NomadLyfe blog was just a subdirectory of my main personal site. Now it&amp;rsquo;s all grown up and ready to strike out into the world alone! Here&amp;rsquo;s the setup for the site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;li&gt;Disqus for comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like a walk-through for how to set up a new domain with this structure, it&amp;rsquo;s over here: &lt;a href=&#34;https://victoria.dev/verbose/aws-static-site/&#34;&gt;Hosting your static site with AWS S3, Route 53, and CloudFront&lt;/a&gt;. In this post, I&amp;rsquo;ll just detail how I managed to move my blog to the new site without breaking the old links or losing any comments.&lt;/p&gt;
&lt;h1 id=&#34;preserve-old-links-with-redirection-rules&#34;&gt;Preserve old links with redirection rules&lt;/h1&gt;
&lt;p&gt;I wanted to avoid breaking links that have been posted around the web by forwarding visitors to the new URL. The change looks like this:&lt;/p&gt;
&lt;p&gt;Old URL: &lt;code&gt;https://victoria.dev/meta/5-bag-lessons/&lt;/code&gt;&lt;br /&gt;
New URL: &lt;code&gt;https://heronebag.com/blog/5-bag-lessons/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see that the domain name as well as the subdirectory have changed, but the slug for the blog post remains the same. (I love static sites.)&lt;/p&gt;
&lt;p&gt;To redirect links from the old site, we&amp;rsquo;ll need to set redirection rules in the old site&amp;rsquo;s S3 bucket. AWS provides a way to set up a conditional redirect. This is set in the &amp;ldquo;Redirection rules&amp;rdquo; section of your S3 bucket&amp;rsquo;s properties, under &amp;ldquo;Static website hosting.&amp;rdquo; You can &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects&#34;&gt;find the documentation here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-redirect.png#screenshot&#34; alt=&#34;Redirection rules placement&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a few examples given, but none that represent the redirect I want. In addition to changing the prefix of the object key, we&amp;rsquo;re also changing the domain. The latter is achieved with the &lt;code&gt;&amp;lt;HostName&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;To redirect requests for the old blog URL to the new top level domain, we&amp;rsquo;ll use the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRules&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;KeyPrefixEquals&amp;gt;&lt;/span&gt;oldblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/KeyPrefixEquals&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Condition&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;HostName&amp;gt;&lt;/span&gt;newdomain.com&lt;span class=&#34;nt&#34;&gt;&amp;lt;/HostName&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;newblog/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ReplaceKeyPrefixWith&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Redirect&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRule&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/RoutingRules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This rule ensures that requests for &lt;code&gt;olddomain.com/oldblog/specific-blog-post&lt;/code&gt; will redirect to &lt;code&gt;newdomain.com/newblog/specific-blog-post&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;migrate-disqus-comments&#34;&gt;Migrate Disqus comments&lt;/h1&gt;
&lt;p&gt;Disqus provides a tool for migrating the comment threads from your old blog site to the new one. You can find it in your Disqus admin tools at &lt;code&gt;your-short-name.disqus.com/admin/discussions/migrate/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To migrate posts from the old blog address to the new one, we&amp;rsquo;ll use the URL mapper tool. Click &amp;ldquo;Start URL mapper,&amp;rdquo; then &amp;ldquo;you can download a CSV here.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-disqus.png#screenshot&#34; alt=&#34;URL mapping for Disqus.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Disqus has decent instructions for how this tool works, and you can &lt;a href=&#34;https://help.disqus.com/customer/en/portal/articles/912757-url-mapper&#34;&gt;read them here.&lt;/a&gt; Basically, you&amp;rsquo;ll input the new blog URLs into the second column of the CSV file you downloaded, then pass it back to Disqus to process. If you&amp;rsquo;re using a program to edit the CSV, be sure to save the resulting file in CSV format.&lt;/p&gt;
&lt;p&gt;Unless you have a bazillion URLs, the tool works pretty quickly, and you&amp;rsquo;ll get an email when it&amp;rsquo;s finished. Don&amp;rsquo;t forget to update the name of your site in the Disqus admin, too.&lt;/p&gt;
&lt;h1 id=&#34;transfer-other-settings&#34;&gt;Transfer other settings&lt;/h1&gt;
&lt;p&gt;Update links in your social profiles and any other sites you may have around the web. If you&amp;rsquo;re using other services attached to your website like Google Analytics or IFTTT, don&amp;rsquo;t forget to update those details too!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/cover_aws-moving_hu21a1b010075379d4e5c1954a648363b3_119465_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>A Unicode substitution cipher algorithm</title><link>https://victoria.dev/blog/a-unicode-substitution-cipher-algorithm/</link><pubDate>Sat, 06 Jan 2018 20:00:28 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/a-unicode-substitution-cipher-algorithm/</guid><description>How a fun but useless project turned into a Unicode substitution cipher algorithm.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/a-unicode-substitution-cipher-algorithm/cover_unicode-secret_hud7459b7c7802730207ef6a14526fccb5_97492_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;Full transparency: I occasionally waste time messing around on Twitter. &lt;em&gt;(Gasp! Shock!)&lt;/em&gt; One of the ways I waste time messing around on Twitter is by writing my name in my profile with different Unicode character &amp;ldquo;fonts,&amp;rdquo; 𝖑𝖎𝖐𝖊 𝖙𝖍𝖎𝖘 𝖔𝖓𝖊. I previously did this by searching for different Unicode characters on Google, then one-by-one copying and pasting them into the &amp;ldquo;Name&amp;rdquo; field on my Twitter profile. Since this method of wasting time was a bit of a time waster, I decided (in true programmer fashion) to write a tool that would help me save some time while wasting it.&lt;/p&gt;
&lt;p&gt;I originally dubbed the tool &amp;ldquo;uni-pretty,&amp;rdquo; (a pun on LEGO&amp;rsquo;s &lt;a href=&#34;https://www.lego.com/en-us/themes/unikitty/characters/unikitty-84aef06dc1164a718aded854976efeeb&#34;&gt;Unikitty&lt;/a&gt; from a movie I&amp;rsquo;d just watched that absolutely no one found funny) but have since renamed it &lt;a href=&#34;https://github.com/victoriadrake/fancy-unicode&#34;&gt;fancy-unicode&lt;/a&gt;. It lets you type any characters into a field and then converts them into Unicode characters that also represent letters, giving you fancy &amp;ldquo;fonts&amp;rdquo; that override a website&amp;rsquo;s CSS, like in your Twitter profile. (Sorry, Internet.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;screenshot.png#screenshot&#34; alt=&#34;fancy-unicode screenshot&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The tool&amp;rsquo;s first naive iteration existed for about twenty minutes while I copy-pasted Unicode characters into a data structure. This approach of storing the characters in the JavaScript file, called hard-coding, is fraught with issues. Besides having to store every character from every font style, it&amp;rsquo;s painstaking to build, hard to update, and more code means it&amp;rsquo;s susceptible to more possible errors.&lt;/p&gt;
&lt;p&gt;Fortunately, working with Unicode means that there&amp;rsquo;s a way to avoid the whole mess of having to store all the font characters: Unicode numbers are sequential. More importantly, the special characters in Unicode that could be used as fonts (meaning that there&amp;rsquo;s a matching character for most or all of the letters of the alphabet) are always in the following sequence: capital A-Z, lowercase a-z.&lt;/p&gt;
&lt;p&gt;For example, in the fancy Unicode above, the lowercase letter &amp;ldquo;L&amp;rdquo; character has the Unicode number &lt;code&gt;U+1D591&lt;/code&gt; and HTML code &lt;code&gt;&amp;amp;#120209;&lt;/code&gt;. The next letter in the sequence, a lowercase letter &amp;ldquo;M,&amp;rdquo; has the Unicode number &lt;code&gt;U+1D592&lt;/code&gt; and HTML code &lt;code&gt;&amp;amp;#120210;&lt;/code&gt;. Notice how the numbers in those codes increment by one.&lt;/p&gt;
&lt;p&gt;Why&amp;rsquo;s this relevant? Since each special character can be referenced by a number, and we know that the order of the sequence is always the same (capital A-Z, lowercase a-z), we&amp;rsquo;re able to produce any character simply by knowing the first number of its font sequence (the capital &amp;ldquo;A&amp;rdquo;). If this reminds you of anything, you can borrow my decoder pin.&lt;/p&gt;
&lt;p&gt;In cryptography, the Caesar cipher (or shift cipher) is a simple method of encryption that utilizes substitution of one character for another in order to encode a message. This is typically done using the alphabet and a shift &amp;ldquo;key&amp;rdquo; that tells you which letter to substitute for the original one. For example, if I were trying to encode the word &amp;ldquo;cat&amp;rdquo; with a right shift of 3, it would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;c a t
f d w&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this concept, encoding our plain text letters as a Unicode &amp;ldquo;font&amp;rdquo; is a simple process. All we need is an array to reference our plain text letters with, and the first index of our Unicode capital &amp;ldquo;A&amp;rdquo; representation. Since some Unicode numbers also include letters (which are sequential, but an unnecessary complication) and since the intent is to display the page in HTML, we&amp;rsquo;ll use the HTML code number &lt;code&gt;&amp;amp;#120172;&lt;/code&gt;, with the extra bits removed for brevity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;K&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;P&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fancyA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;120172&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we know that the letter sequence of the fancy Unicode is the same as our plain text array, any letter can be found by using its index in the plain text array as an offset from the fancy capital &amp;ldquo;A&amp;rdquo; number. For example, capital &amp;ldquo;B&amp;rdquo; in fancy Unicode is the capital &amp;ldquo;A&amp;rdquo; number, &lt;code&gt;120172&lt;/code&gt; plus B&amp;rsquo;s index, which is &lt;code&gt;1&lt;/code&gt;: &lt;code&gt;120173&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s our conversion function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;convert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a variable to store our converted letters
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;converted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Break string into substrings (letters)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Search plain array for indexes of letters
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// If the letter isn&amp;#39;t a letter (not found in the plain array)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Return as a whitespace
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;converted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Get relevant character from fancy number + index
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unicode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fancyA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Return as HTML code
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;converted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;#&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unicode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Print the converted letters as a string
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;converted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A neat possibility for this method of encoding requires a departure from my original purpose, which was to create a human-readable representation of the original string. If the purpose was instead to produce a cipher, this could be done by using any Unicode index in place of &lt;code&gt;fancyA&lt;/code&gt; as long as the character indexed isn&amp;rsquo;t a representation of a capital &amp;ldquo;A.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the same code set up with a simplified plain text array, and a non-letter-representation Unicode key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;plain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might be able to imagine that decoding a cipher produced by this method would be relatively straightforward, once you knew the encoding secret. You&amp;rsquo;d simply need to subtract the key from the HTML code numbers of the encoded characters, then find the relevant plain text letters at the remaining indexes.&lt;/p&gt;
&lt;p&gt;Well, that&amp;rsquo;s it for today. Be sure to drink your Ovaltine and we&amp;rsquo;ll see you right here next Monday at 5:45!&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Oh, and&amp;hellip; ⍔⍠⍟⍘⍣⍒⍥⍦⍝⍒⍥⍚⍠⍟⍤ ⍒⍟⍕ ⍨⍖⍝⍔⍠⍞⍖ ⍥⍠ ⍥⍙⍖ ⍔⍣⍪⍡⍥⍚⍔ ⍦⍟⍚⍔⍠⍕⍖ ⍤⍖⍔⍣⍖⍥ ⍤⍠⍔⍚⍖⍥⍪&lt;/dt&gt;
&lt;/dl&gt;
&lt;p&gt;:)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/a-unicode-substitution-cipher-algorithm/cover_unicode-secret_hud7459b7c7802730207ef6a14526fccb5_97492_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Hosting your static site with AWS S3, Route 53, and CloudFront</title><link>https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</link><pubDate>Wed, 13 Dec 2017 20:46:12 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</guid><description>A guide to using Amazon Web Services to serve your site with HTTPS. For (almost) free.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/cover_aws-questions_hua0b9a94223402b1678baf2512b6d4b77_78246_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;Some time ago I decided to stop freeloading on GitHub pages and move one of my sites to Amazon Web Services (AWS). It turns out that I&amp;rsquo;m still mostly freeloading (yay free tier) so it amounted to a learning experience. Here are the components that let me host and serve the site at my custom domain with HTTPS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static site in Amazon Web Services S3 bucket&lt;/li&gt;
&lt;li&gt;Route 53 handling the DNS&lt;/li&gt;
&lt;li&gt;CloudFront for distribution and a custom SSL certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set all that up most of a year ago. At the time, I found the AWS documentation to be rather fragmented and inconvenient to follow - it was hard to find what you were looking for without knowing what a specific setting might be called, or where it was, or if it existed at all. When I recently set up a new site and stumbled through this process again, I didn&amp;rsquo;t find it any easier. Hopefully this post can help to collect the relevant information into a more easily followed process and serve as an accompanying guide to save future me (and you) some time.&lt;/p&gt;
&lt;p&gt;Rather than replace existing documentation, this post is meant to supplement it. Think of me as your cool tech-savvy friend on the phone with you at 4am, troubleshooting your website. (Please don&amp;rsquo;t actually call me at 4am.) I&amp;rsquo;ll walk through the set up while providing links for the documentation that was ultimately helpful (mostly so I can find it again later&amp;hellip;).&lt;/p&gt;
&lt;h1 id=&#34;hosting-a-static-site-with-amazon-s3-and-a-custom-domain&#34;&gt;Hosting a static site with Amazon S3 and a custom domain&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re starting from scratch, you&amp;rsquo;ll need an AWS account. It behooves you to get one, even if you don&amp;rsquo;t like paying for services - there&amp;rsquo;s a free tier that will cover most of the experimental stuff you&amp;rsquo;re going to want to do in the first year, and even the things I do pay for cost me less than a dollar a month. You can sign up at &lt;a href=&#34;https://aws.amazon.com/free&#34;&gt;https://aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting your static site hosted and available at your custom domain is your first mission, should you choose to accept it. &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&#34;&gt;Your instructions are here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating the buckets for site hosting on S3 is the most straightforward part of this process in my opinion, and the AWS documentation walkthrough covers what you&amp;rsquo;ll need to do quite well. It gets a little unclear around &lt;em&gt;Step 3: Create and Configure Amazon Route 53 Hosted Zone&lt;/em&gt;, so come back and read on once you&amp;rsquo;ve reached that point. I&amp;rsquo;ll make some tea in the meantime.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Ready? Cool. See, I&amp;rsquo;m here for you.&lt;/p&gt;
&lt;h1 id=&#34;set-up-route-53&#34;&gt;Set up Route 53&lt;/h1&gt;
&lt;p&gt;The majority of the work in this section amounts to creating the correct record sets for your custom domain. If you&amp;rsquo;re already familiar with how record sets work, the documentation is a bit of a slog. Here&amp;rsquo;s how it should look when you&amp;rsquo;re finished:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-recordsets.png#screenshot&#34; alt=&#34;Route 53 record sets.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;NS&amp;rdquo; and &amp;ldquo;SOA&amp;rdquo; records are created automatically for you. The only records you need to create are the &amp;ldquo;A&amp;rdquo; records.&lt;/p&gt;
&lt;p&gt;Hop over to &lt;a href=&#34;https://console.aws.amazon.com/route53/home&#34;&gt;Route 53&lt;/a&gt; and follow &lt;a href=&#34;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html&#34;&gt;this walkthrough&lt;/a&gt; to create a &amp;ldquo;hosted zone.&amp;rdquo; The value of the &lt;strong&gt;NS&lt;/strong&gt; (Name Servers) records are what you&amp;rsquo;ll have to provide to your domain name registrar (wherever you bought your custom domain, such as this super subtle &lt;a href=&#34;https://affiliate.namecheap.com/?affId=109417&#34;&gt;Namecheap.com affiliate link&lt;/a&gt; right here.)&lt;/p&gt;
&lt;p&gt;If you created two buckets in the first section (one for &lt;code&gt;yourdomain.com&lt;/code&gt; and one for &lt;code&gt;www.yourdomain.com&lt;/code&gt;), you&amp;rsquo;ll need two separate A records in Route 53. Initially, these have the value of the endpoints for your matching S3 buckets (looks like &lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;). Later, you&amp;rsquo;ll change them to your CloudFront domain name.&lt;/p&gt;
&lt;p&gt;If you went with Namecheap as your registrar, &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record&#34;&gt;Step 4&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-namecheapdns.png#screenshot&#34; alt=&#34;Namecheap&#39;s Custom DNS settings.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Waiting is the hardest part&amp;hellip; I&amp;rsquo;ve gotten into the habit of working on another project or setting up the DNS change before going to bed so that changes have time to propagate without me feeling like I need to fiddle with it. ^^;&lt;/p&gt;
&lt;p&gt;When the transfer&amp;rsquo;s ready, you&amp;rsquo;ll see your site at &lt;code&gt;http://yourdomain.com&lt;/code&gt;. Next, you&amp;rsquo;ll want to set up CloudFront so that becomes &lt;code&gt;https://yourdomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;set-up-cloudfront-and-ssl&#34;&gt;Set up CloudFront and SSL&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-cloudfront-walkthrough.html&#34;&gt;Here are the instructions for setting up CloudFront.&lt;/a&gt; There are a few important points to make sure you don&amp;rsquo;t miss on the &amp;ldquo;Create Distribution&amp;rdquo; page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name:&lt;/strong&gt; Make sure to use your S3 bucket endpoint, and not select the bucket from the dropdown menu that appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewer Protocol Policy:&lt;/strong&gt; If you want requests for &lt;code&gt;http://yourdomain.com&lt;/code&gt; to always result in &lt;code&gt;https://yourdomain.com&lt;/code&gt;, choose &amp;ldquo;Redirect HTTP to HTTPS.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternate Domain Names:&lt;/strong&gt; Enter &lt;code&gt;yourdomain.com&lt;/code&gt; and &lt;code&gt;www.yourdomain.com&lt;/code&gt; on separate lines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL Certificate:&lt;/strong&gt; See below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; Enter the name of the html file that should be returned when your users go to &lt;code&gt;https://yourdomain.com&lt;/code&gt;. This is usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssl-certificate&#34;&gt;SSL Certificate&lt;/h2&gt;
&lt;p&gt;To show your content with HTTPS at your custom domain, you&amp;rsquo;ll need to choose &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can easily get an SSL Certificate with AWS Certificate Manager. Click on &amp;ldquo;Request or Import a Certificate with ACM&amp;rdquo; to get started in a new window.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request.html&#34;&gt;Here are instructions for setting up a certificate.&lt;/a&gt; I don&amp;rsquo;t think they&amp;rsquo;re very good, personally. Don&amp;rsquo;t worry, I got you.&lt;/p&gt;
&lt;p&gt;To account for &amp;ldquo;www.yourdomain.com&amp;rdquo; as well as any subdomains, you&amp;rsquo;ll want to add two domain names to the certificate, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmdomains.png#screenshot&#34; alt=&#34;Adding domain names to ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Next.&amp;rdquo; You&amp;rsquo;ll be asked to choose a validation method. Choose &amp;ldquo;DNS validation&amp;rdquo; and click &amp;ldquo;Review.&amp;rdquo; If everything is as it should be, click &amp;ldquo;Confirm and request.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a page, &amp;ldquo;Validation&amp;rdquo; that looks like this. You&amp;rsquo;ll have to click the little arrow next to both domain names to get the important information to show:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmvalidation.png#screenshot&#34; alt=&#34;Validation instructions for ACM.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Under both domain names, click the button for &amp;ldquo;Create record in Route 53.&amp;rdquo; This will automatically create a CNAME record set in Route 53 with the given values, which ACM will then check in order to validate that you own those domains. You could create the records manually, if you wanted to for some reason. I don&amp;rsquo;t know, maybe you&amp;rsquo;re killing time. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Continue.&amp;rdquo; You&amp;rsquo;ll see a console that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;aws-acmcertificates.png#screenshot&#34; alt=&#34;List of certificates you own.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It may take some time for the validation to complete, at which point the &amp;ldquo;Pending validation&amp;rdquo; status will change to &amp;ldquo;Issued.&amp;rdquo; Again with the waiting. You can close this window to return to the CloudFront set up. Once the certificate is validated, you&amp;rsquo;ll see it in the dropdown menu under &amp;ldquo;Custom SSL Certificate.&amp;rdquo; You can click &amp;ldquo;Create Distribution&amp;rdquo; to finish setting up CloudFront.&lt;/p&gt;
&lt;p&gt;In your CloudFront Distributions console, you&amp;rsquo;ll see &amp;ldquo;In Progress&amp;rdquo; until AWS has done its thing. Once it&amp;rsquo;s done, it&amp;rsquo;ll change to &amp;ldquo;Deployed.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;one-last-thing&#34;&gt;One last thing&lt;/h2&gt;
&lt;p&gt;Return to your &lt;a href=&#34;https://console.aws.amazon.com/route53/&#34;&gt;Route 53 console&lt;/a&gt; and click on &amp;ldquo;Hosted zones&amp;rdquo; in the sidebar, then your domain name from the list. For both A records, change the &amp;ldquo;Alias Target&amp;rdquo; from the S3 endpoint to your CloudFront distribution domain, which should look something like &lt;code&gt;dj4p1rv6mvubz.cloudfront.net&lt;/code&gt;. It appears in the dropdown after you clear the field.&lt;/p&gt;
&lt;h1 id=&#34;you-re-done&#34;&gt;You&amp;rsquo;re done!&lt;/h1&gt;
&lt;p&gt;Well, usually. If you navigate to your new HTTPS domain and don&amp;rsquo;t see your beautiful new site where it should be, here are some things you can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check S3 bucket policy - ensure that the bucket for &lt;code&gt;yourdomain.com&lt;/code&gt; in the &lt;a href=&#34;https://s3.console.aws.amazon.com/s3/home&#34;&gt;S3 console&lt;/a&gt; shows &amp;ldquo;Public&amp;rdquo; in the &amp;ldquo;Access&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;Check S3 bucket index document - In the &amp;ldquo;Properties&amp;rdquo; tab for the bucket, then &amp;ldquo;Static website hosting&amp;rdquo;. Usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Check CloudFront Origin - the &amp;ldquo;Origin&amp;rdquo; column in the &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home&#34;&gt;CloudFront Console&lt;/a&gt; should show the S3 bucket&amp;rsquo;s endpoint (&lt;code&gt;s3-website.us-east-2.amazonaws.com&lt;/code&gt;), not the bucket name (&lt;code&gt;yourdomain.com.s3.amazonaws.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Check CloudFront Default Root Object - clicking on the distribution name should take you to a details page that shows &amp;ldquo;Default Root Object&amp;rdquo; in the list with the value that you set, usually &amp;ldquo;index.html&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Wait. Sometimes changes take up to 48hrs to propagate. ¯\_(ツ)_/¯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope that helps you get set up with your new static site on AWS! Feel free to &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;share your link&lt;/a&gt; with me, I&amp;rsquo;d love to see what you&amp;rsquo;ve created. :)&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/cover_aws-questions_hua0b9a94223402b1678baf2512b6d4b77_78246_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>About time</title><link>https://victoria.dev/blog/about-time/</link><pubDate>Wed, 22 Nov 2017 14:05:14 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/about-time/</guid><description>Some thoughts and concrete suggestions on saving society through programming.</description><content:encoded>
&lt;p&gt;This morning I read an article that&amp;rsquo;s been making the rounds lately: &lt;a href=&#34;http://nautil.us/issue/52/the-hive/modern-media-is-a-dos-attack-on-your-free-will&#34;&gt;Modern Media Is a DoS Attack on Your Free Will&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s made me think, which I must admit, I at first didn&amp;rsquo;t like. See, when I wake up in the morning (and subsequently wake up my computer) the first thing I do is go on Twitter to catch up on everything I missed while I was asleep. All this before my first coffee, mind you. Links on Twitter usually lead to stories on Medium, newly released apps on ProductHunt, and enticing sales on a new gadget or two on Amazon. Wherever it goes, in those blissfully half-awake mental recesses, the last thing I&amp;rsquo;m trying to do is think.&lt;/p&gt;
&lt;p&gt;However, yesterday, I also happened to listen to a podcast from freeCodeCamp. It was &lt;a href=&#34;https://twitter.com/ossia/status/932698783863001089&#34;&gt;#7: The code I&amp;rsquo;m still ashamed of&lt;/a&gt;. This lead to thoughts on the responsibilities of programmers - the people tasked with designing and building apps and systems meant to steer the very course of your life.&lt;/p&gt;
&lt;p&gt;This morning, the combined swirling mess of notions brought on by these two sources of information had, even before my first coffee, the unfortunate effect of making me think.&lt;/p&gt;
&lt;p&gt;Mostly, I thought about intention, and time.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t believe it&amp;rsquo;s wildly inaccurate to say that when you go about doing something in your daily life, you have a general awareness of your reason for doing it. If you leave your building and go down the street to Starbucks and buy a coffee, more often than not, it&amp;rsquo;s because you wanted a coffee. If you go to the corner store and buy a litre of milk, you probably intend to drink it. If you find yourself nicely dressed on a Friday night waiting at a well-decorated restaurant to meet another human being with whom you share an apparent mutual attraction, I can risk a guess that you&amp;rsquo;re after some form of pleasant human interaction.&lt;/p&gt;
&lt;p&gt;In each of these, and many more examples you can think up, the end goal is clearly defined. There is an expected final step to the process; an expected response; a return value.&lt;/p&gt;
&lt;p&gt;What is the return value of opening up the Twitter app? Browsing Facebook? Instagram? In fact, any social media?&lt;/p&gt;
&lt;p&gt;The concrete answer is that there isn&amp;rsquo;t one. Perhaps in those of us with resilient self-discipline, there may at least be some sort of time limitation. That&amp;rsquo;s the most we can hope for, however, and no wonder - that&amp;rsquo;s what these and other similar services have been &lt;em&gt;designed&lt;/em&gt; for. They&amp;rsquo;re built to be open-ended black-holes for our most precious resource&amp;hellip; time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the case of the Analytical Engine we have undoubtedly to lay out a certain capital of analytical labour in one particular line; but this is in order that the engine may bring us in a much larger return in another line.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ada Augusta (Ada Lovelace)&lt;/em&gt; - &lt;a href=&#34;https://www.fourmilab.ch/babbage/sketch.html&#34;&gt;Notes on &lt;em&gt;Sketch of The Analytical Engine&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, so I did some more reading. Specifically, #ThrowbackThursday to the mid 1800&amp;rsquo;s and something my good friend Ada Lovelace once scribbled in a book. Widely considered one of the first computer programmers, she and Charles Babbage pioneered many concepts that programmers today take for granted. The one I&amp;rsquo;m going to hang my point on is, I think, nicely encapsulated in the above quote: the things programmers make are supposed to save you time.&lt;/p&gt;
&lt;p&gt;Save it. Not lose it.&lt;/p&gt;
&lt;p&gt;I think Ada and Charles would agree that, observing the effects of social media apps, clickbait news sites, and many other forms of attention-hogging interactivity that we haven&amp;rsquo;t even classified yet - something&amp;rsquo;s gone horribly wrong.&lt;/p&gt;
&lt;p&gt;What if, as programmers, we actually did something about it?&lt;/p&gt;
&lt;p&gt;Consider that collectively - no, even individually - we who design and build the workings of modern technology have an &lt;em&gt;incredible&lt;/em&gt; amount of power. The next indie app that goes viral on ProductHunt will consume hundreds of hours of time from its users. Where is all that untapped, pure potential going to? Some open-ended, inoffensive amusement? Another advertising platform thinly veiled as a game? Perhaps another drop of oil to smooth the machinery of The Great Engine of Commerce?&lt;/p&gt;
&lt;p&gt;I get it - programmers will build what they&amp;rsquo;re paid to build. That&amp;rsquo;s capitalism, that&amp;rsquo;s feeding your family, survival - life. I&amp;rsquo;m not trying to suggest we all quit our jobs, go live in the woods, and volunteer as humanitarians. That would be nice, but it&amp;rsquo;s impractical.&lt;/p&gt;
&lt;p&gt;But we all have side projects. Free time. What are you doing with yours?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Before I&amp;rsquo;m accused of being too hand-wavy and idealistic, I want to offer a concrete suggestion. Build things that save time. Not in the &amp;ldquo;I&amp;rsquo;ve made yet another to-do list app for you to download,&amp;rdquo; kind of way, but in the &amp;ldquo;Here&amp;rsquo;s a one-liner to automate this mundane thing that would have taken you hours,&amp;rdquo; kind of way. Here, have a &lt;a href=&#34;https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/&#34;&gt;shameless plug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also really like this idea from the first article I mentioned, so hang on tight while I bring this full circle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What’s one concrete thing companies could do now to stop subverting our attention?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I would just like to know what is the ultimate design goal of that site or that system that’s shaping my behavior or thinking. What are they really designing my experience for? Companies will say that their goal is to make the world open and connected or whatever. These are lofty marketing claims. But if you were to actually look at the dashboards that they’re designing, the high-level metrics they’re designing for, you probably wouldn’t see those things. You’d see other things, like frequency of use, time on site, this type of thing. If there was some way for the app to say, to the user, “Here’s generally what this app wants from you, from an attentional point of view,” that would be huge. It would probably be the primary way I would decide which apps I download and use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are so many ways I&amp;rsquo;d love to see this put into practice, from the obvious to the subversive. A little &lt;code&gt;position: sticky;&lt;/code&gt; banner? A custom meta tag in the header? Maybe a call to action like this takes more introspection and honesty than a lot of app makers are ready for&amp;hellip; but maybe it just takes a little of our time.&lt;/p&gt;</content:encoded></item><item><title>Batch renaming images, including image resolution, with awk</title><link>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</link><pubDate>Mon, 20 Nov 2017 13:59:30 -0500</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/batch-renaming-images-including-image-resolution-with-awk/</guid><description>How to batch rename images with custom values using file, awk, and rename - in rainbow colors!</description><content:encoded>
&lt;p&gt;The most recent item on my list of &amp;ldquo;Geeky things I did that made me feel pretty awesome&amp;rdquo; is an hour&amp;rsquo;s adventure that culminated in this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fr&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fr&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg
IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg
IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg
IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg
IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg
IMG_20170808_173450_971.jpg renamed as img_5_3024x3024.jpg
IMG_20170808_173536_034.jpg renamed as img_6_4032x3024.jpg
IMG_20170808_173602_732.jpg renamed as img_7_1617x1617.jpg
IMG_20170808_173645_339.jpg renamed as img_8_3024x3780.jpg
IMG_20170909_170146_585.jpg renamed as img_9_3036x3036.jpg
IMG_20170911_211522_543.jpg renamed as img_10_3036x3036.jpg
IMG_20170913_071608_288.jpg renamed as img_11_2760x2760.jpg
IMG_20170913_073205_522.jpg renamed as img_12_2738x2738.jpg
// ... etc etc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last item on the aforementioned list is &amp;ldquo;TODO: come up with a shorter title for this list.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I previously wrote about the power of command line tools like &lt;a href=&#34;https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/&#34;&gt;sed&lt;/a&gt;. This post expands on how to string all this magical functionality into one big, long, rainbow-coloured, viscous stream of awesome.&lt;/p&gt;
&lt;h2 id=&#34;rename-files&#34;&gt;Rename files&lt;/h2&gt;
&lt;p&gt;The tool that actually handles the renaming of our files is, appropriately enough, &lt;code&gt;rename&lt;/code&gt;. The syntax is: &lt;code&gt;rename -n &amp;quot;s/original_filename/new_filename/g&amp;quot; *&lt;/code&gt; where &lt;code&gt;-n&lt;/code&gt; does a dry-run, and substituting &lt;code&gt;-v&lt;/code&gt; would rename the files. The &lt;code&gt;s&lt;/code&gt; indicates our substitution string, and &lt;code&gt;g&lt;/code&gt; for &amp;ldquo;global&amp;rdquo; finds all occurrences of the string. The &lt;code&gt;*&lt;/code&gt; matches zero or more occurrences of our search-and-replace parameters.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll come back to this later.&lt;/p&gt;
&lt;h2 id=&#34;get-file-information&#34;&gt;Get file information&lt;/h2&gt;
&lt;p&gt;When I run &lt;code&gt;$ file IMG_20170808_172653_425.jpg&lt;/code&gt; in the image directory, I get this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;IMG_20170808_172653_425.jpg: JPEG image data, baseline, precision &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;, 4032x3024, frames &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we can get the image resolution (&amp;ldquo;4032x3024&amp;rdquo; above), we know that we&amp;rsquo;ll be able to use it in our new filename.&lt;/p&gt;
&lt;h2 id=&#34;isolate-the-information-we-want&#34;&gt;Isolate the information we want&lt;/h2&gt;
&lt;p&gt;I love &lt;code&gt;awk&lt;/code&gt; for its simplicity. It takes lines of text and makes individual bits of information available to us with built in variables that we can then refer to as column numbers denoted by &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. By default, &lt;code&gt;awk&lt;/code&gt; splits up columns on whitespace. To take the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
-------------------------------------------------------------------------------------------------------------
| IMG_20170808_172653_425.jpg: | JPEG | image | data, | baseline, | precision | 8, | 4032x3024, | frames | 3 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can denote different values to use as a splitter with, for example, &lt;code&gt;-F&#39;,&#39;&lt;/code&gt; if we wanted to use commas as the column divisions. For our current project, spaces are fine.&lt;/p&gt;
&lt;p&gt;There are a couple issues we need to solve before we can plug the information into our new filenames. Column &lt;code&gt;$1&lt;/code&gt; has the original filename we want, but there&amp;rsquo;s an extra &amp;ldquo;:&amp;rdquo; character on the end. We don&amp;rsquo;t need the &amp;ldquo;.jpg&amp;rdquo; either. Column &lt;code&gt;$8&lt;/code&gt; has an extra &amp;ldquo;,&amp;rdquo; that we don&amp;rsquo;t want as well. To get just to information we need, we&amp;rsquo;ll take a substring of the column with &lt;code&gt;substr()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substr($1, 1, length($1)-5)&lt;/code&gt; - This gives us the file name from the beginning of the string to the end of the string, minus 5 characters (&amp;ldquo;length minus 5&amp;rdquo;).
&lt;code&gt;substr($8,1, length($8)-1)&lt;/code&gt; - This gives us the image size, without the extra comma (&amp;ldquo;length minus 1&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;avoid-duplicate-file-names&#34;&gt;Avoid duplicate file names&lt;/h2&gt;
&lt;p&gt;To ensure that two images with the same resolutions don&amp;rsquo;t create identical, competing file names, we&amp;rsquo;ll append a unique incrementing number to the filename.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BEGIN{a=0}&lt;/code&gt; - Using &lt;code&gt;BEGIN&lt;/code&gt; tells &lt;code&gt;awk&lt;/code&gt; to run the following code only once, at the (drumroll) beginning. Here, we&amp;rsquo;re declaring the variable &lt;code&gt;a&lt;/code&gt; to be &lt;code&gt;0&lt;/code&gt;.
&lt;code&gt;a++&lt;/code&gt; - Later in our code, at the appropriate spot for our file name, we call &lt;code&gt;a&lt;/code&gt; and increment it.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;awk&lt;/code&gt; prints a string, it concatenates everything that isn&amp;rsquo;t separated by a comma. &lt;code&gt;{print a b c}&lt;/code&gt; would create &amp;ldquo;abc&amp;rdquo; and &lt;code&gt;{print a,b,c}&lt;/code&gt; would create &amp;ldquo;a b c&amp;rdquo;, for example.&lt;/p&gt;
&lt;p&gt;We can add additional characters to our file name, such as an underscore, by inserting it in quotations: &lt;code&gt;&amp;quot;_&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;string-it-all-together&#34;&gt;String it all together&lt;/h2&gt;
&lt;p&gt;To feed the output of one command into another command, we use &amp;ldquo;pipe,&amp;rdquo; written as &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we only used pipe in this instance, all our data from &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; would get fed into &lt;code&gt;rename&lt;/code&gt; all at once, making for one very, very long and probably non-compiling file name. To run the &lt;code&gt;rename&lt;/code&gt; command line by line, we can use &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Similarly to &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; takes input and splits it into variables we can assign and use. In our code, it takes the first bit of output from &lt;code&gt;awk&lt;/code&gt; (the original file name) and assigns that the variable name &lt;code&gt;$fn&lt;/code&gt;. It takes the second output (our incrementing number and the image resolution) and assigns that to &lt;code&gt;$fr&lt;/code&gt;. The variable names are arbitrary; you can call them whatever you want.&lt;/p&gt;
&lt;p&gt;To run our &lt;code&gt;rename&lt;/code&gt; commands as if we&amp;rsquo;d manually entered them in the terminal one by one, we can use &lt;code&gt;echo $(some command)&lt;/code&gt;. Finally, &lt;code&gt;done&lt;/code&gt; ends our &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;bonus-round-rainbow-output&#34;&gt;Bonus round: rainbow output!&lt;/h2&gt;
&lt;p&gt;I wasn&amp;rsquo;t kidding with that &lt;a href=&#34;https://github.com/tehmaze/lolcat&#34;&gt;&amp;ldquo;rainbow-coloured&amp;rdquo; bit&amp;hellip;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s our full code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file IMG* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&amp;#34;_&amp;#34;substr($8,1, length($8)-1)}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; fn fs&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;rename -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/img_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fs&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; *&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lolcat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded></item><item><title>How to code a satellite algorithm and cook paella from scratch</title><link>https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/</link><pubDate>Fri, 08 Sep 2017 16:50:24 -0400</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/</guid><description>A guide to expertly tackling seemingly complicated problems that you&#39;d rather never tackle in the first place.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/cover_solve-paella_hu7c9f995cc962a3f8b743096a43864b63_232134_640x0_resize_q75_box.jpg" width="640" height="320"/>
&lt;p&gt;What if I told you that by the end of this article, you&amp;rsquo;ll be able to calculate the orbital period of satellites around Earth using their average altitudes and&amp;hellip; You tuned out already, didn&amp;rsquo;t you?&lt;/p&gt;
&lt;p&gt;Okay, how about this: I&amp;rsquo;m going to teach you how to make paella!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And&lt;/em&gt; you&amp;rsquo;ll have written a function that does &lt;em&gt;the stuff I mentioned above&lt;/em&gt;, just like I did for this &lt;a href=&#34;https://www.freecodecamp.org/challenges/map-the-debris&#34;&gt;freeCodeCamp challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I promise there&amp;rsquo;s an overarching moral lesson that will benefit you every day for the rest of your life. Or at least, feed you for one night. Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h1 id=&#34;the-only-thing-i-know-about-paella-is-that-it-s-an-emoticon&#34;&gt;The only thing I know about paella is that it&amp;rsquo;s an emoticon&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;solve-unicode-paella.jpg#center&#34; alt=&#34;Unicode paella emoji.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;Unless you&amp;rsquo;re reading this on a Samsung phone, in which case you&amp;rsquo;re looking at a Korean hotpot.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;One of my favorite things about living in the world today is that it&amp;rsquo;s &lt;em&gt;totally fine&lt;/em&gt; to know next-to-nothing about something. A hundred years ago you might have gone your whole life not knowing anything more about paella other than that it&amp;rsquo;s an emoticon.* But today? You can simply &lt;a href=&#34;https://en.wikipedia.org/wiki/Paella&#34;&gt;look it up&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-data&#34;&gt;*That was a joke.&lt;/p&gt;
&lt;p&gt;As with all things in life, when we are unsure, we turn to the internet - in this case, the entry for &lt;em&gt;paella&lt;/em&gt; on Wikipedia, which reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paella &amp;hellip;is a Valencian rice dish. Paella has ancient roots, but its modern form originated in the mid-19th century near the Albufera lagoon on the east coast of Spain adjacent to the city of Valencia. Many non-Spaniards view paella as Spain&amp;rsquo;s national dish, but most Spaniards consider it to be a regional Valencian dish. Valencians, in turn, regard paella as one of their identifying symbols.&lt;/p&gt;
&lt;p&gt;Types of paella include Valencian paella, vegetarian/vegan paella (Spanish: paella de verduras), seafood paella (Spanish: paella de marisco), and mixed paella (Spanish: paella mixta), among many others. (&lt;a href=&#34;https://en.wikipedia.org/wiki/Paella&#34;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point, you&amp;rsquo;re probably full of questions. Do I need to talk to a Valencian? Should I take an online course on the history of Spain? What type of paella should I try to make? What is the common opinion of modern chefs when it comes to paella types?&lt;/p&gt;
&lt;p&gt;If you set out with the intention of answering all these questions, one thing is certain: you&amp;rsquo;ll never end up actually making paella. You&amp;rsquo;ll spend hours upon hours typing questions into search engines and years later wake up with a Masters in Valencian Cuisine.&lt;/p&gt;
&lt;h1 id=&#34;the-most-important-question-method&#34;&gt;The &amp;ldquo;Most Important Question&amp;rdquo; method&lt;/h1&gt;
&lt;p&gt;When I talk to myself out loud in public (doesn&amp;rsquo;t everyone?) I refer to this as &amp;ldquo;MIQ&amp;rdquo; (rhymes with &amp;ldquo;Nick&amp;rdquo;). I also imagine MIQ to be a rather crunchy and quite adorable anthropomorphized tortilla chip. Couldn&amp;rsquo;t tell you why.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;solve-miq.png#center&#34; alt=&#34;MIQ the chip.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MIQ swings his crunchy triangular body around to point me in the right direction, and the right direction always takes the form of the most important question that you need to ask yourself at any stage of problem solving. The first most important question is always this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the scope of the objective I want to achieve?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, you want to make paella.&lt;/p&gt;
&lt;p&gt;The next MIQ then becomes: how much do I actually need to know about paella in order to start making it?&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve heard this advice before: any big problem can be broken down into multiple, but more manageable, bite-size problems. In this little constellation of bite-size problems, there&amp;rsquo;s only &lt;em&gt;one&lt;/em&gt; that you need to solve in order to get &lt;em&gt;most of the way&lt;/em&gt; to a complete solution.&lt;/p&gt;
&lt;p&gt;In the case of making paella, we need a recipe. That&amp;rsquo;s a bite-size problem that a search engine can solve for us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Simple Paella Recipe&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In a medium bowl, mix together 2 tablespoons olive oil, paprika, oregano, and salt and pepper. Stir in chicken pieces to coat. Cover, and refrigerate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heat 2 tablespoons olive oil in a large skillet or paella pan over medium heat. Stir in garlic, red pepper flakes, and rice. Cook, stirring, to coat rice with oil, about 3 minutes. Stir in saffron threads, bay leaf, parsley, chicken stock, and lemon zest. Bring to a boil, cover, and reduce heat to medium low. Simmer 20 minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meanwhile, heat 2 tablespoons olive oil in a separate skillet over medium heat. Stir in marinated chicken and onion; cook 5 minutes. Stir in bell pepper and sausage; cook 5 minutes. Stir in shrimp; cook, turning the shrimp, until both sides are pink.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spread rice mixture onto a serving tray. Top with meat and seafood mixture. (&lt;a href=&#34;http://allrecipes.com/recipe/84137/easy-paella/&#34;&gt;allrecipes.com&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;And &lt;em&gt;voila&lt;/em&gt;! Believe it or not, we&amp;rsquo;re &lt;em&gt;most of the way&lt;/em&gt; there already.&lt;/p&gt;
&lt;p&gt;Having a set of step-by-step instructions that are easy to understand is really most of the work done. All that&amp;rsquo;s left is to go through the motions of gathering the ingredients and then making paella. From this point on, your MIQs may become fewer and far between, and they may slowly decrease in importance in relation to the overall problem. (Where do I buy paprika? How do I know when sausage is cooked? How do I set the timer on my phone for 20 minutes? How do I stop thinking about this delicious smell? Which Instagram filter best captures the ecstacy of this paella right now?)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;solve-insta-paella.jpg#center&#34; alt=&#34;Paella in Nashville.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;The answer to that last one is &amp;ldquo;Nashville&amp;rdquo;.&lt;/p&gt;&lt;/p&gt;
&lt;h1 id=&#34;i-still-know-nothing-about-calculating-the-orbital-periods-of-satellites&#34;&gt;I still know nothing about calculating the orbital periods of satellites&lt;/h1&gt;
&lt;p&gt;Okay. Let&amp;rsquo;s examine the problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Return a new array that transforms the element&amp;rsquo;s average altitude into their orbital periods.&lt;/p&gt;
&lt;p&gt;The array will contain objects in the format {name: &amp;lsquo;name&amp;rsquo;, avgAlt: avgAlt}.&lt;/p&gt;
&lt;p&gt;You can read about orbital periods on wikipedia.&lt;/p&gt;
&lt;p&gt;The values should be rounded to the nearest whole number. The body being orbited is Earth.&lt;/p&gt;
&lt;p&gt;The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km3s-2.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;orbitalPeriod([{name : &amp;quot;sputnik&amp;quot;, avgAlt : 35873.5553}])&lt;/code&gt; should return &lt;code&gt;[{name: &amp;quot;sputnik&amp;quot;, orbitalPeriod: 86400}].&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, as it turns out, in order to calculate the orbital period of satellites, we also need a recipe. Amazing, the things you can find on the internet these days.&lt;/p&gt;
&lt;p&gt;Courtesy of &lt;a href=&#34;http://www.dummies.com/education/science/physics/how-to-calculate-the-period-and-orbiting-radius-of-a-geosynchronous-satellite/&#34;&gt;dummies.com&lt;/a&gt; (yup! #noshame), here&amp;rsquo;s our recipe:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;solve-orbital-period.png#center&#34; alt=&#34;Orbital period formula&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;It&amp;rsquo;s kind of cute, in a way.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;That might look pretty complicated, but as we&amp;rsquo;ve already seen, we just need to answer the next MIQ: how much do I actually need to know about this formula in order to start using it?&lt;/p&gt;
&lt;p&gt;In the case of this challenge, not too much. We&amp;rsquo;re already given &lt;code&gt;earthRadius&lt;/code&gt;, and &lt;code&gt;avgAlt&lt;/code&gt; is part of our arguments object. Together, they form the radius, &lt;em&gt;r&lt;/em&gt;. With a couple search queries and some mental time-travel to your elementary math class, we can describe this formula in a smattering of English:&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;T*, the orbital period, equals 2 multiplied by Pi, in turn multiplied by the square root of the radius, &lt;em&gt;r&lt;/em&gt; cubed, divided by the gravitational mass, &lt;em&gt;GM&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript has a &lt;code&gt;Math.PI&lt;/code&gt; property, as well as &lt;code&gt;Math.sqrt()&lt;/code&gt; function and &lt;code&gt;Math.pow()&lt;/code&gt; function. Using those combined with simple calculation, we can represent this equation in a single line assigned to a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;orbitalPeriod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;earthRadius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;avgAlt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the inside out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;earthRadius&lt;/code&gt; and &lt;code&gt;avgAlt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cube the result of step 1&lt;/li&gt;
&lt;li&gt;Divide the result of step 2 by GM&lt;/li&gt;
&lt;li&gt;Take the square root of the result of step 3&lt;/li&gt;
&lt;li&gt;Multiply 2 times Pi times the result of step 4&lt;/li&gt;
&lt;li&gt;Assign the returned value to &lt;code&gt;orbitalPeriod&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Believe it or not, we&amp;rsquo;re already most of the way there.&lt;/p&gt;
&lt;p&gt;The next MIQ for this challenge is to take the arguments object, extract the information we need, and return the result of our equation in the required format. There are a multitude of ways to do this, but I&amp;rsquo;m happy with a straightforward &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;orbitalPeriod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resultArr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;teapot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;teapot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;teapot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;398600.4418&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;earthRadius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6367.4447&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;avgAlt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;teapot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;avgAlt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;teapot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;orbitalPeriod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;earthRadius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;avgAlt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;orbitalPeriod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;orbitalPeriod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;resultArr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resultArr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need a refresher on iterating through arrays, have a look at my &lt;a href=&#34;https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/&#34;&gt;article on iterating, featuring breakfast arrays&lt;/a&gt;! (5 minutes read)&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t look now, but you just gained the ability to calculate the orbital period of satellites. You could even do it &lt;em&gt;while&lt;/em&gt; making paella, if you wanted to. Seriously. Put it on your resume.&lt;/p&gt;
&lt;h1 id=&#34;tl-dr-the-overarching-moral-lesson&#34;&gt;Tl;dr: the overarching moral lesson&lt;/h1&gt;
&lt;p&gt;Whether it&amp;rsquo;s cooking, coding, or anything else, problems may at first seem confusing, insurmountable, or downright boring. If you&amp;rsquo;re faced with such a challenge, just remember: they&amp;rsquo;re a lot more digestible with a side of bite-sized MIQ chips.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;solve-miq-bowl.png#center&#34; alt=&#34;Bowl of MIQs.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/cover_solve-paella_hu7c9f995cc962a3f8b743096a43864b63_232134_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Making sandwiches with closures in JavaScript</title><link>https://victoria.dev/blog/making-sandwiches-with-closures-in-javascript/</link><pubDate>Sun, 28 May 2017 09:16:35 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/making-sandwiches-with-closures-in-javascript/</guid><description>An explanation of closures and how they can emulate private methods in JavaScript.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/making-sandwiches-with-closures-in-javascript/cover_closures-sandwich_hud81d1fec4fb76eb8b9cdb31f41b7a4aa_32752_640x0_resize_q75_box.jpg" width="640" height="320"/>
&lt;p&gt;Say you&amp;rsquo;re having a little coding get-together, and you need some sandwiches. You happen to know that everyone prefers a different type of sandwich, like chicken, ham, or peanut butter and mayo. You could make all these sandwiches yourself, but that would be tedious and boring.&lt;/p&gt;
&lt;p&gt;Luckily, you know of a nearby sandwich shop that delivers. They have the ability and ingredients to make any kind of sandwich in the world, and all you have to do is order through their app.&lt;/p&gt;
&lt;p&gt;The sandwich shop looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ingredients&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;barry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ingredients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; sandwich&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we have an outer function, &lt;code&gt;makeMeASandwich()&lt;/code&gt; that takes an argument, &lt;code&gt;x&lt;/code&gt;. This outer function has the local variable &lt;code&gt;ingredients&lt;/code&gt;, which is just &lt;code&gt;x&lt;/code&gt; mushed together.&lt;/p&gt;
&lt;p&gt;Barry? Who&amp;rsquo;s Barry? He&amp;rsquo;s the guy who works at the sandwich shop. You&amp;rsquo;ll never talk with Barry directly, but he&amp;rsquo;s the reason your sandwiches are made, and why they&amp;rsquo;re so delicious. Barry takes &lt;code&gt;ingredients&lt;/code&gt; and mushes them together with &amp;ldquo; sandwich&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The reason Barry is able to access the &lt;code&gt;ingredients&lt;/code&gt; is because they&amp;rsquo;re in his outer scope. If you were to take Barry out of the sandwich shop, he&amp;rsquo;d no longer be able to access them. This is an example of &lt;em&gt;lexical scoping&lt;/em&gt;: &amp;ldquo;Nested functions have access to variables declared in their outer scope.&amp;rdquo; (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Lexical_scoping&#34;&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Barry, happily at work in the sandwich shop, is an example of a closure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Closures&lt;/strong&gt; are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions &amp;lsquo;remember&amp;rsquo; the environment in which they were created. (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&#34;&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you order, the app submits your sandwich request like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pbm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;peanut butter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mayo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pbm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in thirty-minutes-or-it&amp;rsquo;s-free, you get: &lt;code&gt;peanut butter mayo sandwich&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The nice thing about the sandwich shop app is that it remembers the sandwiches you&amp;rsquo;ve ordered before. Your peanut butter and mayo sandwich is now available to you as &lt;code&gt;pbm()&lt;/code&gt; for you to order anytime. It&amp;rsquo;s pretty convenient since, each time you order, there&amp;rsquo;s no need to specify that the sandwich you want is the same one you got before with peanut butter and mayo and it&amp;rsquo;s a sandwich. Using &lt;code&gt;pbm()&lt;/code&gt; is much more concise.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s order the sandwiches you need for the party:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pmrp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;prosciutto&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mozzarella&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red pepper&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pbt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;peanut butter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tuna&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pbm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;peanut butter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mayo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pmrp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pbt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pbm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your order confirmation reads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;prosciutto mozzarella red pepper sandwich
peanut butter tuna sandwich
ham sandwich
peanut butter mayo sandwich&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plot twist! The guy who wanted a ham sandwich now wants a ham &lt;em&gt;and cheese&lt;/em&gt; sandwich. Luckily, the sandwich shop just released a new version of their app that will let you add cheese to any sandwich.&lt;/p&gt;
&lt;p&gt;With this added feature, the sandwich shop now looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeMeASandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ingredients&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;barry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ingredients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; sandwich&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;barryAddCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;slices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ingredients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; sandwich with &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; slices of cheese&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;noCheese&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;barry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;addCheese&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;barryAddCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You amend the order to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;pmrp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;noCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pbt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;noCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pbm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;noCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And your order confirmation reads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;prosciutto mozzarella red pepper sandwich
peanut butter tuna sandwich
ham sandwich with &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; slices of cheese
peanut butter mayo sandwich&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll notice that when you order a sandwich with cheese, Barry puts 2 slices of cheese on it. In this way, the sandwich shop controls how much cheese you get. You can&amp;rsquo;t get to Barry to tell him you want more than 2 slices at a time. That&amp;rsquo;s because your only access to the sandwich shop is through the public functions &lt;code&gt;noCheese&lt;/code&gt; or &lt;code&gt;addCheese&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, there&amp;rsquo;s a way to cheat the system&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCheese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By ordering the same ham sandwich with cheese three times, you get: &lt;code&gt;ham sandwich with 6 slices of cheese&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This happens because the sandwich shop app recognizes the variable &lt;code&gt;hm&lt;/code&gt; as the same sandwich each time, and increases the number of cheese slices it tells Barry to add.&lt;/p&gt;
&lt;p&gt;The app could prevent you from adding lots of cheese to the same sandwich, either by adding a maximum or by appending unique order numbers to the variable names&amp;hellip; but this is our fantasy sandwich shop, and we get to pile on as much cheese as we want.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;closures-cheesestack.jpg#center&#34; alt=&#34;All the cheese.&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By using closures, we can have JavaScript emulate private methods found in languages like Ruby and Java. Closures are a useful way to extend the functionality of JavaScript, and also order sandwiches.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/making-sandwiches-with-closures-in-javascript/cover_closures-sandwich_hud81d1fec4fb76eb8b9cdb31f41b7a4aa_32752_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Understanding Array.prototype.reduce() and recursion using apple pie</title><link>https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/</link><pubDate>Thu, 18 May 2017 11:40:06 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/</guid><description>An explanation of JavaScript reduce() method and recursive functions using delicious, attention-retaining apples.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/cover_recursion-pie_hu8ebe63016922b8d03a55fee198b3157a_116172_640x0_resize_q75_box.jpg" width="640" height="341"/>
&lt;p&gt;I was having trouble understanding &lt;code&gt;reduce()&lt;/code&gt; and recursion in JavaScript, so I wrote this article to explain it to myself (hey, look, recursion!). I hope you find my examples both helpful and delicious.&lt;/p&gt;
&lt;p&gt;Given an array with nested arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to produce this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;using-for-loops-and-if-statements&#34;&gt;Using for loops and if statements&lt;/h1&gt;
&lt;p&gt;Naively, if we know the maximum number of nested arrays we&amp;rsquo;ll encounter (there are 4 in this example), we can use &lt;code&gt;for&lt;/code&gt; loops to iterate through each array item, then &lt;code&gt;if&lt;/code&gt; statements to check if each item is in itself an array, and so on&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iiii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iiii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iiii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iiii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [1, 2, 3, 4]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;Which works, but of course looks ridiculous. Besides looking ridiculous, a) it only works if we know how many nested arrays we&amp;rsquo;ll process, b) it&amp;rsquo;s hard to read and harder to understand, and c) can you imagine having to debug this mess?! (Gee, I think there&amp;rsquo;s an extra &lt;code&gt;i&lt;/code&gt; somewhere.)&lt;/p&gt;
&lt;h1 id=&#34;using-reduce&#34;&gt;Using reduce&lt;/h1&gt;
&lt;p&gt;JavaScript has a couple methods we can use to make our code a little less ridiculous. One of these is &lt;code&gt;reduce()&lt;/code&gt; and it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 1, 2, 3, [ [ 4 ] ] ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s a lot less code, but we haven&amp;rsquo;t taken care of some of the nested arrays. Let&amp;rsquo;s first walk through &lt;code&gt;reduce()&lt;/code&gt; together and examine what it does to see how we&amp;rsquo;ll correct this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Array.prototype.reduce()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value. (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example&#34;&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s not quite as complicated as it seems. Let&amp;rsquo;s think of &lt;code&gt;reduce()&lt;/code&gt; as an out-of-work developer (AI took all the dev jobs) with an empty basket. We&amp;rsquo;ll call him Adam. Adam&amp;rsquo;s main function (ba-dum ching) is now to take apples from a pile, shine them up, and put them one-by-one into the basket. This basket of shiny apples is destined to become delicious apple pies. It&amp;rsquo;s a very important job.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;recursion-apple-formula.jpg#center&#34; alt=&#34;Pile of apples + Adam: apple pie.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;Apples plus human effort equals pie. Not to be confused with apple-human-pie, which is less appetizing.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;In our above example, the pile of apples is our array, &lt;code&gt;arr&lt;/code&gt;. Our basket is &lt;code&gt;done&lt;/code&gt;, the accumulator. The initial value of &lt;code&gt;done&lt;/code&gt; is an empty array, which we see as &lt;code&gt;[]&lt;/code&gt; at the end of our reduce function. The apple that our out-of-work dev is currently shining, you guessed it, is &lt;code&gt;curr&lt;/code&gt;. Once Adam processes the current apple, he places it into the basket (&lt;code&gt;.concat()&lt;/code&gt;). When there are no more apples in the pile, he returns the basket of polished apples to us, and then probably goes home to his cat, or something.&lt;/p&gt;
&lt;h1 id=&#34;using-reduce-recursively-to-address-nested-arrays&#34;&gt;Using reduce recursively to address nested arrays&lt;/h1&gt;
&lt;p&gt;So that&amp;rsquo;s all well and good, and now we have a basket of polished apples. But we still have some nested arrays to deal with. Going back to our analogy, let&amp;rsquo;s say that some of the apples in the pile are in boxes. Within each box there could be more apples, and/or more boxes containing smaller, cuter apples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;recursion-nested-apples.jpg#center&#34; alt=&#34;Box within a box within a box with apples.&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;Adorable, slightly skewed apples just want to be loved/eaten.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what we want our apple-processing-function/Adam to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the pile of apples is a pile of apples, take an apple from the pile.&lt;/li&gt;
&lt;li&gt;If the apple is an apple, polish it, put it in the basket.&lt;/li&gt;
&lt;li&gt;If the apple is a box, open the box. If the box contains an apple, go to step 2.&lt;/li&gt;
&lt;li&gt;If the box contains another box, open this box, and go to step 3.&lt;/li&gt;
&lt;li&gt;When the pile is no more, give us the basket of shiny apples.&lt;/li&gt;
&lt;li&gt;If the pile of apples is not a pile of apples, give back whatever it is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A recursive reduce function that accomplishes this is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// [ 1, 2, 3, 4 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bear with me and I&amp;rsquo;ll explain.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Recursion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An act of a function calling itself. Recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (continues recursion). (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Recursion&#34;&gt;MDN&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you examine our code above, you&amp;rsquo;ll see that &lt;code&gt;flatten()&lt;/code&gt; appears twice. The first time it appears, it tells Adam what to do with the pile of apples. The second time, it tells him what to do with the thing he&amp;rsquo;s currently holding, providing instructions in the case it&amp;rsquo;s an apple, and in the case it&amp;rsquo;s not an apple. The thing to note is that these instructions are a &lt;em&gt;repeat of the original instructions we started with&lt;/em&gt; - and that&amp;rsquo;s recursion.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll break it down line-by-line for clarity:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;function flatten(arr) {&lt;/code&gt; - we name our overall function and specify that it will take an argument, &lt;code&gt;arr&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if (Array.isArray(arr)) {&lt;/code&gt; - we examine the provided &amp;ldquo;arrgument&amp;rdquo; (I know, I&amp;rsquo;m very funny) to determine if it is an array.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return arr.reduce(function(done,curr){&lt;/code&gt; - if the previous line is true and the argument is an array, we want to reduce it. This is our recursive case. We&amp;rsquo;ll apply the following function to each array item&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return done.concat(flatten(curr));&lt;/code&gt; - an unexpected plot twist appears! The function we want to apply is the very function we&amp;rsquo;re in. Colloquially: take it from the top.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}, []);&lt;/code&gt; - we tell our reduce function to start with an empty accumulator (&lt;code&gt;done&lt;/code&gt;), and wrap it up.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;} else {&lt;/code&gt; - this resolves our if statement at line 2. If the provided argument isn&amp;rsquo;t an array&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return arr;&lt;/code&gt; - return whatever the &lt;code&gt;arr&lt;/code&gt; is. (Hopefully a cute apple.) This is our base case that breaks us out of recursion.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt; - end the else statement.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt; - end the overall function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we&amp;rsquo;re done! We&amp;rsquo;ve gone from our 24 line, 4-layers-deep nested &lt;code&gt;for&lt;/code&gt; loop solution to a much more concise, 9 line recursive reduce solution. Reduce and recursion can seem a little impenetrable at first, but they&amp;rsquo;re valuable tools that will save you lots of future effort once you grasp them.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t worry about Adam, our out-of-work developer. He got so much press after being featured in this article that he opened up his very own AI-managed apple pie factory. He&amp;rsquo;s very happy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;recursion-adams-apples.jpg#center&#34; alt=&#34;Adam&#39;s apple pie factory, &amp;quot;Adam&#39;s Apples.&amp;quot;&#34; /&gt;
&lt;p class=&#34;has-text-centered img-caption&#34;&gt;+1 for you if you saw that one coming.&lt;/p&gt;&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/cover_recursion-pie_hu8ebe63016922b8d03a55fee198b3157a_116172_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>Iterating over objects and arrays: frequent errors</title><link>https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/</link><pubDate>Tue, 16 May 2017 10:46:46 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/</guid><description>A quick reference to why your code isn&#39;t working, or some errors I frequently make with iteration when the coffee wears off.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/cover_hu6a5c216625002e6991fcf24fc0deba26_1321860_640x0_resize_box_2.png" width="640" height="374"/>
&lt;p&gt;Here&amp;rsquo;s &lt;del&gt;some complaining&lt;/del&gt; a quick overview of some code that has confounded me more than once. I&amp;rsquo;m told even very experienced developers encounter these situations regularly, so if you find yourself on your third cup of coffee scratching your head over why your code is doing exactly what you told it to do (and not what you &lt;em&gt;want&lt;/em&gt; it to do), maybe this post can help you.&lt;/p&gt;
&lt;p&gt;The example code is JavaScript, since that&amp;rsquo;s what I&amp;rsquo;ve been working in lately, but I believe the concepts to be pretty universal.&lt;/p&gt;
&lt;h1 id=&#34;quick-reference-for-equivalent-statements&#34;&gt;Quick reference for equivalent statements&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;This&amp;hellip;&lt;/th&gt;
&lt;th&gt;&amp;hellip;is the same as this&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i++;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;i = i + 1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i--;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;i = i - 1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apples += 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apples = apples + 5;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apples -= 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apples = apples - 5;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apples *= 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apples = apples * 5;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apples /= 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apples = apples / 5;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;quick-reference-for-logical-statements&#34;&gt;Quick reference for logical statements&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;This&amp;hellip;&lt;/th&gt;
&lt;th&gt;&amp;hellip;gives this&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3 == &#39;3&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; (type converted)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3 === &#39;3&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt; (type matters; integer is not a string)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3 != &#39;3&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt; (type converted, 3: 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3 !== &#39;3&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; (type matters; integer is not a string)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#124;&amp;#124;&lt;/td&gt;
&lt;td&gt;logical &amp;ldquo;or&amp;rdquo;: either side evaluated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;logical &amp;ldquo;and&amp;rdquo;: both sides evaluated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;objects&#34;&gt;Objects&lt;/h1&gt;
&lt;p&gt;Given a breakfast object that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;waffles&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;fruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;blueberries&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;strawberries&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;coffee&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cover.png#center&#34; alt=&#34;Breakfast object.&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iterate-over-object-properties&#34;&gt;Iterate over object properties&lt;/h2&gt;
&lt;p&gt;We can iterate through each breakfast item using a for loop as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;item: eggs
item: waffles
item: fruit
item: coffee&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;get-object-property-value&#34;&gt;Get object property value&lt;/h2&gt;
&lt;p&gt;We can access the value of the property or nested properties (in this example, the number of items) like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;How many waffles? &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;waffles&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;How many strawberries? &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;strawberries&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or equivalent syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;How many waffles? &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;waffles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;How many strawberries? &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fruit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strawberries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;How many waffles? &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
How many strawberries? &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;get-object-property-from-the-value&#34;&gt;Get object property from the value&lt;/h2&gt;
&lt;p&gt;If instead I want to access the property via the value, for example, to find out which items are served in twos, I can do so by iterating like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Two of: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which gives us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Two of: eggs
Two of: waffles&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;alter-nested-property-values&#34;&gt;Alter nested property values&lt;/h2&gt;
&lt;p&gt;Say I want to increase the number of fruits in breakfast, because sugar is bad for me and I like things that are bad for me. I can do that like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fruits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakfast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fruits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;fruits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fruits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which gives us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; blueberries: &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;, strawberries: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;arrays&#34;&gt;Arrays&lt;/h1&gt;
&lt;p&gt;Given an array of waffles that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wafflesIAte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iteration-waffles.png&#34; alt=&#34;Waffle array.&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iterate-through-array-items&#34;&gt;Iterate through array items&lt;/h2&gt;
&lt;p&gt;We can iterate through each item in the array using a for loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wafflesIAte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;array index: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item from array: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wafflesIAte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;array index: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
array index: &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
item from array: &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some things to remember:
&lt;code&gt;i&lt;/code&gt; in the above context is a placeholder; we could substitute anything we like (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;underpants&lt;/code&gt;, etc). It simply denotes each instance of the iteration.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i &amp;lt; wafflesIAte.length&lt;/code&gt; tells our for loop to continue as long as &lt;code&gt;i&lt;/code&gt; is less than the array&amp;rsquo;s length (in this case, 7).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i++&lt;/code&gt; is equivalent to &lt;code&gt;i+1&lt;/code&gt; and means we&amp;rsquo;re incrementing through our array by one each time. We could also use &lt;code&gt;i+2&lt;/code&gt; to proceed with every other item in the array, for example.&lt;/p&gt;
&lt;h2 id=&#34;access-array-item-by-index&#34;&gt;Access array item by index&lt;/h2&gt;
&lt;p&gt;We can specify an item in the array using the array index, written as &lt;code&gt;wafflesIAte[i]&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt; is any index of the array. This gives the item at that location.&lt;/p&gt;
&lt;p&gt;Array index always starts with &lt;code&gt;0&lt;/code&gt;, which is accessed with &lt;code&gt;wafflesIAte[0]&lt;/code&gt;. Using &lt;code&gt;wafflesIAte[1]&lt;/code&gt; gives us the second item in the array, which is &amp;ldquo;3&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;ways-to-get-mixed-up-over-arrays&#34;&gt;Ways to get mixed up over arrays&lt;/h2&gt;
&lt;p&gt;Remember that &lt;code&gt;wafflesIAte.length&lt;/code&gt; and the index of the last item in the array are different. The former is 7, the latter is &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When incrementing &lt;code&gt;i&lt;/code&gt;, remember that &lt;code&gt;[i+1]&lt;/code&gt; and &lt;code&gt;[i]+1&lt;/code&gt; are different:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[i+1] gives next array index: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wafflesIAte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[i]+1 gives index value + 1: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wafflesIAte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Produces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i+1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; gives next array index: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;+1 gives index value + &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;practice-makes-better&#34;&gt;Practice makes&amp;hellip; better.&lt;/h1&gt;
&lt;p&gt;The more often you code and correct your errors, the better you&amp;rsquo;ll remember it next time!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for now. If you have a correction, best practice, or another common error for me to add, please let me know!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/iterating-over-objects-and-arrays-frequent-errors/cover_hu6a5c216625002e6991fcf24fc0deba26_1321860_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>How to replace a string in a dozen old blog posts with one sed terminal command</title><link>https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/</link><pubDate>Sat, 06 May 2017 20:04:53 +0800</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/</guid><description>How to use sed to update a URL in all your old blog posts with simple find and replace.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/cover_sed_hu0a982320f6b8be4e2c17737e58dbed29_189790_640x0_resize_box_2.png" width="640" height="320"/>
&lt;p&gt;&lt;em&gt;June 1, 2018: This post was previously titled &amp;ldquo;That time 30 seconds, StackOverflow, and sed saved me 30 minutes&amp;rdquo; and has since been revised and updated with more examples and a couple new doodles. It&amp;rsquo;s better now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve had more than a few usernames, URLs, and Twitter handles over the years. Whether it was changing to something that better reflected my current interests or briefly getting caught up in the &amp;ldquo;.io&amp;rdquo; domain craze, there always seemed to be a great reason for an Internet presence refresh. The downside to all this fresh rebranding is that it often means needing to update a lot of links. (If you want to redirect an old blog post URL, check out &lt;a href=&#34;https://victoria.dev/blog/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/&#34;&gt;this article&lt;/a&gt; too!)&lt;/p&gt;
&lt;p&gt;This week, I launched my new website and changed my Twitter username to match. I was about to spend time manually going through all my old blog posts to find and update the URLs when this very future blog post popped up on my screen like &lt;a href=&#34;http://knowyourmeme.com/memes/clippy&#34;&gt;Clippy&lt;/a&gt; and shook its pixelated head disapprovingly.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a worthwhile new habit for you: anytime you find yourself going &amp;ldquo;Ughhh I have to do &lt;em&gt;that?&lt;/em&gt; It&amp;rsquo;ll take forever!&amp;rdquo; head on over to &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; and search for &amp;ldquo;terminal command (the thing you&amp;rsquo;re trying to do)”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sed-duck.png&#34; alt=&#34;Superhero DuckDuckGo doodle&#34; /&gt;
&lt;p class=&#34;img-caption&#34;&gt;Superhero Duck is here to save your future hours!&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I found to save myself a whole bunch of mindless tedium.&lt;/p&gt;
&lt;h1 id=&#34;update-a-string-in-dozens-of-blog-posts-using-sed&#34;&gt;Update a string in dozens of blog posts using sed&lt;/h1&gt;
&lt;p&gt;Meet your new friend &lt;code&gt;sed&lt;/code&gt;. This amazingly powerful tool lives in your terminal and is available to be totally underused for things like finding and replacing strings in files. (I seem to have a habit of suggesting ways to totally underuse powerful tools, as in my exploration of how to &lt;a href=&#34;https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/&#34;&gt;use cron to create desktop notifications&lt;/a&gt;, but I digress.)&lt;/p&gt;
&lt;h2 id=&#34;current-directory-non-recursive&#34;&gt;Current directory, non-recursive&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Non-recursive&lt;/strong&gt; means sed won&amp;rsquo;t change files in any subdirectories of the current folder.&lt;/p&gt;
&lt;p&gt;Run this command to search all the files in your current directory and replace a given string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;// to replace &lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; with &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
$ sed -i -- &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s what each component of the command does:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; will change the original, and stands for &amp;ldquo;in-place.&amp;rdquo;&lt;br /&gt;
&lt;code&gt;s&lt;/code&gt; is for substitute, so we can find and replace.&lt;br /&gt;
&lt;code&gt;foo&lt;/code&gt; is the string we&amp;rsquo;ll be taking away,&lt;br /&gt;
&lt;code&gt;bar&lt;/code&gt; is the string we&amp;rsquo;ll use instead today.&lt;br /&gt;
&lt;code&gt;g&lt;/code&gt; as in &amp;ldquo;global&amp;rdquo; means &amp;ldquo;all occurrences, please.&amp;rdquo;&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt; denotes all file types. (No more rhymes. What a tease.)&lt;/p&gt;
&lt;p&gt;You can limit the operation to one file type, such as &lt;code&gt;txt&lt;/code&gt;, by using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sed -i -- &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; *.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;current-directory-and-subdirectories-recursive&#34;&gt;Current directory and subdirectories, recursive&lt;/h2&gt;
&lt;p&gt;We can supplement &lt;code&gt;sed&lt;/code&gt; with &lt;code&gt;find&lt;/code&gt; to expand our scope to all the current folder&amp;rsquo;s subdirectories. This will include any hidden files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To ignore hidden files (such as &lt;code&gt;.git&lt;/code&gt;) you can pass the negation modifier &lt;code&gt;-not -path &#39;*/\.*&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -not -path &lt;span class=&#34;s1&#34;&gt;&amp;#39;*/\.*&amp;#39;&lt;/span&gt; -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will exclude any file that has the string &lt;code&gt;/.&lt;/code&gt; in its path.&lt;/p&gt;
&lt;p&gt;Alternatively, you can limit the operation to file names that end in a certain extension, like Markdown:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;*.md&amp;#34;&lt;/span&gt; -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;working-with-urls-change-the-separator&#34;&gt;Working with URLs: change the separator&lt;/h2&gt;
&lt;p&gt;In the case of needing to update a URL, the &lt;code&gt;/&lt;/code&gt; separator in your strings will need escaping. It ends up looking like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/https:\/\/www.oldurl.com\/blog/https:\/\/www.newurl.com\/blog/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can avoid some confusion and mistakes by changing the separator to any non-conflicting character. The character that follows the &lt;code&gt;s&lt;/code&gt; will be treated as the separator. In our case, using a &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; would do. This doesn&amp;rsquo;t require escaping and is much more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s_https://www.oldurl.com/blog_https://www.newurl.com/blog_g&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; +&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;maybe-endless-possibilities&#34;&gt;(Maybe) endless possibilities!&lt;/h1&gt;
&lt;p&gt;There&amp;rsquo;s a lot more that &lt;code&gt;sed&lt;/code&gt; can do. I&amp;rsquo;ll be adding to this living post as I find more examples that are useful. For now, &lt;a href=&#34;http://www.folkstalk.com/2012/01/sed-command-in-unix-examples.html&#34;&gt;here are some other use cases&lt;/a&gt; that you may find handy.&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/cover_sed_hu0a982320f6b8be4e2c17737e58dbed29_189790_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Top free resources for developing coding superpowers</title><link>https://victoria.dev/blog/top-free-resources-for-developing-coding-superpowers/</link><pubDate>Thu, 27 Apr 2017 08:14:09 +0800</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/top-free-resources-for-developing-coding-superpowers/</guid><description>The go-to resources from my bookmarks folder for anyone who wants to learn to code.</description><content:encoded>
&lt;p&gt;I&amp;rsquo;m frequently asked for my opinion on how to get started on being a freelance developer. If you&amp;rsquo;re hoping to live the life of a remote working digital nomad, whichever career you choose, having a little coding expertise in your back pocket will be a big benefit.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick list of resources that you should definitely look at first if you&amp;rsquo;re hoping to gain some coding superpowers for free. I&amp;rsquo;ve used all of these personally and I&amp;rsquo;m happy to answer any questions if you have them - &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;just ask&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;freecodecamp-freecodecamp-com-https-freecodecamp-com&#34;&gt;freeCodeCamp (&lt;a href=&#34;https://freecodecamp.com/&#34;&gt;freecodecamp.com&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;An amazingly high value curriculum that can take you from zero to full-stack.&lt;/strong&gt; This is always my top recommendation for someone looking to test the waters and see if a development career is interesting enough to pursue. The toughest part about learning to code on your own is getting stuck and not having quick help - this is the problem that I think freeCodeCamp (FCC) solves best by allowing you to immerse yourself in a hugely supportive social community. Through their Gitter chat room, you can get quick advice if you get stuck on a challenge, and even team up with someone to tackle projects in-depth. The FCC community is lively and diverse with people from all over the world, and they even have IRL meetups.&lt;/p&gt;
&lt;h1 id=&#34;hackerrank-www-hackerrank-com-https-www-hackerrank-com&#34;&gt;HackerRank (&lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;www.hackerrank.com&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Solve challenges tailored for every level of coder over a variety of relevant topics. Enter competitions and increase your chances of getting hired.&lt;/strong&gt; I love HackerRank especially for its algorithm and statistics challenges - if you&amp;rsquo;re hoping to get into data science, this is an area that you&amp;rsquo;ll need to be especially sharp in. Seasoned developers return to HackerRank to hone their skills and enter competitions that can win you swag and get you noticed for jobs.&lt;/p&gt;
&lt;h1 id=&#34;stack-overflow-stackoverflow-com-http-stackoverflow-com&#34;&gt;Stack Overflow (&lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow.com/&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Even seasoned developers have questions.&lt;/strong&gt; This is the top search hit that comes up when you Google that error message you thought only you were getting. If you&amp;rsquo;re shy about asking a question you can&amp;rsquo;t find the answer to - don&amp;rsquo;t be! Simply asking it will be of help to the next person who comes looking for the exact same solution.&lt;/p&gt;
&lt;h1 id=&#34;the-odin-project-www-theodinproject-com-http-www-theodinproject-com&#34;&gt;The Odin Project (&lt;a href=&#34;http://www.theodinproject.com/&#34;&gt;www.theodinproject.com/&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A curriculum for web developers built on a collection of resources designed to take you from &amp;ldquo;What&amp;rsquo;s the Internet?&amp;rdquo; to web dev hire.&lt;/strong&gt; For those specifically interested in web development, there&amp;rsquo;s a community here for you. The Odin Project (TOP) has accessible tutorial videos that can really flesh out your knowledge of Ruby on Rails, Javascript, jQuery, HTML5 and CSS3 - all your web dev essentials.&lt;/p&gt;
&lt;h2 id=&#34;what-are-you-waiting-for&#34;&gt;What are you waiting for?&lt;/h2&gt;
&lt;p&gt;Dive in - it&amp;rsquo;s free! Good luck on your journey to coding superpowers - I&amp;rsquo;ll see you in the chat rooms!&lt;/p&gt;
&lt;p&gt;Have one I missed? Let me know!&lt;/p&gt;</content:encoded></item><item><title>Things you need to know about becoming a Data Scientist</title><link>https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/</link><pubDate>Fri, 31 Mar 2017 13:19:19 +0900</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/</guid><description>Five Data Scientists discuss a day in the life and what it takes to be a successful Data Scientist.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/cover_datasci-panelists_hud75b6aee53166895e543034fff84f78c_103732_640x0_resize_q75_box.jpg" width="640" height="427"/>
&lt;p&gt;I recently attended a panel discussion hosted by General Assembly in Singapore entitled, &amp;ldquo;So you want to be a Data Scientist/Analyst&amp;rdquo;. The panel featured professionals in different stages of their careers and offered a wealth of information to an audience of hopefuls, including tips on how to land a job as a data scientist, and stories debunking myths that color this field.&lt;/p&gt;
&lt;h1 id=&#34;the-panelists&#34;&gt;The panelists&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Misrab Faizullah-Khan&lt;/strong&gt; - VP of Data Science, &lt;em&gt;GO_JEK&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Anthony Ta&lt;/strong&gt; - Data Scientist, &lt;em&gt;Tech in Asia&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Leow Guo Jun&lt;/strong&gt; - Data Scientist, &lt;em&gt;GO_JEK&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Gabriel Jiang&lt;/strong&gt; - Data Scientist&lt;br /&gt;
&lt;strong&gt;Adam Drake&lt;/strong&gt; - Chief Data Officer, &lt;em&gt;Atazzo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a rundown of the major points discussed, paraphrased for brevity.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-day-in-the-life-like&#34;&gt;What&amp;rsquo;s a day-in-the-life like?&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re mostly &amp;ldquo;data janitors.&amp;rdquo; A large part of working with data begins with and consists of data sanitation. Without quality data, you won&amp;rsquo;t get accurate results. Understanding how data should be sanitized largely encompasses skills that aren&amp;rsquo;t directly related to data analytics. To fully understand the problem you&amp;rsquo;re hoping to solve, you need to talk with the people involved. It&amp;rsquo;s important that everyone understands all the elements of a project, and exactly what those elements are being called. &amp;ldquo;Sales,&amp;rdquo; as an example, may be calculated differently depending on who you&amp;rsquo;re talking to.&lt;/p&gt;
&lt;h2 id=&#34;what-s-a-data-scientist-vs-data-analyst&#34;&gt;What&amp;rsquo;s a data &amp;ldquo;scientist&amp;rdquo; vs. data &amp;ldquo;analyst&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;It largely depends on the company you work for. &amp;ldquo;Data [insert modifier]&amp;rdquo; is only a recent distinction for a job field that has historically been called &amp;ldquo;Business Analytics.&amp;rdquo; In a smaller company, as with any other position, one person may handle a variety of data-related tasks under the title of &amp;ldquo;Data Scientist.&amp;rdquo; In a larger company with more staff and finer grain specialization, you may have a &amp;ldquo;Data Analyst&amp;rdquo; that handles less technical aspects, and a &amp;ldquo;Data Scientist&amp;rdquo; whose work is very technical and involves quantitative learning or machine learning.&lt;/p&gt;
&lt;p&gt;The field of data science/analytics is fresh enough that standard definitions for job titles really haven&amp;rsquo;t been agreed upon yet. When considering a position, focus on the company rather than the title.&lt;/p&gt;
&lt;h2 id=&#34;should-i-join-a-startup-or-large-company&#34;&gt;Should I join a startup or large company?&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s no wrong answer. Being aware of your own working style and preferences will help guide your decision.&lt;/p&gt;
&lt;p&gt;Startups generally offer more freedom and less micromanaging. This also means that you&amp;rsquo;ll necessarily receive less guidance, and will need to be able to figure stuff out, learn, and make progress under your own power.&lt;/p&gt;
&lt;p&gt;In a big company, you&amp;rsquo;re likely to experience more structure, and be expected to follow very clearly defined pre-existing processes. Your job scope will likely be more focused than it would be at a startup. You&amp;rsquo;ll experience less freedom in general, but also more certainty in what&amp;rsquo;s expected of you.&lt;/p&gt;
&lt;p&gt;In the end, especially at the beginning of your career, don&amp;rsquo;t put too much stock in choosing one or the other. If you like the company, big or small, give it a try. If you&amp;rsquo;re not happy there after a few months, then try another one. No career decision is ever permanent.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also worthwhile to note that even if you find a company you like the first time around, it&amp;rsquo;s in your best interest to change companies after one or two years. The majority of the salary raises you&amp;rsquo;ll earn in your lifetime will occur in the first ten years of your career. Say you&amp;rsquo;re hired by Company A as a junior data scientist for two years - after two years, you&amp;rsquo;re no longer a junior. You can now earn, say, a 30% higher salary in a data scientist position, but it&amp;rsquo;s unlikely that Company A will give you a 30% raise after two years. At that point it&amp;rsquo;s time to find Company B and put a few more years of experience on your resume, then probably change companies again. You don&amp;rsquo;t earn the big bucks sticking with one company for decades - you&amp;rsquo;ll always be the junior developer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;datasci-offstage.jpg&#34; alt=&#34;Talking offstage.&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-do-you-look-for-when-hiring-a-candidate&#34;&gt;What do you look for when hiring a candidate?&lt;/h2&gt;
&lt;p&gt;Overall, the most important skills for a data science candidate are soft skills. Curiosity, tenacity, and good communication skills are vital. Persistence, especially when it comes to adapting to a quickly changing industry, is important. The most promising candidates are passionate enough about the field to be learning everything they can, even outside of their work scope. Hard skills like coding and algorithms can be taught - it&amp;rsquo;s the soft skills that set good candidates apart.&lt;/p&gt;
&lt;p&gt;Hacking skills are also vital. This doesn&amp;rsquo;t necessarily mean you can write code. Someone who has a grasp of overall concepts, knows algorithms, and has curiosity enough to continuously learn is going to go farther than someone who can just write code. It takes creativity to build hacking skills on top of being familiar with the basic navigation points. Having the ability to come up with solutions that use available tools in new ways - that&amp;rsquo;s hacking skill.&lt;/p&gt;
&lt;p&gt;Design thinking is another important asset. Being able to understand how systems integrate on both technical and business levels is very valuable. If you&amp;rsquo;re able to see the big picture, you&amp;rsquo;re more likely to find different ways to accomplish the overall objective.&lt;/p&gt;
&lt;p&gt;You might think that seeing buzzwords on resumes makes you look more attractive as a candidate - more often, it stands out as a red flag. Putting &amp;ldquo;advanced machine learning&amp;rdquo; on your CV and then demonstrating that you don&amp;rsquo;t know basic algorithms doesn&amp;rsquo;t look good. It&amp;rsquo;s your projects and your interests outside of the job you&amp;rsquo;re applying for that say the most about you. Popular topics in this industry change fast - you&amp;rsquo;re better off having a solid grasp of basic fundamentals as well as a broad array of experience than name-dropping whatever&amp;rsquo;s trending.&lt;/p&gt;
&lt;h2 id=&#34;is-there-a-future-for-humans-in-the-data-science-field-when-will-the-machines-replace-us&#34;&gt;Is there a future for humans in the data science field? When will the machines replace us?&lt;/h2&gt;
&lt;p&gt;This isn&amp;rsquo;t a question unique to data science, and many historical examples already exist. Financial investment is a good example - where you used to have a human do calculations and make predictions, computers now do a lot of that automatically, making decisions about risk and possible payoff every day.&lt;/p&gt;
&lt;p&gt;Where humans won&amp;rsquo;t be replaced, just as in other industries that have embraced automation, is in the human element. You&amp;rsquo;ll still need people to handle communication, be creative, be curious, make interpretations and understand problems&amp;hellip; all those things are fundamentally human aspects of enterprise.&lt;/p&gt;
&lt;p&gt;Ultimately, machines and more automation will make human work less of a grind. By automating the mundane stuff, like data sanitization for example, human minds are freed up to develop more interesting things.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-future-applications-for-data-driven-automation&#34;&gt;What are the future applications for data-driven automation?&lt;/h2&gt;
&lt;p&gt;Legal is a good next candidate for automation. There&amp;rsquo;s a lot there that can be handled by programs using data to assess risk.&lt;/p&gt;
&lt;p&gt;Medicine is another field ripe for advances through data. Radiologists, your days are numbered: image detection is coming for you. The whole field of diagnostics is about to drastically change.&lt;/p&gt;
&lt;p&gt;A particularly interesting recent application for data science is in language translation. By looking at similarities in sentence structure and colloquial speech across different languages, we&amp;rsquo;re able to sort similar words based on the &amp;ldquo;space&amp;rdquo; they occupy within the language structure.&lt;/p&gt;
&lt;p&gt;Insurance - the original data science industry - already is and will continue to become very automated. With increased ability to use data to assess risk, we&amp;rsquo;re beginning to see new creative insurance products being introduced. E-commerce companies can now buy insurance on the risk a customer will return a product - hard to do without the accessibility of data that we have today.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-push-data-driven-decisions-and-get-my-boss-to-agree-with-me&#34;&gt;How do I push data-driven decisions and get my boss to agree with me?&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a loaded question. The bottom line is that it depends on the company&amp;rsquo;s data culture and decision path. We&amp;rsquo;ve experienced working for management who say, &amp;ldquo;We&amp;rsquo;ve already made the decisions, we just need the data to prove it.&amp;rdquo; Obviously, that&amp;rsquo;s a tough position to work from.&lt;/p&gt;
&lt;p&gt;Generally, ask yourself, &amp;ldquo;Am I making my boss look good?&amp;rdquo; You might hear that and think, &amp;ldquo;Why would I let my boss get all the credit?&amp;rdquo; - but who cares? Let them take the credit. If you&amp;rsquo;re producing good work, you&amp;rsquo;re making your team look good. If you make your team look good, you&amp;rsquo;re indispensible to your team and your boss. People who are indispensible are listened to.&lt;/p&gt;
&lt;h2 id=&#34;what-s-your-best-advice-for-a-budding-data-scientist&#34;&gt;What&amp;rsquo;s your best advice for a budding data scientist?&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t be too keen to define yourself too quickly. If you narrow your focus too much, especially when you&amp;rsquo;re learning, you can get stuck in a situation of having become an expert in &amp;ldquo;Technology A, version 3&amp;rdquo; when companies are looking to hire for experts in version 4. It happens.&lt;/p&gt;
&lt;p&gt;A broad understanding of fundamentals will be far more valuable to you on the whole. Maybe you start out writing code, and decide you don&amp;rsquo;t like it, but discover that you&amp;rsquo;re really good at designing big picture stuff and leading teams, and you end up as a technical lead. It could even vary depending on the company you work for - so stay flexible.&lt;/p&gt;
&lt;p&gt;Your best bet is to follow what you&amp;rsquo;re passionate about, and try to understand a wide range of overall concepts. Spend the majority of your efforts learning things that are timeless, like the base technologies under hot-topic items like TensorFlow. Arm yourself with a broad understanding of the terrain, different companies, and the products that are out there.&lt;/p&gt;
&lt;p&gt;If you focus on learning code specifically, learning one language well makes it easier to learn others. Make sure you understand the basics.&lt;/p&gt;
&lt;h3 id=&#34;tl-dr-it&#34;&gt;TL;dr it:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt; Talk more and don&amp;rsquo;t give up.&lt;br /&gt;
&lt;strong&gt;Anthony:&lt;/strong&gt; [Be] courageous, and hands-on.&lt;br /&gt;
&lt;strong&gt;Gabriel:&lt;/strong&gt; Be creative.&lt;br /&gt;
&lt;strong&gt;Guo Jun:&lt;/strong&gt; It&amp;rsquo;s worth the pain.&lt;br /&gt;
&lt;strong&gt;Misrab:&lt;/strong&gt; Evaluate yourself and maintain a feedback loop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;datasci-crowd.jpg&#34; alt=&#34;The crowd at GA Singapore&#34; /&gt;
&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/GA_Singapore&#34;&gt;General Assembly&lt;/a&gt; is one of many schools and resources available to those interested in a career in data science. I&amp;rsquo;ve listed a few others in &lt;a href=&#34;https://victoria.dev/blog/top-free-resources-for-developing-coding-superpowers/&#34;&gt;this post&lt;/a&gt; if you&amp;rsquo;re looking for more. Good luck!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/things-you-need-to-know-about-becoming-a-data-scientist/cover_datasci-panelists_hud75b6aee53166895e543034fff84f78c_103732_640x0_resize_q75_box.jpg" type="image/jpg"/></item><item><title>How I created custom desktop notifications using terminal and cron</title><link>https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</link><pubDate>Tue, 21 Feb 2017 10:48:38 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</guid><description>How you can use tools your Linux system already has to create custom desktop notifications.</description><content:encoded>
&lt;p&gt;In my last post I talked about moving from Windows 10 to running i3 on Linux, built up from Debian Base System. Among other things, this change has taught me about the benefits of using basic tools and running a minimal, lightweight system. You can achieve a lot of functionality with just command line tools and simple utilities. One example I&amp;rsquo;d like to illustrate in this post is setting up desktop notifications.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&#34;http://knopwob.org/dunst/&#34;&gt;dunst&lt;/a&gt; for desktop notifications. It&amp;rsquo;s a simple, lightweight tool that is easy to configure, doesn&amp;rsquo;t have many dependencies, and can be used across various distributions.&lt;/p&gt;
&lt;h1 id=&#34;battery-status-low-battery-notification&#34;&gt;Battery status/low battery notification&lt;/h1&gt;
&lt;p&gt;I was looking for a simple, versatile set up to create notifications for my battery status without having to rely on separate, standalone GUI apps or services. In my search I came across a simple one-line cron task that seemed to be the perfect fit. I adapted it to my purpose and it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;# m h dom mon dow command
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -u critical -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;#34; -t 3000 &amp;#34;{}\nBattery low!&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Psst&amp;hellip; &lt;a href=&#34;https://crontab.guru/&#34;&gt;here&amp;rsquo;s a great tool&lt;/a&gt; for formatting your crontab times.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a lot going on here, so let&amp;rsquo;s break it down:&lt;br /&gt;
&lt;code&gt;*/5 * * * *&lt;/code&gt;&lt;br /&gt;
Every five minutes, do the following.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acpi --battery&lt;/code&gt;&lt;br /&gt;
Execute &lt;code&gt;acpi&lt;/code&gt; and show battery information, which on its own returns something akin to:&lt;br /&gt;
&lt;code&gt;Battery 0: Discharging, 65%, 03:01:27 remaining&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pretty straightforward so far. At any point you could input &lt;code&gt;acpi --battery&lt;/code&gt; in a terminal and receive the status output. Today&amp;rsquo;s post, however, is about receiving this information passively in a desktop notification. So, moving on:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| awk -F, &#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&#39;&lt;/code&gt;&lt;br /&gt;
Pipe (&lt;code&gt;|&lt;/code&gt;) the result of the previous command to &lt;code&gt;awk&lt;/code&gt;. (If you don&amp;rsquo;t know what pipe does, here&amp;rsquo;s &lt;a href=&#34;http://superuser.com/questions/756158/what-does-the-linux-pipe-symbol-do&#34;&gt;an answer from superuser.com&lt;/a&gt; that explains it pretty well, I think.) &lt;code&gt;awk&lt;/code&gt; can do a lot of things, but in this case, we&amp;rsquo;re using it to examine the status of our battery. Let&amp;rsquo;s zoom in on the &lt;code&gt;awk&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk -F, &#39;/Discharging/ { if (int($2) &amp;lt; 20) print }&#39;&lt;/code&gt;&lt;br /&gt;
Basically, we&amp;rsquo;re saying, &amp;ldquo;Hey, awk, look at that input you just got and try to find the word &amp;ldquo;discharging,&amp;rdquo; then look to see if the number after the first comma is less than 20. If so, print the whole input.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| xargs -ri&lt;/code&gt;&lt;br /&gt;
Pipe the result of the previous command to &lt;code&gt;xargs&lt;/code&gt;, which takes it as its input and does more stuff with it. &lt;code&gt;-ri&lt;/code&gt; is equivalent to &lt;code&gt;-r&lt;/code&gt; (run the next command only if it receives arguments) and &lt;code&gt;-i&lt;/code&gt; (look for &amp;ldquo;{}&amp;rdquo; and replace it with the input). So in this example, xargs serves as our gatekeeper and messenger for the next command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env DISPLAY=:0&lt;/code&gt;&lt;br /&gt;
Run the following utility in the specified display, in this case, the first display of the local machine.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notify-send -u critical -i &amp;quot;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;quot; -t 3000 &amp;quot;{}\nLow battery!&amp;quot;&lt;/code&gt;&lt;br /&gt;
Shows a desktop notification with &lt;code&gt;-u critical&lt;/code&gt; (critical urgency), &lt;code&gt;-i&lt;/code&gt; (the specified icon), &lt;code&gt;-t 3000&lt;/code&gt; (display time/expires after 3000 milliseconds), and finally &lt;code&gt;{}&lt;/code&gt; (the output of awk, replaced by xargs).&lt;/p&gt;
&lt;p&gt;Not bad for a one-liner! I made a few modifications for different states of my battery. Here they all are in my crontab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;# m h dom mon dow command
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if ( (int($2) &amp;lt; 30) &amp;amp;&amp;amp; (int($2) &amp;gt; 15) ) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-low.png&amp;#34; -t 3000 &amp;#34;{}\nBattery low!&amp;#34;
*/5 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;lt; 15) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u critical -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&amp;#34; -t 3000 &amp;#34;{}\nSeriously, plug me in.&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Discharging/ { if (int($2) &amp;gt; 30) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok.png&amp;#34; &amp;#34;{}&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Charging/ { print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok-charging.png&amp;#34; &amp;#34;{}&amp;#34;
*/60 * * * * acpi --battery | awk -F, &amp;#39;/Charging/ { if (int($2) == 100) print }&amp;#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;#34;Battery status&amp;#34; -u normal -i &amp;#34;/usr/share/icons/Paper/16x16/status/xfce-battery-full-charging.png&amp;#34; &amp;#34;Fully charged.&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, you can open your crontab in the editor of your choice by accessing it as root from the &lt;code&gt;/var/spool/cron/crontabs/&lt;/code&gt; directory. It&amp;rsquo;s generally best practice however to make changes to your crontab with the command &lt;code&gt;crontab -e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see that each notification makes use of the &lt;code&gt;{}&lt;/code&gt; placeholder that tells xargs to put its input there - except for the last one. This is interesting because in this case, we&amp;rsquo;re only using &lt;code&gt;xargs -ri&lt;/code&gt; as a kind of switch to present the notification. The actual information that was the input for xargs is not needed in the output in order to create a notification.&lt;/p&gt;
&lt;h1 id=&#34;additional-notifications-with-command-line-tools&#34;&gt;Additional notifications with command line tools&lt;/h1&gt;
&lt;p&gt;With cron and just a few combinations of simple command line tools, you can create interesting and useful notifications. Consider the following:&lt;/p&gt;
&lt;h2 id=&#34;periodically-check-your-dhcp-address&#34;&gt;Periodically check your dhcp address&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;*/60 * * * * journalctl | awk -F: &#39;/dhcp/ &amp;amp;&amp;amp; /address/ { print $5 }&#39; | tail -1 | xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;dhcp address&amp;quot; -u normal &amp;quot;{}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which does the following:&lt;br /&gt;
&lt;code&gt;*/60 * * * *&lt;/code&gt;&lt;br /&gt;
Every 60 minutes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;journalctl&lt;/code&gt;&lt;br /&gt;
Take the contents of your system log.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| awk -F: &#39;/dhcp/ &amp;amp;&amp;amp; /address/ { print $5 }&#39;&lt;/code&gt;&lt;br /&gt;
Find logs containing both &amp;ldquo;dhcp&amp;rdquo; and &amp;ldquo;address&amp;rdquo; and output the 5th portion as separated by &amp;ldquo;:&amp;rdquo; (the time field counts).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| tail -1&lt;/code&gt;&lt;br /&gt;
Take the last line of the output.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;| xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;dhcp address&amp;quot; -u normal &amp;quot;{}&amp;quot;&lt;/code&gt;&lt;br /&gt;
Create the desktop notification including the output.&lt;/p&gt;
&lt;h2 id=&#34;periodically-display-the-time-and-date&#34;&gt;Periodically display the time and date&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;*/60 * * * * timedatectl status | awk -F\n &#39;/Local time/ { print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &amp;quot;Current Time&amp;quot; -u normal &amp;quot;{}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-log-activity&#34;&gt;System log activity&lt;/h2&gt;
&lt;p&gt;You can also search your system logs (try &lt;code&gt;journalctl&lt;/code&gt;) for any number of things using awk, enabling you to get periodic notifications of virtually any logged events.&lt;/p&gt;
&lt;h1 id=&#34;experiment&#34;&gt;Experiment!&lt;/h1&gt;
&lt;p&gt;As with all things, you are only limited by your imagination! I hope this post has given you some idea about the endless possibilities of these simple utilities. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>How I ditched WordPress and set up my custom domain HTTPS site for (almost) free</title><link>https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/</link><pubDate>Sat, 28 Jan 2017 13:16:17 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/</guid><description>A guide (for the minimally tech-savvy) to setting up a website with HTTPS using Hugo, Cloudflare and GitHub Pages.</description><content:encoded>
&lt;img src="https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/cover_free-https_hu8673880aabf7986b54167d322ecde323_1104421_640x0_resize_box_2.png" width="640" height="402"/>
&lt;p&gt;I got annoyed with WordPress.com. While using the service has its pros (like https and a mobile responsive website, and being very visual and beginner-friendly) it&amp;rsquo;s limiting. For someone who&amp;rsquo;s comfortable enough to be tweaking CSS but who&amp;rsquo;s not interested in creating their own theme (or paying upwards of $50 for one), I felt I wasn&amp;rsquo;t really the type of consumer WordPress.com was suited to.&lt;/p&gt;
&lt;p&gt;To start with, if you want to remove WordPress advertising and use a custom domain name, it&amp;rsquo;s a minimum of $3 per month. If, like me, the free themes provided aren&amp;rsquo;t just what you&amp;rsquo;re looking for, you&amp;rsquo;re stuck with two choices: buy a theme for $50+, or pay $8.25 per month to do &lt;em&gt;some&lt;/em&gt; css customization. I don&amp;rsquo;t know about you, but I feel like there should be a hack for this.&lt;/p&gt;
&lt;h1 id=&#34;how-i-ditched-wordpress-and-got-everything-i-wanted-for-free&#34;&gt;How I ditched WordPress and got everything I wanted for free&lt;/h1&gt;
&lt;p&gt;Okay, &lt;em&gt;almost&lt;/em&gt; free. You still have to pay &lt;a href=&#34;https://www.namecheap.com/promos/2016/crazy-88.aspx?aff=109417&#34;&gt;at least $0.88&lt;/a&gt; for a domain name.&lt;/p&gt;
&lt;p&gt;For those of you technical enough to skip reading a long post, the recipe is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.namecheap.com/?aff=109417&#34;&gt;Buy a custom domain via this Namecheap affiliate link&lt;/a&gt; (Thanks! :))&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, my favorite static site generator&lt;/li&gt;
&lt;li&gt;Host with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put your &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/#configuring-an-alias-or-aname-record-with-your-dns-provider&#34;&gt;custom domain to work with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Use Cloudflare&amp;rsquo;s free plan&lt;/del&gt; &lt;a href=&#34;#5-enforce-https-for-github-pages&#34;&gt;Enforce HTTPS for GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s do the nitty gritty:&lt;/p&gt;
&lt;h2 id=&#34;1-buy-a-custom-domain&#34;&gt;1. Buy a custom domain&lt;/h2&gt;
&lt;p&gt;This one&amp;rsquo;s pretty simple. Head on over to &lt;a href=&#34;https://www.namecheap.com/?aff=109417&#34;&gt;Namecheap&lt;/a&gt;, &lt;a href=&#34;https://www.gandi.net&#34;&gt;Gandi&lt;/a&gt;, or if you&amp;rsquo;re rolling in dough, &lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;. Find your perfect web address and buy it up.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a &lt;a href=&#34;https://www.namecheap.com/domains/personal.aspx?aff=109417&#34;&gt;personal domain&lt;/a&gt; like &lt;em&gt;yourname.com,&lt;/em&gt; it&amp;rsquo;s a pretty good idea to pay upfront for five years or even ten years, if you&amp;rsquo;ve got the cash. It&amp;rsquo;ll save you the trouble of remembering to renew, allow you to build your personal brand, and prevent someone else from buying up your URL.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re just trying out an idea, you can go with a one-year &lt;a href=&#34;https://www.namecheap.com/promos/2016/crazy-88.aspx?aff=109417&#34;&gt;$0.88 domain&lt;/a&gt;. After the ICANN fee, it&amp;rsquo;ll cost you a whopping $1.06. Namecheap also gives you WhoisGuard (domain registration privacy) free for one year.&lt;/p&gt;
&lt;h2 id=&#34;2-install-hugo&#34;&gt;2. Install Hugo&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a big fan of &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt; so far. Admittedly, those who feel more comfortable with a visual, WYSIWYG editor may feel like a fish out of water at first. As long as you&amp;rsquo;re not afraid of using command line, though, using Hugo is pretty straightforward. The fact that I have access to all my code is my favorite part. It&amp;rsquo;s only as simple or complicated as I want it to be.&lt;/p&gt;
&lt;p&gt;Hugo is open source and free. They&amp;rsquo;ve got great documentation, and following their &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt; line-by-line will get you set up with your new site in minutes.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not used to the idea of your site existing as files and folders, the basic premise is this: Hugo, along with the themes available, helps you to create all the pages and files that your site needs to run. Blog posts can be written in Markdown and saved in your &lt;code&gt;/content/blog/&lt;/code&gt; folder; preferences for your site and theme can be set in the &lt;code&gt;config.toml&lt;/code&gt; file. After that, generating all your site&amp;rsquo;s pages is as quick and easy as typing the command &lt;code&gt;hugo --theme=&amp;lt;your theme&amp;gt;&lt;/code&gt;. You&amp;rsquo;ll be able to see a live version of your site in your browser as you&amp;rsquo;re editing it (go to &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; in your browser, as described in Step 5) so you&amp;rsquo;re not flying blind.&lt;/p&gt;
&lt;p&gt;Confused? Ask me on Twitter &lt;a href=&#34;https://twitter.com/victoriadotdev&#34;&gt;@victoriadotdev&lt;/a&gt; and I&amp;rsquo;ll help you out!&lt;/p&gt;
&lt;h2 id=&#34;3-host-with-github-pages&#34;&gt;3. Host with GitHub Pages&lt;/h2&gt;
&lt;p&gt;If you read to Step 12 of Hugo&amp;rsquo;s Quickstart Guide, you&amp;rsquo;ll see that they even provided instructions for hosting your files on GitHub pages. If you&amp;rsquo;re new to Git, you&amp;rsquo;ll first need to &lt;a href=&#34;https://github.com/&#34;&gt;sign up at GitHub&lt;/a&gt; and then &lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34;&gt;set up Git&lt;/a&gt;. GitHub is a very friendly resource, and you can find a multitude of code examples and guides in connection with it. The &lt;a href=&#34;https://guides.github.com/activities/hello-world/&#34;&gt;Hello World Guide&lt;/a&gt; will take you through all you need to know to use GitHub.com.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re comfortable with the way GitHub works generally, setting up a site by following &lt;a href=&#34;https://pages.github.com/&#34;&gt;the guide on GitHub Pages&lt;/a&gt; is no big deal. If you followed the Hugo Quickstart Guide up to Step 11, you&amp;rsquo;ll want to jump to Step 12 after creating the repository on GitHub.&lt;/p&gt;
&lt;p&gt;In case it&amp;rsquo;s not clear, once you set up your new repository on GitHub called &lt;em&gt;yourusername&lt;/em&gt;.github.io, grab the HTTPS link at the top. From there it&amp;rsquo;s just a few simple commands to create the git repository for your site and push it to your new web address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# from yoursite/public folder:&lt;/span&gt;
$ git init
$ git remote add origin &amp;lt;paste that https url here!&amp;gt;
$ git add --all
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initial commit.&amp;#34;&lt;/span&gt;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have a little celebration - your site is already up at &lt;code&gt;https://yourusername.github.io&lt;/code&gt;! Now for the pizza-de-resilience: the custom domain.&lt;/p&gt;
&lt;h2 id=&#34;4-point-your-custom-domain-to-github-pages&#34;&gt;4. Point your custom domain to GitHub Pages&lt;/h2&gt;
&lt;p&gt;To set up your site at apex (meaning &lt;code&gt;yourname.com&lt;/code&gt; will replace &lt;code&gt;yourusername.github.io&lt;/code&gt;), there&amp;rsquo;s just four steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/&#34;&gt;Add your domain to your GitHub Pages site repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In your domain registrar&amp;rsquo;s DNS settings, &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider&#34;&gt;create A records pointing to GitHub&amp;rsquo;s IP addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In your domain registrar&amp;rsquo;s DNS settings, create a CNAME record pointing to &lt;code&gt;yourusername.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure there&amp;rsquo;s a CNAME file in the root directory of your GitHub repository containing &lt;code&gt;yourname.com&lt;/code&gt; (your custom domain)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-enforce-https-for-github-pages&#34;&gt;5. Enforce HTTPS for GitHub Pages&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;May 15, 2018 edit:&lt;/em&gt; &lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;GitHub Pages now support HTTPS&lt;/a&gt; through a partnership with &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;! This is welcome news and greatly simplifies the process of serving your site securely. Just look for this clever checkbox in the Settings of your site&amp;rsquo;s GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;custom-domain-https.png#screenshot&#34; alt=&#34;Enforce HTTPS checkbox&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The below section is left here to show how far we&amp;rsquo;ve come. :)&lt;/p&gt;
&lt;h2 id=&#34;5-get-https-with-cloudflare&#34;&gt;&lt;del&gt;5. Get HTTPS with Cloudflare&lt;/del&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Why do I need a SSL certificate anyway?&lt;/em&gt; For one, it&amp;rsquo;ll &lt;a href=&#34;http://searchengineland.com/google-starts-giving-ranking-boost-secure-httpsssl-sites-199446/&#34;&gt;give your site a little boost on Google&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Sign up with Cloudflare&lt;/a&gt; and follow their set up guide. The site will collect your custom domain&amp;rsquo;s DNS settings and set everything up automagically. Once the set up is complete, Cloudflare provides you with two new nameserver addresses. Go to your domain registrar&amp;rsquo;s DNS settings and change the Domain Name Servers to the ones Cloudflare gives you.&lt;/p&gt;
&lt;p&gt;In your &lt;code&gt;config.toml&lt;/code&gt;, &lt;code&gt;config.yaml&lt;/code&gt;, or &lt;code&gt;config.json&lt;/code&gt; file, ensure these lines are present:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yourname.com/&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;canonifyURLs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;enforce_ssl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoursite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To redirect users to HTTPS, add this script to the top of your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yourname.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s pretty much it! In a couple hours or so, your site will be up and running at &lt;code&gt;https://yourname.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded><enclosure url="https://victoria.dev/blog/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/cover_free-https_hu8673880aabf7986b54167d322ecde323_1104421_640x0_resize_box_2.png" type="image/jpg"/></item><item><title>Iterations in Python: for loop, list comprehension, and map</title><link>https://victoria.dev/blog/iterations-in-python-for-loop-list-comprehension-and-map/</link><pubDate>Wed, 18 Jan 2017 21:58:28 +0700</pubDate><author>hello@victoria.dev (Victoria)</author><guid>https://victoria.dev/blog/iterations-in-python-for-loop-list-comprehension-and-map/</guid><description>An overview of writing effective iterations in Python using for loops, list comprehensions, and map.</description><content:encoded>
&lt;p&gt;I&amp;rsquo;ve been working in Python 3 for about a week, and so far greatly enjoy it. To me, learning code syntax (and programming in general) is similar to an amalgamation of Lego blocks: once it&amp;rsquo;s understood what a certain color of block does, it&amp;rsquo;s straightforward to combine them to create the structure you&amp;rsquo;re looking for.&lt;/p&gt;
&lt;p&gt;That said, some blocks can be a little confusing at first. I found documentation relating to iteration in Python to be a little hard to digest, mostly because of subtle differences in terminology: iteration, iterator, iterating, iterable&amp;hellip; it&amp;rsquo;s enough to make your eyes glaze over. I found concrete examples to be most useful in learning these concepts; this post aims to summarize what I&amp;rsquo;ve learned.&lt;/p&gt;
&lt;p&gt;There are a few different ways to achieve iterations in Python. I&amp;rsquo;ll present some of these ways in this post and discuss appropriate situations for each.&lt;/p&gt;
&lt;h1 id=&#34;for-loop&#34;&gt;For loop&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterating_var&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statements&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For loops are handy things. They&amp;rsquo;re straightforward to understand, which is especially helpful if you&amp;rsquo;re reading someone else&amp;rsquo;s code and trying to follow their thought process. They can achieve as much or as little as you need, and each operation can be clearly written out.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;iterating_var&lt;/code&gt; can be any of Python&amp;rsquo;s data types: a letter in a string, an item from a list, an index from a list, integers, etc. An &lt;code&gt;iterable&lt;/code&gt; can also take different forms: a string of word(s), a range of numbers, a list, and so on. A &lt;code&gt;statement&lt;/code&gt; or multiple &lt;code&gt;statements&lt;/code&gt; indicates &lt;em&gt;doing something:&lt;/em&gt; anything from mathematical expressions to simply printing a result. Check out the following examples, which simply print each &lt;code&gt;iterating_var&lt;/code&gt; of an &lt;code&gt;iterable&lt;/code&gt; on a new line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;breakfastmenu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toast&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;waffles&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;coffee&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;breakfastmenu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can even use a for loop in a more compact situation, such as I did in &lt;a href=&#34;https://github.com/victoriadrake/30-days-of-code/blob/master/day7_arrays.py&#34;&gt;my solution&lt;/a&gt; to HackerRank&amp;rsquo;s &lt;a href=&#34;https://www.hackerrank.com/challenges/30-arrays&#34;&gt;30 Days of Code - Day 7: Arrays&lt;/a&gt; challenge:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;arrstring&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The downside to for loops is that they can be a bit verbose, depending on how much you&amp;rsquo;re trying to achieve. Still, for anyone learning Python or hoping to make their code as easily understood as possible, for loops are still the most straightforward choice for iterations.&lt;/p&gt;
&lt;h1 id=&#34;list-comprehensions&#34;&gt;List comprehensions&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;newlist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statements&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterating_var&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my opinion, list comprehensions are the most elegant of the solutions discussed in this post. Once you have a grasp of how they work, you can perform concise and effective iterations with very little code.&lt;/p&gt;
&lt;p&gt;List comprehensions will always return a list, which may or may not be appropriate for your situation. If appropriate, however, simply defining the variable name of the list can often help you skip some steps.&lt;/p&gt;
&lt;p&gt;For example, I can use list comprehension to quickly calculate and print tip percentage on a few bar tabs at once:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tabs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;23.60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;42.10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;17.50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tabsplustips&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tabs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tabsplustips&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;27.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;48.41&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In one concise line, we&amp;rsquo;ve taken each tab amount, added 15% tip, rounded it to the nearest cent, and made a new list of the tabs plus the tip values.&lt;/p&gt;
&lt;p&gt;List comprehensions can be an elegant tool, depending on the variety of statements you want to iterate through, and whether or not output to a list is useful to you. The more statements you add, the more complicated your list comprehension begins to look, especially once you get into nested list comprehensions. If your code isn&amp;rsquo;t well annotated, it may become difficult for another reader to figure out.&lt;/p&gt;
&lt;h1 id=&#34;map&#34;&gt;Map&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Map is, in many ways, a non-idiomatic function for iteration in Python. It&amp;rsquo;s pretty compact, which can make it easy to write improperly with a missing comma or parenthesis, and it&amp;rsquo;s more limited than for loops or list comprehensions in its usage. Basically, it applies your &lt;code&gt;statement&lt;/code&gt; (in this case, your &lt;code&gt;function&lt;/code&gt;) to every instance of your defined &lt;code&gt;iterable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I used the map function in &lt;a href=&#34;https://github.com/victoriadrake/simple-statistics/blob/master/weighted_mean.py&#34;&gt;my solution&lt;/a&gt; to HackerRank&amp;rsquo;s &lt;a href=&#34;https://www.hackerrank.com/challenges/s10-weighted-mean&#34;&gt;10 Days of Statistics - Day 0: Weighted Mean&lt;/a&gt; challenge. In this example, it&amp;rsquo;s casting each element of &lt;code&gt;input()&lt;/code&gt; (the iterable) from string representation to integer representation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;weights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s worthwhile to note that map by itself returns an iterator; if it&amp;rsquo;s a list you want, it&amp;rsquo;s an extra step to get the list representation, as in the example above.&lt;/p&gt;
&lt;p&gt;In truth, I&amp;rsquo;ve had a hard time coming up with appropriate situations for the use of map over simply using a list comprehension. Aside from situations similar to the above, it seems to me to be a rather un-Pythonic way to iterate. It can be advantageous as a concise method of doing simple, sort of &amp;lsquo;on-the-spot&amp;rsquo; iterations; otherwise, my preference would be to use a list comprehension instead.&lt;/p&gt;
&lt;p&gt;I hope these examples have been useful to you in your understanding of iterations with Python 3. Thanks for reading!&lt;/p&gt;</content:encoded></item></channel></rss>