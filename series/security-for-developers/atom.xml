<feed xmlns="http://www.w3.org/2005/Atom"><title>Security for Developers on victoria.dev</title><link href="https://victoria.dev/series/security-for-developers/feed.xml" rel="self"/><link href="https://victoria.dev/series/security-for-developers/"/><id>https://victoria.dev/series/security-for-developers/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">WPA Key, WPA2, WPA3, and WEP Key: Wi-Fi security explained</title><link href="https://victoria.dev/blog/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/"/><id>https://victoria.dev/blog/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/</id><author><name>Victoria Drake</name></author><published>2020-10-19T04:02:27-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Setting up new Wi-Fi? Picking the type of password you need can seem like an arbitrary choice. After all, WEP, WPA, WPA2, and WPA3 all have mostly the same letters in them. A password is a password, so what&rsquo;s the difference?</p>
<p>About 60 seconds to billions of years, as it turns out.</p>
<p>All Wi-Fi encryption is not created equal. Let&rsquo;s explore what makes these four acronyms so different, and how you can best protect your home and organization Wi-Fi.</p>
<h2 id="wired-equivalent-privacy-wep">Wired Equivalent Privacy (WEP)</h2>
<p>In the beginning, there was WEP.</p>
<figure><img src="wep.png"
         alt="cartoon of WEP letters"/><figcaption>
            <p>Not to be confused with the name of a certain rap song.</p>
        </figcaption>
</figure>
<p><a href="https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy">Wired Equivalent Privacy</a> is a deprecated security algorithm from 1997 that was intended to provide equivalent security to a wired connection. &ldquo;Deprecated&rdquo; means, &ldquo;Let&rsquo;s not do that anymore.&rdquo;</p>
<p>Even when it was first introduced, it was known not to be as strong as it could have been, for two reasons: one, its underlying encryption mechanism; and two, World War II.</p>
<p>During World War II, the impact of code breaking (or cryptanalysis) was <a href="https://en.wikipedia.org/wiki/History_of_cryptography#World_War_II_cryptography">huge</a>. Governments reacted by attempting to keep their best secret-sauce recipes at home. Around the time of WEP, <a href="https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States">U.S. Government restrictions on the export of cryptographic technology</a> caused access point manufacturers to limit their devices to 64-bit encryption. Though this was later lifted to 128-bit, even this form of encryption offered a very limited possible <a href="https://en.wikipedia.org/wiki/Key_size">key size</a>.</p>
<p>This proved problematic for WEP. The small key size resulted in being easier to <a href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force</a>, especially when that key doesn&rsquo;t often change.</p>
<p>WEP&rsquo;s underlying encryption mechanism is the <a href="https://en.wikipedia.org/wiki/RC4">RC4 stream cipher</a>. This cipher gained popularity due to its speed and simplicity, but that came at a cost. It&rsquo;s not the most robust algorithm. WEP employs a single shared key among its users that must be manually entered on an access point device. (When&rsquo;s the last time you changed your Wi-Fi password? Right.) WEP didn&rsquo;t help matters either by simply concatenating the key with the initialization vector &ndash; which is to say, it sort of mashed its secret-sauce bits together and hoped for the best.</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Initialization_vector">Initialization Vector (IV)</a>: fixed-size input to a <a href="https://en.wikipedia.org/wiki/Cryptographic_primitive">low-level cryptographic algorithm</a>, usually random.</p>
</blockquote>
<p>Combined with the use of RC4, this left WEP particularly susceptible to <a href="https://en.wikipedia.org/wiki/Related-key_attack">related-key attack</a>. In the case of 128-bit WEP, your Wi-Fi password can be cracked by publicly-available tools in a matter of around <a href="https://shawnhogan.com/2006/08/how-to-crack-128-bit-wireless-networks.html">60 seconds</a> to <a href="https://www.networkcomputing.com/wireless-infrastructure/fbi-teaches-lesson-how-break-wi-fi-networks">three minutes</a>.</p>
<p>While some devices came to offer 152-bit or 256-bit WEP variants, this failed to solve the fundamental problems of WEP&rsquo;s underlying encryption mechanism.</p>
<p>So, yeah. Let&rsquo;s not do that anymore.</p>
<h2 id="wi-fi-protected-access-wpa">Wi-Fi Protected Access (WPA)</h2>
<p><img src="wpa.png" alt="WPA illustration"></p>
<p>A new, interim standard sought to temporarily &ldquo;patch&rdquo; the problem of WEP&rsquo;s (lack of) security. The name <a href="https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access">Wi-Fi Protected Access (WPA)</a> certainly <em>sounds</em> more secure, so that&rsquo;s a good start; however, WPA first started out with another, more descriptive name.</p>
<p>Ratified in a <a href="https://en.wikipedia.org/wiki/IEEE_802.11i-2004">2004 IEEE standard</a>, <a href="https://en.wikipedia.org/wiki/Temporal_Key_Integrity_Protocol#Beck-Tews_attack">Temporal Key Integrity Protocol (TKIP)</a> uses a dynamically-generated, per-packet key. Each packet sent has a unique temporal 128-bit key, (See? Descriptive!) that solves the susceptibility to related-key attacks brought on by WEP&rsquo;s shared key mashing.</p>
<p>TKIP also implements other measures, such as a <a href="https://en.wikipedia.org/wiki/Message_authentication_code">message authentication code (MAC)</a>. Sometimes known as a checksum, a MAC provides a cryptographic way to verify that messages haven&rsquo;t been changed. In TKIP, an invalid MAC can also trigger rekeying of the session key. If the access point receives an invalid MAC twice within a minute, the attempted intrusion can be countered by changing the key an attacker is trying to crack.</p>
<p>Unfortunately, in order to preserve compatibility with the existing hardware that WPA was meant to &ldquo;patch,&rdquo; TKIP retained the use of the same underlying encryption mechanism as WEP &ndash; the RC4 stream cipher. While it certainly improved on the weaknesses of WEP, TKIP eventually proved vulnerable to new attacks that <a href="https://en.wikipedia.org/wiki/Temporal_Key_Integrity_Protocol#Security">extended previous attacks on WEP</a>. These attacks take a little longer to execute by comparison: for example, <a href="http://dl.aircrack-ng.org/breakingwepandwpa.pdf">twelve minutes</a> in the case of one, and <a href="https://www.rc4nomore.com/">52 hours</a> in another. This is more than sufficient, however, to deem TKIP no longer secure.</p>
<p>WPA, or TKIP, has since been deprecated as well. So let&rsquo;s also not do that anymore.</p>
<p>Which brings us to&hellip;</p>
<h2 id="wi-fi-protected-access-ii-wpa2">Wi-Fi Protected Access II (WPA2)</h2>
<p><img src="wpa2.png" alt="WPA2 illustration"></p>
<p>Rather than spend the effort to come up with an entirely new name, the improved <a href="https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#WPA2">Wi-Fi Protected Access II (WPA2)</a> standard instead focuses on using a new underlying cipher. Instead of the RC4 stream cipher, WPA2 employs a block cipher called <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a> to form the basis of its encryption protocol. The protocol itself, abbreviated <a href="https://en.wikipedia.org/wiki/CCMP_(cryptography)">CCMP</a>, draws most of its security from the length of its rather long name (I&rsquo;m kidding): Counter Mode Cipher Block Chaining Message Authentication Code Protocol, which shortens to Counter Mode CBC-MAC Protocol, or CCM mode Protocol, or CCMP. 🤷</p>
<p><a href="https://en.wikipedia.org/wiki/CCM_mode">CCM mode</a> is essentially a combination of a few good ideas. It provides data confidentiality through <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29">CTR mode, or counter mode</a>. To vastly oversimplify, this adds complexity to plaintext data by encrypting the successive values of a count sequence that does not repeat. CCM also integrates <a href="https://en.wikipedia.org/wiki/CBC-MAC">CBC-MAC</a>, a block cipher method for constructing a MAC.</p>
<p>AES itself is on good footing. The AES specification was established in 2001 by the U.S. National Institute of Standards and Technology (NIST) after a five-year competitive selection process during which fifteen proposals for algorithm designs were evaluated. As a result of this process, a family of ciphers called Rijndael (Dutch) was selected, and a subset of these became AES. For the better part of two decades, AES has been used to protect every-day Internet traffic as well as <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Security">certain levels of classified information in the U.S. Government</a>.</p>
<p>While <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Known_attacks">possible attacks on AES</a> have been described, none have yet been proven to be practical in real-world use. The fastest <a href="https://web.archive.org/web/20141230025103/http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf">attack on AES</a> in public knowledge is a <a href="https://en.wikipedia.org/wiki/Key-recovery_attack">key-recovery attack</a> that improved on brute-forcing AES by a factor of about four. How long would it take? Some <a href="https://web.archive.org/web/20150108165723/https://blog.agilebits.com/2011/08/18/aes-encryption-isnt-cracked/">billions of years</a>.</p>
<h2 id="wi-fi-protected-access-iii-wpa3">Wi-Fi Protected Access III (WPA3)</h2>
<p><img src="wpa3.png" alt="WPA3 illustration"></p>
<p>The next installment of the WPA trilogy has been <a href="https://www.wi-fi.org/download.php?file=/sites/default/files/private/Certification_Overview_v5.2_0.pdf">required for new devices</a> since July 1, 2020. Expected to further enhance the security of WPA2, the <a href="https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-introduces-wi-fi-certified-wpa3-security">WPA3 standard</a> seeks to improve password security by being more resilient to word list or <a href="https://en.wikipedia.org/wiki/Dictionary_attack">dictionary attacks</a>.</p>
<p>Unlike its predecessors, WPA3 will also offer <a href="https://en.wikipedia.org/wiki/Forward_secrecy">forward secrecy</a>. This adds the considerable benefit of protecting previously exchanged information even if a long-term secret key is compromised. Forward secrecy is already provided by protocols like TLS by using asymmetric keys to establish shared keys. You can learn <a href="/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/">more about TLS in this post</a>.</p>
<p>As WPA2 has not been deprecated, both WPA2 and WPA3 remain your top choices for Wi-Fi security.</p>
<h2 id="if-the-other-ones-suck-why-are-they-still-around">If the other ones suck, why are they still around?</h2>
<p>You may be wondering why your access point even allows you to choose an option other than WPA2 or WPA3. The likely reason is that you&rsquo;re using legacy hardware, which is what tech people call your mom&rsquo;s router.</p>
<p>Since the deprecation of WEP and WPA occurred (in old-people terms) rather recently, it&rsquo;s possible in large organizations as well as your parent&rsquo;s house to find older hardware that still uses these protocols. Even newer hardware may have a business need to support these older protocols.</p>
<p>While I may be able to convince you to invest in a shiny new top-of-the-line Wi-Fi appliance, most organizations are a different story. Unfortunately, many just aren&rsquo;t yet cognizant of the important role cybersecurity plays in meeting customer needs and boosting that bottom line. Additionally, switching to newer protocols may require new internal hardware or firmware upgrades. Especially on complex systems in large organizations, upgrading devices can be financially or strategically difficult.</p>
<h2 id="boost-your-wi-fi-security">Boost your Wi-Fi security</h2>
<p>If it&rsquo;s an option, choose WPA2 or WPA3. Cybersecurity is a field that evolves by the day, and getting stuck in the past can have dire consequences.</p>
<p>If you can&rsquo;t use WPA2 or WPA3, do the best you can to take additional security measures. The best bang for your buck is to use a Virtual Private Network (VPN). Using a VPN is a good idea no matter which type of Wi-Fi encryption you have. On open Wi-Fi (coffee shops) and using WEP, it&rsquo;s plain irresponsible to go without a VPN. Kind of like shouting out your bank details as you order your second cappuccino.</p>
<figure><img src="cafewifi.png"
         alt="A cartoon of shouting out your bank details at a coffeeshop."/>
</figure>
<p>Choose a VPN provider that offers a feature like <a href="https://www.xvinlink.com/features/network-lock?a_fid=victoria&data1=www">ExpressVPN's Network Lock</a> with automatic connection. This is a kill switch that blocks your network traffic if your VPN becomes disconnected, preventing you from accidentally transmitting information on an insecure connection like open Wi-Fi or WEP. I personally use ExpressVPN. Their auto-connect feature works well on Linux, and I never worry about remembering to start it up first. I wrote more about <a href="/blog/vpn">choosing a VPN in this post</a>.</p>
<p>When possible, ensure you only connect to known networks that you or your organization control. Many cybersecurity attacks are executed when victims connect to an imitation public Wi-Fi access point, also called an evil twin attack, or Wi-Fi phishing. These fake hotspots are easily created using publicly accessible programs and tools. A VPN can help mitigate damage from these attacks as well, but it&rsquo;s always better not to take the risk. If you travel often, consider purchasing a portable hotspot that uses a cellular data plan, or using data SIM cards for all your devices.</p>
<h2 id="much-more-than-just-acronyms">Much more than just acronyms</h2>
<p>WEP, WPA, WPA2, and WPA3 mean a lot more than a bunch of similar letters &ndash; in some cases, it&rsquo;s a difference of billions of years minus about 60 seconds.</p>
<p>On more of a now-ish timescale, I hope I&rsquo;ve taught you something new about the security of your Wi-Fi and how you can improve it!</p>
<p>If you&rsquo;d like to thank me, you can <a href="https://www.xvinlink.com/?a_fid=victoria&data1=www">protect yourself with ExpressVPN</a> with my referral. I only refer products I use personally, and this one is solid.</p>
<p>Know someone who&rsquo;d benefit from some beefed up cybersecurity? Share the <a href="/blog/your-cybersecurity-starter-pack/">cybersecurity starter pack</a>!</p>
]]></content></entry><entry><title type="html">What is TLS? Transport Layer Security encryption explained in plain english</title><link href="https://victoria.dev/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/"/><id>https://victoria.dev/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/</id><author><name>Victoria Drake</name></author><published>2020-09-05T04:48:39-06:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>If you want to have a confidential conversation with someone you know, you might meet up in person and find a private place to talk. If you want to send data confidentially over the Internet, you might have a few more considerations to cover.</p>
<p>TLS, or Transport Layer Security, refers to a protocol. &ldquo;Protocol&rdquo; is a word that means, &ldquo;the way we&rsquo;ve agreed to do things around here,&rdquo; more or less. The &ldquo;transport layer&rdquo; part of TLS simply refers to host-to-host communication, such as how a client and a server interact, in the <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">Internet protocol suite model</a>.</p>
<p>The TLS protocol attempts to solve these fundamental problems:</p>
<ul>
<li>How do I know you are who you say you are?</li>
<li>How do I know this message from you hasn&rsquo;t been tampered with?</li>
<li>How can we communicate securely?</li>
</ul>
<p>Here&rsquo;s how TLS works, explained in plain English. As with many successful interactions, it begins with a handshake.</p>
<h2 id="getting-to-know-you">Getting to know you</h2>
<p>The basic process of a <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake">TLS handshake</a> involves a client, such as your web browser, and a server, such as one hosting a website, establishing some ground rules for communication. It begins with the client saying hello. Literally. It&rsquo;s called a <em>ClientHello</em> message.</p>
<p>The <em>ClientHello</em> message tells the server which TLS protocol version and <em>cipher suites</em> it supports. While &ldquo;cipher suite&rdquo; sounds like a fancy hotel upgrade, it just refers to a set of algorithms that can be used to secure communications. The server, in a similarly named <em>ServerHello</em> message, chooses the protocol version and cipher suite to use from the choices offered. Other data may also be sent, for example, a <em>session ID</em> if the server supports resuming a previous handshake.</p>
<p><img src="hello-hello.png" alt="A cartoon of a client and server saying hello"></p>
<p>Depending on the cipher suite chosen, the client and server exchange further information in order to establish a shared secret. Often, this process moves the exchange from <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">asymmetric cryptography</a> to <a href="https://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric cryptography</a> with varying levels of complexity. Let&rsquo;s explore these concepts at a general level and see why they matter to TLS.</p>
<h2 id="asymmetric-beginnings">Asymmetric beginnings</h2>
<p>This is asymmetry:</p>
<figure><img src="asymmetry-eggs.jpeg"
         alt="A small egg and a big egg"/><figcaption>
            <p>Small egg, big egg.</p>
        </figcaption>
</figure>

<p>Asymmetric cryptography is one method by which you can perform <em>authentication</em>. When you authenticate yourself, you answer the fundamental question, &ldquo;How do I know you are who you say you are?&rdquo;</p>
<p>In an asymmetric cryptographic system, you use a pair of keys in order to achieve authentication. These keys are asymmetric. One key is your public key, which, as you would guess, is public. The other is your private key, which &ndash; well, you know.</p>
<p>Typically, during the TLS handshake, the server will provide its public key via its digital certificate, sometimes still called its <em>SSL certificate</em>, though TLS replaces the deprecated Secure Sockets Layer (SSL) protocol. Digital certificates are provided and verified by trusted third parties known as <a href="https://en.wikipedia.org/wiki/Certificate_authority">Certificate Authorities (CA)</a>, which are a whole other article in themselves.</p>
<p>While anyone may encrypt a message using your public key, only your private key can then decrypt that message. The security of asymmetric cryptography relies only on your private key staying private, hence the asymmetry. It&rsquo;s also asymmetric in the sense that it&rsquo;s a one-way trip. Alice can send messages encrypted with your public key to you, but neither of your keys will help you send an encrypted message to Alice.</p>
<h2 id="symmetric-secrets">Symmetric secrets</h2>
<p>Asymmetric cryptography also requires more computational resources than symmetric cryptography. Thus when a TLS handshake begins with an asymmetric exchange, the client and server will use this initial communication to establish a shared secret, sometimes called a <em>session key</em>. This key is symmetric, meaning that both parties use the same shared secret and must maintain that secrecy for the encryption to be secure.</p>
<figure><img src="asym-vs-sym.png"
         alt="A cartoon of public-key cryptography vs. shared-key cryptography"/><figcaption>
            <p>Wise man say: share your public key, but keep your shared keys private.</p>
        </figcaption>
</figure>

<p>By using the initial asymmetric communication to establish a session key, the client and server can rely on the session key being known only to them. For the rest of the session, they&rsquo;ll both use this same shared key to encrypt and decrypt messages, which speeds up communication.</p>
<h2 id="secure-sessions">Secure sessions</h2>
<p>A TLS handshake may use asymmetric cryptography or other cipher suites to establish the shared session key. Once the session key is established, the handshaking portion is complete and the session begins.</p>
<p>The <em>session</em> is the duration of encrypted communication between the client and server. During this time, messages are encrypted and decrypted using the session key that only the client and server have. This ensures that communication is secure.</p>
<p>The integrity of exchanged information is maintained by using a checksum. Messages exchanged using session keys have a <a href="https://en.wikipedia.org/wiki/Message_authentication_code">message authentication code (MAC)</a> attached. This is not the same thing as your device&rsquo;s <a href="https://en.wikipedia.org/wiki/MAC_address">MAC address</a>. The MAC is generated and verified using the session key. Because of this, either party can detect if a message has been changed before being received. This solves the fundamental question, &ldquo;How do I know this message from you hasn&rsquo;t been tampered with?&rdquo;</p>
<p>Sessions can end deliberately, due to network disconnection, or from the client staying idle for too long. Once a session ends, it must be re-established via a new handshake or through previously established secrets called <em>session IDs</em> that allow resuming a session.</p>
<h2 id="tls-and-you">TLS and you</h2>
<p>Let&rsquo;s recap:</p>
<ul>
<li>TLS is a cryptographic protocol for providing secure communication.</li>
<li>The process of creating a secure connection begins with a handshake.</li>
<li>The handshake establishes a shared session key that is then used to secure messages and provide message integrity.</li>
<li>Sessions are temporary, and once ended, must be re-established or resumed.</li>
</ul>
<p>This is just a surface-level skim of the very complex cryptographic systems that help to keep your communications secure. For more depth on the topic, I recommend exploring cipher suites and the various <a href="https://en.wikipedia.org/wiki/Cipher_suite#Supported_algorithms">supported algorithms</a>.</p>
<p>The TLS protocol serves a very important purpose in your everyday life. It helps to secure your emails to family, your online banking activities, and the connection by which you&rsquo;re reading this article. The <a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS communication protocol</a> is encrypted using TLS. Every time you see that little lock icon in your URL bar, you&rsquo;re experiencing firsthand all the concepts you&rsquo;ve just read about in this article. Now you know the answer to the last question: &ldquo;How can we communicate securely?&rdquo;</p>
]]></content></entry><entry><title type="html">How to choose and care for a secure open source project</title><link href="https://victoria.dev/blog/how-to-choose-and-care-for-a-secure-open-source-project/"/><id>https://victoria.dev/blog/how-to-choose-and-care-for-a-secure-open-source-project/</id><author><name>Victoria Drake</name></author><published>2020-05-25T05:53:09-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>There is a rather progressive sect of the software development world that believes that most people would be a lot happier and get a lot more work done if they just stopped building things that someone else has already built and is offering up for free use. They&rsquo;re called the open source community. They want you to take their stuff.</p>
<p><img src="wheels.png" alt="A comic I drew about using other people&rsquo;s stuff, with the wheel as an example."></p>
<p>Besides existing without you having to lift a finger, open source tools and software have some distinct advantages. Especially in the case of well-established projects, it&rsquo;s highly likely that someone else has already worked out all the most annoying bugs for you. Thanks to the ease with which users can view and modify source code, it&rsquo;s also more likely that a program has been tinkered with, improved, and secured over time. When many developers contribute, they bring their own unique expertise and experiences. This can result in a product far more robust and capable than one a single developer can produce.</p>
<p>Of course, being as varied as the people who build them, not all open source projects are created equal, nor maintained to be equally secure. There are many factors that affect a project&rsquo;s suitability for your use case. Here are a few general considerations that make a good starting point when choosing an open source project.</p>
<h2 id="how-to-choose-an-open-source-project">How to choose an open source project</h2>
<p>As its most basic requirements, a good software project is reliable, easy to understand, and has up-to-date components and security. There are several indicators that can help you make an educated guess about whether an open source project satisfies these criteria.</p>
<h3 id="whos-using-it">Who&rsquo;s using it</h3>
<p>Taken in context, the number of people already using an open source project may be indicative of how good it is. If a project has a hundred users, for instance, it stands to reason that someone has tried to use it at least a hundred times before you found it. Thus by the ancient customs of &ldquo;I don&rsquo;t know what&rsquo;s in that cave, you go first,&rdquo; it&rsquo;s more likely to be fine.</p>
<p>You can draw conclusions about a project&rsquo;s user base by looking at available statistics. Depending on your platform, these may include the number of downloads, reviews, issues or tickets, comments, contributions, forks, or &ldquo;stars,&rdquo; whatever those are.</p>
<p>Evaluate social statistics on platforms like GitHub with a grain of salt. They can help you determine how popular a project may be, but only in the same way that restaurant review apps can help you figure out if you should eat at Foo&rsquo;s Grill &amp; Bar. Depending on where Foo&rsquo;s Grill &amp; Bar is, when it opened, and how likely people are to be near it when the invariable steak craving should call, having twenty-six reviews may be a good sign or a terrible one. While you would not expect a project that addresses a very obscure use case or technology to have hundreds of users, having a few active users is, in such a case, just as confidence-inspiring.</p>
<p>External validation can also be useful. For example, packages that are included in a Linux operating system distribution (distro) must conform to stringent standards and undergo vetting. Choosing software that is included in a distro&rsquo;s default repositories can mean it&rsquo;s more likely to be secure.</p>
<p>Perhaps one of the best indications to look for is whether a project&rsquo;s development team is using their own project. Look for issues, discussions, or blog posts that show that the project&rsquo;s creators and maintainers are using what they&rsquo;ve built themselves. Commonly referred to as <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">&ldquo;eating your own dog food,&quot;</a> or &ldquo;dogfooding,&rdquo; it&rsquo;s an indicator that the project is most likely to be well-maintained by its developers.</p>
<h3 id="whos-building-it">Who&rsquo;s building it</h3>
<p>The main enemy of good open source software is usually a lack of interest. The parties involved in an open source project can make the difference between a flash-in-the-pan library and a respected long-term utility. Multiple committed maintainers, even making contributions in their spare time, have a much higher success rate of sustaining a project and generating interest.</p>
<p>Projects with healthy interest are usually supported by, and in turn cultivate, a community of contributors and users. New contributors may be actively welcomed, clear guides are available explaining how to help, and project maintainers are available and approachable when people have inevitable questions. Some communities even have chat rooms or forums where people can interact outside of contributions. Active communities help sustain project interest, relevance, and its ensuing quality.</p>
<p>In a less organic fashion, a project can also be sustained through organizations that sponsor it. Governments and companies with financial interest are open source patrons too, and a project that enjoys public sector use or financial backing has added incentive to remain relevant and useful.</p>
<h3 id="how-alive-is-it">How alive is it</h3>
<p>The recency and frequency of an open source project&rsquo;s activity is perhaps the best indicator of how much attention is likely paid to its security. Look at releases, commit history, changelogs, or documentation revisions to determine if a project is active. As projects vary in size and scope, here are some general things to look for.</p>
<p>Maintaining security is an ongoing endeavor that requires regular monitoring and updates, especially for projects with third-party components. These may be libraries or any part of the project that relies on something outside itself, such as a payment gateway integration. An inactive project is more likely to have outdated code or use outdated versions of components. For a more concrete determination, you can research a project&rsquo;s third-party components and compare their most recent patches or updates with the project&rsquo;s last updates.</p>
<p>Projects without third-party components may have no outside updates to apply. In these cases, you can use recent activity and release notes to determine how committed a project&rsquo;s maintainers may be. Generally, active projects should show updates within the last months, with a notable release within the last year. This can be a good indication of whether the project is using an up-to-date version of its language or framework.</p>
<p>You can also judge how active a project may be by looking at the project maintainers themselves. Active maintainers quickly respond to feedback or new issues, even if it&rsquo;s just to say, &ldquo;We&rsquo;re on it.&rdquo; If the project has a community, its maintainers are a part of it. They may have a dedicated website or write regular blogs. They may offer ways to contact them directly and privately, especially to raise security concerns.</p>
<h3 id="can-you-understand-it">Can you understand it</h3>
<p>Having documentation is a baseline requirement for a project that&rsquo;s intended for anyone but its creator to use. Good open source projects have documentation that is easy to follow, honest, and thorough.</p>
<p>Having <a href="/blog/word-bugs-in-software-documentation-and-how-to-fix-them/">well-written documentation</a> is one way a project can stand out and demonstrate the thoughtfulness and dedication of its maintainers. A &ldquo;Getting Started&rdquo; section may detail all the requirements and initial set up for running the project. An accurate list of topics in the documentation enables users to quickly find the information they need. A clear license statement leaves no doubt as to how the project can be used, and for what purposes. These are characteristic aspects of documentation that serves its users.</p>
<p>A project that is following sound coding practices likely has code that is as readable as its documentation. Code that is easy to read lends itself to being understood. Generally, it has clearly defined and appropriately-named functions and variables, a logical flow, and apparent purpose. Readable code is easier to fix, secure, and build upon.</p>
<h3 id="how-compatible-is-it">How compatible is it</h3>
<p>A few factors will determine how compatible a project is with your goals. These are objective qualities, and can be determined by looking at a project&rsquo;s repository files. They include:</p>
<ul>
<li>Code language</li>
<li>Specific technologies or frameworks</li>
<li>License compatibility</li>
</ul>
<p>Compatibility doesn&rsquo;t necessarily mean a direct match. Different code languages can interact with each other, as can various technologies and frameworks. You should carefully read a project&rsquo;s license to understand if it permits usage for your goal, or if it is compatible with a license you would like to use.</p>
<p>Ultimately, a project that satisfies all these criteria may still not quite suit your use case. Part of the beauty of open source software, however, is that you may still benefit from it by making alterations that better suit your usage. If those alterations make the project better for everyone, you can pay it back and pay it forward by contributing your work to the project.</p>
<h2 id="proper-care-and-feeding-of-an-open-source-project">Proper care and feeding of an open source project</h2>
<p>Once you adopt an open source project, a little attention is required to make sure it continues to be a boon to your goals. While its maintainers will look after the upstream project files, you alone are responsible for your own copy. Like all software, your open source project must be well-maintained in order to remain as secure and useful as possible.</p>
<p>Have a system that provides you with notifications when updates for your software are made available. Update software promptly, treating each patch as if it were vital to security; it may well be. Keep in mind that open source project creators and maintainers are, in most cases, acting only out of the goodness of their own hearts. If you&rsquo;ve got a particularly awesome one, its developers may make updates and security patches available on a regular basis. It&rsquo;s up to you to keep tabs on updates and promptly apply them.</p>
<p>As with most things in software, keeping your open source additions modular can come in handy. You might use <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodules</a>, branches, or environments to isolate your additions. This can make it easier to apply updates or pinpoint the source of any bugs that arise.</p>
<p>So although an open source project may cost no money, <em>caveat emptor,</em> which means, &ldquo;Jimmy, if we get you a puppy, it&rsquo;s your responsibility to take care of it.&rdquo;</p>
]]></content></entry><entry><title type="html">If you want to build a treehouse, start at the bottom</title><link href="https://victoria.dev/blog/if-you-want-to-build-a-treehouse-start-at-the-bottom/"/><id>https://victoria.dev/blog/if-you-want-to-build-a-treehouse-start-at-the-bottom/</id><author><name>Victoria Drake</name></author><published>2020-05-11T05:46:47-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>If you&rsquo;ve ever watched a kid draw a treehouse, you have some idea of how applications are built when security isn&rsquo;t made a priority. It&rsquo;s far more fun to draw the tire swing, front porch, and swimming pool than to worry about how a ten-thousand-gallon bucket of water stays suspended in midair. With too much attention spent on fun and flashy features, foundations suffer.</p>
<p><img src="for-the-turrets.png" alt="A comic I drew about building castles with poor foundations. It&rsquo;s not that funny."></p>
<p>Of course, spending undue hours building a back end like Fort Knox may not be necessary for your application, either. Being an advocate for security doesn&rsquo;t mean always wearing your tinfoil hat (although you do look dashing in it) but does mean building in an appropriate amount of security.</p>
<p>How much security is appropriate? The answer, frustratingly, is, &ldquo;it depends.&rdquo; The right amount of security for your application depends on who&rsquo;s using it, what it does, and most importantly, what undesirable things it could be made to do. It takes some analysis to make decisions about the kinds of risks your application faces and how you&rsquo;ll prepare to handle them. Okay, now&rsquo;s a good time to don your tinfoil hat. Let&rsquo;s imagine the worst.</p>
<h2 id="threat-modeling-whats-the-worst-that-could-happen">Threat modeling: what&rsquo;s the worst that could happen</h2>
<p>A <em>threat model</em> is a stuffy term for the result of trying to imagine the worst things that could happen to an application. Using your imagination to assess risks (fittingly called <em>risk assessment</em>) is a conveniently non-destructive method for finding ways an application can be attacked. You won&rsquo;t need any tools; just an understanding of how the application might work, and a little imagination. You&rsquo;ll want to record your results with pen and paper. For the younger folks, that means the notes app on your phone.</p>
<p>A few different methodologies for application risk assessment can be found in the software world, including the in-depth <a href="https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final">NIST Special Publication 800-30</a>. Each method&rsquo;s framework has specific steps and output, and will go into various levels of detail when it comes to defining threats. If following a framework, first choose the one you&rsquo;re most likely to complete. You can always add more depth and detail from there.</p>
<p>Even informal risk assessments are beneficial. Typically taking the form of a set of questions, they may be oriented around possible threats, the impact to assets, or ways a vulnerability could be exploited. Here are some examples of questions addressing each orientation:</p>
<ul>
<li>What kind of adversary would want to break my app? What would they be after?</li>
<li>If the control of <em>x</em> fell into the wrong hands, what could an attacker do with it?</li>
<li>Where could a <em>x</em> vulnerability occur in my app?</li>
</ul>
<p>A basic threat model explains the technical, business, and human considerations for each risk. It will typically detail:</p>
<ul>
<li>The vulnerabilities or components that can cause the risk</li>
<li>The impact that a successful execution of the risk would have on the application</li>
<li>The consequences for the application&rsquo;s users or organization</li>
</ul>
<p>The result of a risk assessment exercise is your threat model; in other words, a list of things you would very much like not to occur. It is usually sorted in a hierarchy of risks, from the worst to the mildest. The worst risks have the most negative impact, and are most important to protect against. The mildest risks are the most acceptable - while still an undesirable outcome, they have the least negative impact on the application and users.</p>
<p>You can use this resulting hierarchy as a guide to determine how much of your cybersecurity efforts to apply to each risk area. An appropriate amount of security for your application will eliminate (where possible) or mitigate the worst risks.</p>
<h2 id="pushing-left">Pushing left</h2>
<p>Although it sounds like a dance move meme, <em>pushing left</em> refers instead to building in as much of your planned security as possible in the early stages of software development.</p>
<p>Building software is a lot like building a treehouse, just without the pleasant fresh air. You start with the basic supporting components, such as attaching a platform to a tree. Then comes the framing, walls, and roof, and finally, your rustic-modern Instagram-worthy wall hangings and deer bust.</p>
<p>The further along in the build process you are, the harder and more costly it becomes to make changes to a component that you&rsquo;ve already installed. If you discover a problem with the walls only after the roof is put in place, you may need to change or remove the roof in order to fix it. Similar parallels can be drawn for software components, only without similar ease in detangling the attached parts.</p>
<p>In the case of a treehouse, it&rsquo;s rather impossible to start with decorations or even a roof, since you can&rsquo;t really suspend them in midair. In the case of software development, it is, unfortunately, possible to build many top-layer components and abstractions without a sufficient supporting architecture. A push-left approach views each additional layer as adding cost and complication. Pushing left means attempting to mitigate security risks as much as possible at each development stage before proceeding to the next.</p>
<h2 id="building-bottom-to-top">Building bottom-to-top</h2>
<p>By considering your threat model in the early stages of developing your application, you reduce the chances of necessitating a costly remodel later on. You can make choices about architecture, components, and code that support the main security goals of your particular application.</p>
<p>While it&rsquo;s not possible to foresee all the functionality your application may one day need to support, it is possible to prepare a solid foundation that allows additional functionality to be added more securely. Building in appropriate security from the bottom to the top will help make mitigating security risks much easier in the future.</p>
]]></content></entry><entry><title type="html">Secure web forms for the front-end developer</title><link href="https://victoria.dev/blog/secure-web-forms-for-the-front-end-developer/"/><id>https://victoria.dev/blog/secure-web-forms-for-the-front-end-developer/</id><author><name>Victoria Drake</name></author><published>2019-12-11T08:27:31-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>While cybersecurity is often thought of in terms of databases and architecture, much of a strong security posture relies on elements in the domain of the front-end developer. For certain potentially devastating vulnerabilities like <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection">SQL injection</a> and <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">Cross-Site Scripting (XSS)</a>, a well-considered user interface is the first line of defense.</p>
<p>Here are a few areas of focus for front-end developers who want to help fight the good fight.</p>
<h2 id="control-user-input">Control user input</h2>
<p>A whole whack of <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">crazy things</a> can happen when developers build a form that fails to control user input. To combat vulnerabilities like injection, it&rsquo;s important to validate or sanitize user input.</p>
<p>Input can be validated by constraining it to known values, such as by using <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Semantic_input_types">semantic input types</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes">validation-related attributes</a> in forms. Frameworks like <a href="https://www.djangoproject.com/">Django</a> also help by providing <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types">field types</a> for this purpose. Sanitizing data can be done by removing or replacing contextually-dangerous characters, such as by using a whitelist or escaping the input data.</p>
<p>While it may not be intuitive, even data that a user submits to their own area on a site should be validated. One of the fastest viruses to proliferate was the <a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)">Samy worm</a> on MySpace (yes, I&rsquo;m old), thanks to code that Samy Kamkar was able to inject into his own profile page. Don&rsquo;t directly return any input to your site without thorough validation or santization.</p>
<p>For some further guidance on battling injection attacks, see the <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Injection_Prevention_Cheat_Sheet.md">OWASP Injection Prevention Cheat Sheet</a>.</p>
<h2 id="beware-hidden-fields">Beware hidden fields</h2>
<p>Adding <code>type=&quot;hidden&quot;</code> is an enticingly convenient way to hide sensitive data in pages and forms, but unfortunately not an effective one. With tools like <a href="https://www.zaproxy.org/">ZapProxy</a> and even inspection tools in plain ol' web browsers, users can easily click to reveal tasty bits of invisible information. Hiding checkboxes can be a neat hack for creating CSS-only switches, but hidden fields do little to contribute to security.</p>
<h2 id="carefully-consider-autofill-fields">Carefully consider autofill fields</h2>
<p>When a user chooses to give you their <a href="https://en.wikipedia.org/wiki/Personal_data">Personally Identifiable Information</a> (PII), it should be a conscious choice. Autofill form fields can be convenient - for both users and attackers. <a href="https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/">Exploits using hidden fields can harvest PII</a> previously captured by an autocomplete field.</p>
<p>Many users aren&rsquo;t even aware what information their browser&rsquo;s autofill has stored up. Use these fields sparingly, and disable autofilled forms for particularly sensitive data.</p>
<p>It&rsquo;s important to also weigh your risk profile against its trade-offs. If your project must be <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</a> compliant, disabling autocomplete can break your input for different modalities. For more, see <a href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html">1.3.5: Identify Input Purpose in WCAG 2.1</a>.</p>
<h2 id="keep-errors-generic">Keep errors generic</h2>
<p>While it may seem helpful to let users know whether a piece of data exists, it&rsquo;s also very helpful to attackers. When dealing with accounts, emails, and PII, it&rsquo;s most secure to err (🥁) on the side of less. Instead of returning &ldquo;Your password for this account is incorrect,&rdquo; try the more ambiguous feedback &ldquo;Incorrect login information,&rdquo; and avoid revealing whether the username or email is in the system.</p>
<p>In order to be more helpful, provide a prominent way to contact a human in case an error should arise. Avoid revealing information that isn&rsquo;t necessary. If nothing else, for heaven&rsquo;s sake, don&rsquo;t suggest data that&rsquo;s a close match to the user input.</p>
<h2 id="be-a-bad-guy">Be a bad guy</h2>
<p>When considering security, it&rsquo;s helpful to take a step back, observe the information on display, and ask yourself how a malicious attacker would be able to utilize it. Play devil&rsquo;s advocate. If a bad guy saw this page, what new information would they gain? Does the view show any PII?</p>
<p>Ask yourself if everything on the page is actually necessary for a genuine user. If not, redact or remove it. Less is safer.</p>
<h2 id="security-starts-at-the-front-door">Security starts at the front door</h2>
<p>These days, there&rsquo;s a lot more overlap between coding on the front end and the back end. To create a well-rounded and secure application, it helps to have a general understanding of ways attackers can get their foot in the front door.</p>
]]></content></entry><entry><title type="html">The care and feeding of an IoT device</title><link href="https://victoria.dev/blog/the-care-and-feeding-of-an-iot-device/"/><id>https://victoria.dev/blog/the-care-and-feeding-of-an-iot-device/</id><author><name>Victoria Drake</name></author><published>2019-11-27T08:59:35-05:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Giving someone a puppy for Christmas might work really well in a movie, but in real life often comes hitched to a multitude of responsibilities that the giftee may not be fully prepared to take on. The same is true for Internet of Things (IoT) devices, including Amazon&rsquo;s Alexa-enabled devices, Google Home, and other Internet-connected appliances like cameras, lightbulbs, and toasters. Yes, they have those now.</p>
<p>Like puppies, IoT devices are still young. Many contain <a href="https://threatpost.com/iot-devices-vulnerable-takeover/144167/">known vulnerabilities</a> that remote attackers can use to gain access to device owners' networks. These attacks are sometimes as laughably simple as using a default username and password that the <a href="https://gdpr.report/news/2019/06/12/research-reveals-the-most-vulnerable-iot-devices/">device owner cannot change</a>.</p>
<p>Does all this mean you shouldn&rsquo;t give Grandma Mabel a new app-enabled coffee maker or Ring doorbell for Christmas? Probably, although not necessarily. Like puppies, properly-maintained IoT devices are capable of warming your heart without causing <em>too</em> much havoc; but they take a lot of work to care for. Here are a few responsibilities to keep in mind for the care and feeding of an IoT device.</p>
<h2 id="immature-security">Immature security</h2>
<p>Many manufacturers of IoT devices <a href="https://www.infosecurity-magazine.com/news/vulnerabilities-in-iot-devices/">have not made security a priority</a>. There aren&rsquo;t yet any enforced <a href="https://blog.rapid7.com/2019/03/27/the-iot-cybersecurity-improvement-act-of-2019/">security requirements</a> for this industry, which leaves the protection of your device and the network it&rsquo;s connected to in the hands of the manufacturer.</p>
<p>It&rsquo;s not just obscure no-name toasters, either; malicious third-party apps have snuck onto Amazon&rsquo;s and Google&rsquo;s more reputable devices and enabled attackers to <a href="https://www.cnet.com/news/alexa-and-google-voice-assistants-app-exploits-left-it-vulnerable-to-eavesdropping/">eavesdrop</a> on unsuspecting owners.</p>
<p>Until security regulations are put in place and enforced, it&rsquo;s buyer beware for both devices and third-party applications. To the extent possible, potential owners must do ample research to weed out vulnerable devices and untrustworthy apps.</p>
<h2 id="protecting-your-network">Protecting your network</h2>
<p>If you think hackers aren&rsquo;t likely to find your device in the vast expanse of the Internet, you might be wrong. These days, obscurity doesn&rsquo;t provide security. It&rsquo;s no longer left up to a potential attacker&rsquo;s fallible human eyes to find your insecure front door camera in a cacophony of wireless traffic; <a href="https://money.cnn.com/2013/04/08/technology/security/shodan/index.html">IoT search engines</a> like <a href="https://www.shodan.io/">Shodan</a> will do that for them. Thankfully, these search engines are also used for good, enabling white hat hackers and penetration testers to find and fix insecure devices.</p>
<p>Just like locking your own front door, IoT owners are responsible for locking down access to their devices. This may mean searching through device settings to make sure default credentials are changed, or checking to make sure that a device used on your private home network doesn&rsquo;t by default have public Internet access.</p>
<p>Where the options are available, HTTPS and <a href="/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/#1-use-multifactor-authentication">multifactor authentication</a> should be enabled. The use of a <a href="/blog/personal-cybersecurity-posture-for-when-youre-just-this-guy-you-know/#2-use-a-vpn">VPN</a> can also keep your devices from being found.</p>
<h2 id="keeping-them-patched">Keeping them patched</h2>
<p>Unlike puppies, many IoT devices are &ldquo;headless&rdquo; and have no inherent way of interfacing with a human. An app-controlled lightbulb, for example, may be all but useless without the software that makes it shine. As convenient as it may be to have your 1500K mood lighting come on automatically at dusk, it also means automatically ceding control of the device to its software developers.</p>
<p>When vulnerabilities in your phone&rsquo;s operating system are discovered and patched, it&rsquo;s likely that automatic updates are pushed and installed overnight, possibly without you even knowing. Your IoT device, on the other hand, may have no such support. In those cases, it&rsquo;s completely up to the user to discover that an update is needed, find and download the patch, then correctly update their device. Even for owners with some technical expertise, this process takes significant effort. Many <a href="https://www.machinedesign.com/industrial-automation/software-updates-are-new-hurdle-iot-security">device owners aren&rsquo;t even aware</a> that their software is dangerously outdated.</p>
<p>In practical terms, this means that users without the time, knowledge, or willingness to keep their devices updated should reconsider owning them. Alternatively, some research can help prospective owners choose devices that receive automatic push updates from their (hopefully responsible) manufacturers over WiFi.</p>
<h2 id="being-responsible">Being responsible</h2>
<p>Raising a healthy and happy IoT device is no small task, especially for potential owners with little time or willingness to put in the required effort. With the proper attention and maintenance, your Internet-connected appliance can bring joy and convenience to your life; but without, it introduces a potential security risk and a whole lot of trouble.</p>
<p>Before getting or giving IoT, be sure the potential owner is up to the task of caring for it.</p>
<p>You can learn more about basic cybersecurity for IoT (as a user or maker) by reading <a href="https://csrc.nist.gov/publications/detail/nistir/8259/draft">NIST&rsquo;s draft guidelines publication</a>.</p>
]]></content></entry><entry><title type="html">A cron job that could save you from a ransomware attack</title><link href="https://victoria.dev/blog/a-cron-job-that-could-save-you-from-a-ransomware-attack/"/><id>https://victoria.dev/blog/a-cron-job-that-could-save-you-from-a-ransomware-attack/</id><author><name>Victoria Drake</name></author><published>2019-11-13T08:27:31-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>It&rsquo;s 2019, and ransomware has become a thing.</p>
<p>Systems that interact with the public, like companies, educational institutions, and public services, are most susceptible. While delivery methods for ransomware vary from the physical realm to communication via social sites and email, all methods only require one person to make one mistake in order for ransomware to proliferate.</p>
<p>Ransomware, as you may have heard, is a malicious program that encrypts your files, rendering them unreadable and useless to you. It can include instructions for paying a ransom, usually by sending cryptocurrency, in order to obtain the decryption key. Successful ransomware attacks typically exploit vital, time-sensitive systems. Victims like public services and medical facilities are more likely to have poor or zero recovery processes, leaving governments or insurance providers to reward attackers with ransom payments.</p>
<p>Individuals, especially less-than-tech-savvy ones, are no less at risk. Ransomware can occlude personal documents and family photos that may only exist on one machine.</p>
<p>Thankfully, a fairly low-tech solution exists for rendering ransomware inept: back up your data!</p>
<p>You could achieve this with a straightforward system like plugging in an external hard drive and dragging files over once a day, but this method has a few hurdles. Manually transferring files may be slow or incomplete, and besides, you&rsquo;ll first have to remember to do it.</p>
<p>In my constant pursuit of automating all the things, there&rsquo;s one tool I often return to for its simplicity and reliability: <code>cron</code>. Cron does one thing, and does it well: it runs commands on a schedule.</p>
<p>I first used it a few months shy of three years ago (Have I really been blogging that long?!) to create <a href="/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/">custom desktop notifications on Linux</a>. Using the crontab configuration file, which you can edit by running <code>crontab -e</code>, you can specify a schedule for running any commands you like. Here&rsquo;s what the scheduling syntax looks like, from the <a href="https://en.wikipedia.org/wiki/Cron">Wikipedia cron page</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># ┌───────────── minute (0 - 59)</span>
<span class="c1"># │ ┌───────────── hour (0 - 23)</span>
<span class="c1"># │ │ ┌───────────── day of the month (1 - 31)</span>
<span class="c1"># │ │ │ ┌───────────── month (1 - 12)</span>
<span class="c1"># │ │ │ │ ┌───────────── day of the week (0 - 6)</span>
<span class="c1"># │ │ │ │ │</span>
<span class="c1"># │ │ │ │ │</span>
<span class="c1"># │ │ │ │ │</span>
<span class="c1"># * * * * * command to execute</span>
</code></pre></div><p>For example, a cron job that runs every day at 00:00 would look like:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="m">0</span> <span class="m">0</span> * * *
</code></pre></div><p>To run a job every twelve hours, the syntax is:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="m">0</span> */12 * * *
</code></pre></div><p>This <a href="https://crontab.guru/">great tool</a> can help you wrap your head around the cron scheduling syntax.</p>
<p>What&rsquo;s a scheduler have to do with backing up? By itself, not much. The simple beauty of cron is that it runs commands - any shell commands, and any scripts that you&rsquo;d normally run on the command line. As you may have gleaned from my other posts, I&rsquo;m of the strong opinion that you can do just about anything on the command line, including backing up your files. Options for storage in this area are plentiful, from near-to-free local and cloud options, as well as paid managed services too numerous to list. For CLI tooling, we have utilitarian classics like <code>rsync</code>, and CLI tools for specific cloud providers like AWS.</p>
<h2 id="backing-up-with-rsync">Backing up with <code>rsync</code></h2>
<p><a href="https://en.wikipedia.org/wiki/Rsync">The <code>rsync</code> utility</a> is a classic choice, and can back up your files to an external hard drive or remote server while making intelligent determinations about which files to update. It uses file size and modification times to recognize file changes, and then only transfers changed files, saving time and bandwidth.</p>
<p>The <a href="https://download.samba.org/pub/rsync/rsync.html"><code>rsync</code> syntax</a> can be a little nuanced; for example, a trailing forward slash will copy just the contents of the directory, instead of the directory itself. I found examples to be helpful in understanding the usage and syntax.</p>
<p>Here&rsquo;s one for backing up a local directory to a local destination, such as an external hard drive:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">rsync -a /home/user/directory /media/user/destination
</code></pre></div><p>The first argument is the source, and the second is the destination. Reversing these in the above example would copy files from the mounted drive to the local home directory.</p>
<p>The <code>a</code> flag for archive mode is one of <code>rsync</code>&rsquo;s superpowers. Equivalent to flags <code>-rlptgoD</code>, it:</p>
<ul>
<li>Syncs files recursively through directories (<code>r</code>);</li>
<li>Preserves symlinks (<code>l</code>), permissions (<code>p</code>), modification times (<code>t</code>), groups (<code>g</code>), and owner (<code>o</code>); and</li>
<li>Copies device and special files (<code>D</code>).</li>
</ul>
<p>Here&rsquo;s another example, this time for backing up the contents of a local directory to a directory on a remote server using SSH:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">rsync -avze ssh /home/user/directory/ user@remote.host.net:home/user/directory
</code></pre></div><p>The <code>v</code> flag turns on verbose output, which is helpful if you like realtime feedback on which files are being transferred. During large transfers, however, it can tend to slow things down. The <code>z</code> flag can help with that, as it indicates that files should be compressed during transfer.</p>
<p>The <code>e</code> flag, followed by <code>ssh</code>, tells <code>rsync</code> to use SSH according to the destination instructions provided in the final argument.</p>
<h2 id="backing-up-with-aws-cli">Backing up with AWS CLI</h2>
<p>Amazon Web Services offers a command line interface tool for doing just about everything with your AWS set up, including a straightforward <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/reference/s3/sync.html"><code>s3 sync</code> command</a> for recursively copying new and updated files to your S3 storage buckets. As a storage method for back up data, S3 is a stable and inexpensive choice. You can even <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html">turn on versioning in your bucket</a>.</p>
<p>The <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/reference/s3/index.html#directory-and-s3-prefix-operations">syntax for interacting with directories</a> is fairly straightforward, and you can directly indicate your S3 bucket as an <code>S3Uri</code> argument in the form of <code>s3://mybucket/mykey</code>. To back up a local directory to your S3 bucket, the command is:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">aws s3 sync /home/user/directory s3://mybucket
</code></pre></div><p>Similar to <code>rsync</code>, reversing the source and destination would download files from the S3 bucket.</p>
<p>The <code>sync</code> command is intuitive by default. It will guess the mime type of uploaded files, as well as include files discovered by following symlinks. A variety of options exist to control these and other defaults, even including flags to specify the server-side encryption to be used.</p>
<h2 id="setting-up-your-cronjob-back-up">Setting up your cronjob back up</h2>
<p>You can edit your machine&rsquo;s cron file by running:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">crontab -e
</code></pre></div><p>Intuitive as it may be, it&rsquo;s worth mentioning that your back up commands will only run when your computer is turned on and the cron daemon is running. With this in mind, choose a schedule for your cronjob that aligns with times when your machine is powered on, and maybe not overloaded with other work.</p>
<p>To back up to an S3 bucket every day at 8AM, for example, you&rsquo;d put a line in your crontab that looks like:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="m">0</span> <span class="m">8</span> * * * aws s3 sync /home/user/directory s3://mybucket
</code></pre></div><p>If you&rsquo;re curious whether your cron job is currently running, find the PID of cron with:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">pstree -ap <span class="p">|</span> grep cron
</code></pre></div><p>Then run <code>pstree -ap &lt;PID&gt;</code>.</p>
<p>This rabbit hole goes deeper; a quick search can reveal different ways of organizing and scheduling cronjobs, or help you find different utilities to run cronjobs when your computer is asleep. To protect against the possibility of ransomware-affected files being transferred to your back up, incrementally separated archives are a good idea. In essence, however, this basic set up is all you really need to create a reliable, automatic back up system.</p>
<h2 id="dont-feed-the-trolls">Don&rsquo;t feed the trolls</h2>
<p>Humans are fallible; that&rsquo;s why cyberattacks work. The success of a ransomware attack depends on the victim having no choice but to pay up in order to return to business as usual. A highly accessible recent back up undermines attackers who depend on us being unprepared. By blowing away a system and restoring from yesterday&rsquo;s back up, we may lose a day of progress; ransomers, however, gain nothing at all.</p>
<p>For further resources on ransomware defense for users and organizations, check out <a href="https://www.us-cert.gov/Ransomware">CISA&rsquo;s advice on ransomware</a>.</p>
]]></content></entry><entry><title type="html">Personal cybersecurity posture with too many pop culture references</title><link href="https://victoria.dev/blog/personal-cybersecurity-posture-with-too-many-pop-culture-references/"/><id>https://victoria.dev/blog/personal-cybersecurity-posture-with-too-many-pop-culture-references/</id><author><name>Victoria Drake</name></author><published>2019-10-07T08:30:12-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<blockquote>
<p>&ldquo;Zaphod&rsquo;s just this guy, you know?&rdquo;</p>
<p><em>&ndash; Halfrunt, Hitchhiker&rsquo;s Guide to the Galaxy by Douglas Adams. The book, not the movie. Definitely not the movie.</em></p>
</blockquote>
<p>Some people (🙋🏻‍) are really into cybersecurity, end-to-end encryption, and totally geeked out when they first learned how the <a href="https://en.wikipedia.org/wiki/Enigma_machine">Enigma</a> worked. These people are likely to have an innate interest in building a less-than-laughable personal cybersecurity posture.</p>
<p>Most people, unfortunately, consider cybersecurity optional. Most people say things like:</p>
<p><em>&ldquo;There&rsquo;s no one targeting lil ol' me.&quot;</em><br>
<em>&ldquo;I have nothing to hide, anyway.&quot;</em><br>
<em>&ldquo;I&rsquo;m too busy to learn all this stuff. Why can&rsquo;t someone just give me a simple summary of best practices that I can skim in approximately seven minutes?&quot;</em></p>
<p>To those people, I say, hello, hypothetical incorporeal reader! Here is a simple summary of best practices that you can skim in approximately seven minutes.</p>
<h2 id="wait-why-do-i-care">Wait why do I care</h2>
<p>You may have a hard time understanding why cybersecurity matters when you&rsquo;re just an average person. Sure, you don&rsquo;t want your devices hacked or your personal data stolen, but it&rsquo;s not like anyone is coming after <em>you</em>, specifically, right?</p>
<p>Hey Alex, I&rsquo;ll take &ldquo;right,&rdquo; for $400. It&rsquo;s unlikely anyone is attempting to steal your <em>particular</em> stuff, although I must admit that Persian rug of yours would really tie the room together. Instead, it can help to understand cybersecurity if you think of it in terms of low-hanging fruit.</p>
<p>You&rsquo;ve got some fruit, I&rsquo;ve got some fruit. Joe from down the block has a 1.21 gigawatt flux-capacitor-powered fruit-snatching robot. Joe doesn&rsquo;t know either of us exist, but his robot goes (very quickly) from door to door, all the way around the block, looking for fruit. If my front door is locked and yours is standing open, whose fruit is Joe&rsquo;s robot going to snatch?</p>
<p>If that sounds like boring, old, <em>regular</em> security, you&rsquo;re correct! Cybersecurity isn&rsquo;t about finding some magic spell that makes your fruit maximally secure. It&rsquo;s about making your fruit more secure than the fruit next to you. You do this by employing some thoughtful habits, in much the same way as you learned to lock your front door to guard against fruit-snatching robots.</p>
<p>Security breaches and incidents happen every day. Most of them occur because an automated scanner cast a wide net and found a person or company with lax security that a hacker could then exploit. Don&rsquo;t be that guy.</p>
<h2 id="wait-whats-a-security-posture-anyway">Wait what&rsquo;s a security posture anyway</h2>
<p>Here is how the National Institute of Standards and Technology defines security posture:</p>
<blockquote>
<p>The security status of an enterprise’s networks, information, and systems based on information assurance resources (e.g., people, hardware, software, policies) and capabilities in place to manage the defense of the enterprise and to react as the situation changes. <em>(<a href="https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final#pubs-topics">NIST Special Publication 800-30, B-11</a>)</em></p>
</blockquote>
<p>The important bit above is, <em>&ldquo;capabilities in place to manage the defense of the enterprise.&quot;</em> In the context of personal security, you are the enterprise. Congratulations. May you boldly go where no man has gone before.</p>
<p>Before you explore strange new worlds (it <em>is</em> the Internet, after all), there are steps you can take to manage your defenses. The word &ldquo;capabilities&rdquo; is apt, as having certain things in place will pretty much give you cybersecurity superpowers. Here are the three steps I consider most important and beneficial:</p>
<ol>
<li>Use multifactor authentication</li>
<li>Use a VPN</li>
<li>Develop healthy skepticism</li>
</ol>
<p>With these three keys in hand, your cybersecurity posture goes from being robot lunch to War Games - where the winning move for an attacker is not to play.</p>
<h2 id="1-use-multifactor-authentication">1. Use multifactor authentication</h2>
<p>Passwords are dead. Computationally, they are a solved problem, and cracking passwords is just <a href="https://howsecureismypassword.net/">a matter of time</a>. Unfortunately, many people still help to speed up the process by using the same <a href="https://haveibeenpwned.com/Passwords">compromised passwords</a> for multiple accounts, putting themselves at risk for inconceivable benefit. <a href="https://pages.nist.gov/800-63-3/sp800-63b.html#a2-length">Pass phrases</a> are longer and more complicated, and would take a lot more time to crack. I highly recommend them; even so, <a href="https://techcommunity.microsoft.com/t5/Azure-Active-Directory-Identity/Your-Pa-word-doesn-t-matter/ba-p/731984">your password ultimately doesn&rsquo;t matter</a>.</p>
<p>The answer, at least for now, is <a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">multifactor authentication</a> (MFA). MFA is made up of three kinds of authentication factors:</p>
<ol>
<li>Something you know, like a pass phrase;</li>
<li>Something you have, like a chip pin card or phone; and</li>
<li>Something that you are, like your face or fingerprint.</li>
</ol>
<p><img src="mfa.png" alt="Also the name of my next beatboxing team."></p>
<p>Two or more of these factors are infinitely better than a password alone, especially if <a href="https://en.wikipedia.org/wiki/List_of_the_most_common_passwords">your password is on this list</a>.</p>
<p>Multiple authentication factors are now widely supported by account providers and social media sites. If you have the choice, avoid using text messages as a way of receiving authentication codes. SMS authentication leaves you vulnerable to the <a href="https://en.wikipedia.org/wiki/SIM_swap_scam">SIM swap attack</a> - please direct further questions to <a href="https://www.nytimes.com/2019/09/05/technology/sim-swap-jack-dorsey-hack.html">Jack Dorsey</a>. Instead, use an authenticator app like <a href="https://authy.com/">Authy</a> to generate codes on your device. This ensures that you alone, using that particular device, will have the correct authentication code. No power in the &lsquo;verse can stop you.</p>
<p>Hardware authentication keys such as the <a href="https://www.yubico.com/">YubiKey</a> are also a great option, but may not yet be as well-supported as authentication apps.</p>
<h2 id="2-use-a-vpn">2. Use a VPN</h2>
<p>The difference between using a VPN and not using one is like how The Dark Knight Rises was really good and Batman v Superman was really, really bad. Same franchise, totally different standards.</p>
<p>Let&rsquo;s say you send a lot of mail, but never bother to put your letters in envelopes or even fold them in half. Anyone who bothers to look will know that you&rsquo;re not really the Dread Pirate Roberts after all. When you use a Virtual Private Network, especially if you often connect to public WiFi, it&rsquo;s like putting your letters into cryptographically-sealed envelopes and sending them via a special invisible courier service. No one but the intended recipient can read your letters, and no one but you and the courier know to whom the letters are sent.</p>
<p><img src="vpnmail.png" alt="Encrypted mail still won&rsquo;t stop you from the accidental &ldquo;reply all&rdquo; unfortunately."></p>
<p>VPNs prevent others from reading your communications, like opportunistic attackers who scan open WiFi, and even your own Internet Service Provider (ISP) who may sell your usage data for advertising dollars.</p>
<p>Choosing a trustworthy VPN provider requires some research, and is in itself material enough for a separate article. As a starting point, look for providers with firm policies against logging, and expect to pay between $5-$10 USD monthly for the service. Avoid free VPN apps and services with ambiguous privacy policies; they&rsquo;ll typically cost you much more than you&rsquo;ll know.</p>
<h2 id="3-develop-healthy-skepticism">3. Develop healthy skepticism</h2>
<p>Ultimately, the weakest link in your cybersecurity defense is you. All the MFA and VPNs on the Internet won&rsquo;t protect you if a scam or malware bot can trick you into opening the front gates. Yes, I know it&rsquo;s a very nice looking wooden horse. Also free. Did you order it? No? Then it can stay outside.</p>
<p><img src="horse.png" alt="Always look a Trojan gift horse in the mouth."></p>
<p>Develop the habit of second-guessing things delivered to your virtual doorstep. Email, phone, and messaging scams range in sophistication, from rickety robot-assembled shotgun blasts to elaborate social engineering attacks that <a href="https://www.youtube.com/watch?v=8bAuA1isCz0">use cognitive biases very effectively</a>. Don&rsquo;t assume you&rsquo;re too clever for them; humans are very predictable creatures. After all, nobody expects the Spanish Inquisition.</p>
<p>Instead, ask questions. Double check communications that ask you to click on links or visit a website, even if they come from someone you know or a company you use. If you&rsquo;re not certain, based on a previous in-person interaction, that your friend or bank or mother sent this email, pick up the phone and call them. Even if you think you are certain, pick up the phone and check. You don&rsquo;t call your mother enough, anyway.</p>
<p>Oh, and if the person on the phone is from your local tax office or the IRS or the CRA and they&rsquo;re about to freeze your accounts because a case of mistaken identity has resulted in you being criminally charged for not repaying a loan on a 600-foot yacht in Malibu, just hang up. You know better than that. Tax agencies don&rsquo;t have phones.</p>
<h2 id="your-personal-cybersecurity-starter-pack">Your personal cybersecurity starter pack</h2>
<p>You now have three keys to open three gates to a robust personal cybersecurity posture. If those keys have also unlocked your curiosity, there&rsquo;s plenty more rabbit hole to go down. I highly recommend the <a href="https://securityinfive.com/">Security in Five podcast</a> for Binary Blogger&rsquo;s great advice, which inspired much of this post. <a href="https://ssd.eff.org/">Surveillance Self Defense</a> offers the Electronic Frontier Foundation&rsquo;s tips on securing online communication. Troy Hunt also has a YouTube series entitled <a href="https://www.troyhunt.com/get-to-grips-with-internet-security-basics-courtesy-of-varonis/">Internet Security Basics</a> that goes into more depth on how to protect yourself online.</p>
<p>For now, I hope you use your newfound cybersecurity powers for good. Mind what you have learned. Save you it can.</p>
]]></content></entry><entry><title type="html">Secure application architecture basics: separation, configuration, and access</title><link href="https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/"/><id>https://victoria.dev/blog/secure-application-architecture-basics-separation-configuration-and-access/</id><author><name>Victoria Drake</name></author><published>2019-09-30T08:03:12-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Software developers today are encouraged to focus on building, and that&rsquo;s a great thing. We&rsquo;re benefitting from maker culture, an attitude of &ldquo;always be shipping,&rdquo; open source collaboration, and a bevy of apps that help us prioritize and execute with maximum efficiency. We&rsquo;re in an environment of constant creation, where both teams and solo entrepreneurs can be maximally productive.</p>
<p>Sometimes, this breakneck-speed productivity shows its downsides.</p>
<p>As I learn more about security best practices, I can&rsquo;t help but see more and more applications that just don&rsquo;t have a clue. A lack of awareness of security seems to lead to a lack of prioritization of tasks that don&rsquo;t directly support bringing the product to launch. The market seems to have made it more important to launch a usable product than a secure one, with the prevailing attitude being, &ldquo;we can do the security stuff later.&rdquo;</p>
<p>Cobbling together a foundation based more on expediency than longevity is a bad way to build applications and a great way to build security debt. Security debt, like technical debt, amasses when developers make (usually hasty) decisions that can make it more difficult to secure the application later on. If you&rsquo;re familiar with the concept of &ldquo;pushing left&rdquo; (or if you read my <a href="/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/">article about sensitive data exposure</a>), you&rsquo;ll know that when it comes to security, sometimes there isn&rsquo;t a version of &ldquo;later&rdquo; that isn&rsquo;t <em>too</em> late. It&rsquo;s a shame, especially since following some basic security practices with high benefit yield early on in the development process doesn&rsquo;t take significantly more time than <em>not</em> following them. Often, it comes down to having some basic but important knowledge that enables making the more secure decision.</p>
<p>While application architecture specifics vary, there are a few basic principles we can commonly apply. This article will provide a high-level overview of areas that I hope will help point developers in the right direction.</p>
<p>There must be a reason we call it application &ldquo;architecture.&rdquo; I like to think it&rsquo;s because the architecture of software is similar in some basic ways to the architecture of a building. (Or at least, in my absolute zero building-creation expertise, how I imagine a pretty utilitarian building to be.) Here&rsquo;s how I like to summarize three basic points of building secure application architecture:</p>
<ol>
<li>Separated storage</li>
<li>Customized configuration</li>
<li>Controlled access and user scope</li>
</ol>
<p>This is only a jumping-off point meant to get us started on the right foot; a complete picture of a fully-realized application&rsquo;s security posture includes areas outside the scope of this post, including authentication, logging and monitoring, integration, and sometimes compliance.</p>
<h2 id="1-separated-storage">1. Separated storage</h2>
<p>From a security standpoint, the concept of separation refers to storing files that serve different purposes in different places. When we&rsquo;re constructing our building and deciding where all the rooms go, we similarly create the lobby on the ground floor and place administrative offices on higher floors, perhaps off the main path. While both are rooms, we understand that they serve different purposes, have different functional needs, and possibly very different security requirements.</p>
<p><img src="separation.png" alt="Separation of building floors"></p>
<p>When it comes to our files, the benefit is perhaps easiest for us to understand if we consider a simple file structure:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">application/
 ├───html/
 │   └───index.html
 ├───assets/
 │   ├───images/
 │   │   ├───rainbows.jpg
 │   │   └───unicorns.jpg
 │   └───style.css
 └───super-secret-configurations/
     └───master-keys.txt
</code></pre></div><p>In our simplified example, let&rsquo;s say that all our application&rsquo;s images are stored in the <code>application/assets/images/</code> directory. When one of our users creates a profile and uploads their picture to it, this picture is also stored in this folder. Makes sense, right? It&rsquo;s an image, and that&rsquo;s where the images go. What&rsquo;s the issue?</p>
<p>If you&rsquo;re familiar with navigating a file structure in a terminal, you may have seen this syntax before: <code>../../</code>. The two dots are a handy way of saying, &ldquo;go up one directory.&rdquo; If we execute the command <code>cd ../../</code> in the <code>images/</code> directory of our simple file structure above, we&rsquo;d go up into <code>assets/</code>, then up again to the root directory, <code>application/</code>. This is a problem because of a wee little vulnerability dubbed <a href="https://cwe.mitre.org/data/definitions/22.html">path traversal</a>.</p>
<p>While the dot syntax saves us some typing, it also introduces the interesting advantage of not actually needing to know what the parent directory is called in order to go to it. Consider an attack payload script, delivered into the <code>images/</code> folder of our insecure application, that went up one directory using <code>cd ../</code> and then sent everything it found to the attacker, on repeat. Eventually, it would reach the root application directory and access the <code>super-secret-configurations/</code> folder. Not good.</p>
<p>While other measures should be in place to prevent path traversal and related user upload vulnerabilities, the simplest prevention by far is a separation of storage. Core application files and assets should not be combined with other data, and especially not with <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">user input</a>. It&rsquo;s best to keep user-uploaded files and activity logs (which may contain juicy data and can be vulnerable to injection attacks) separate from the main application.</p>
<p>Separation can be achieved in a few ways, such as by using a different server, different instance, separate IP range, or separate domain.</p>
<h2 id="2-customized-configuration">2. Customized configuration</h2>
<p>While wasting time on customization can hinder productivity, one area that we definitely want to customize is configuration settings. <a href="https://github.com/OWASP/Top10/blob/cb5f8967bba106e14a350761ac4f93b8aec7f8fa/2017/en/0xa6-security-misconfiguration.md">Security misconfiguration</a> is listed in the OWASP Top 10. A significant number of security incidents occur because a server, firewall, or administrative account is running in production with default settings. Upon the opening of our new building, we&rsquo;d hopefully be more careful to ensure we haven&rsquo;t left any keys in the locks.</p>
<p><img src="defaultkey.png" alt="Three keys"></p>
<p>Usually, the victims of attacks related to default settings aren&rsquo;t specifically targeted. Rather, they are found by automated scanning tools that attackers run over many possible targets, effectively prodding at many different systems to see if any roll over and expose some useful exploit. The automated nature of this attack means that it&rsquo;s important for us to review settings for every piece of our architecture. Even if an individual piece doesn&rsquo;t seem significant, it may provide a vulnerability that allows an attacker to use it as a gateway to our larger application.</p>
<p>In particular, examine architecture components for unattended areas such as:</p>
<ul>
<li>Default accounts, especially with default passwords, left in service;</li>
<li>Example web pages, tutorial applications, or sample data left in the application;</li>
<li>Unnecessary ports left in service, or ports left open to the Internet;</li>
<li>Unrestricted permitted HTTP methods;</li>
<li>Sensitive information stored in automated logs;</li>
<li>Default configured permissions in managed services; and,</li>
<li>Directory listings, or sensitive file types, left accessible by default.</li>
</ul>
<p>This list isn&rsquo;t exhaustive. Specific architecture components, such as cloud storage or web servers, will have other configurable features that should be reviewed. In general, reduce the application&rsquo;s attack surface by using minimal architecture components. If we use fewer components or don&rsquo;t install modules we don&rsquo;t need, we&rsquo;ll have fewer possible attack entry points to configure and safeguard.</p>
<h2 id="3-controlled-access-and-user-scope">3. Controlled access and user scope</h2>
<p>One of the more difficult security problems to test in an application is misconfigured access control. Automated testing tools have limited capability to find areas of an application that one user shouldn&rsquo;t be able to access. Thus, this is often left to manual testing or source code review to discover. By considering this vulnerability early on in the software development lifecycle when architectural decisions are being made, we reduce the risk that it becomes a problem that&rsquo;s harder to fix later. After all, we wouldn&rsquo;t simply leave our master keys out of reach on a high ledge and hope no one comes along with a ladder.</p>
<p><img src="access.png" alt="A cartoon of a user attempting to elevate privilege"></p>
<p><a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa5-broken-access-control.md">Broken access control</a> is listed in the OWASP Top 10, which goes into more detail on its various forms. As a simple example, consider an application with two levels of access: administrators, and users. We want to build a new feature - the ability to moderate or ban users - with the intention that only administrators would be allowed to use it.</p>
<p>If we&rsquo;re aware of the possibility of access control misconfigurations or exploits, we may decide to build the moderation feature in a completely separate area from the user-accessible space, such as on a different domain, or as part of a model that users don&rsquo;t share. This greatly reduces the risk that an access control misconfiguration or elevation of privilege vulnerability might allow a user to improperly access the moderation feature later on.</p>
<p>Of course, robust access control in our application needs more support to be effective. Consider factors such as sensitive tokens, or keys passed as URL parameters, or whether a control fails securely or insecurely. Nevertheless, by considering authorization at the architectural stage, we can set ourselves up to make further reinforcements easier to implement.</p>
<h2 id="security-basics-for-maximum-benefit">Security basics for maximum benefit</h2>
<p>Similar to avoiding racking up technical debt by choosing a well-vetted framework, developers can avoid security debt by becoming aware of common vulnerabilities and the simple architectural decisions we can make to help mitigate them. For a much more detailed resource on how to bake security into our applications from the start, the <a href="https://github.com/OWASP/ASVS">OWASP Application Security Verification Standard</a> is a robust guide.</p>
]]></content></entry><entry><title type="html">How users and applications stay safe on the Internet: it&amp;#39;s proxy servers all the way down</title><link href="https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/"/><id>https://victoria.dev/blog/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</id><author><name>Victoria Drake</name></author><published>2019-09-16T09:35:28-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Both Internet users and Internet-connected applications can benefit from investing in cybersecurity. One core aspect of online privacy is the use of a proxy server, though this basic building block may not be initially visible underneath its more recognizable forms. Proxy servers are a useful thing to know about nowadays, for developers, software product owners, as well as the average dog on the Internet. Let&rsquo;s explore what makes proxy servers an important piece of cybersecurity support.</p>
<blockquote>
<p>&ldquo;On the Internet, nobody knows you&rsquo;re a dog.&rdquo;</p>
</blockquote>
<p>When <a href="https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog">Peter Steiner&rsquo;s caption</a> was first published in The New Yorker in 1993, it reportedly went largely unnoticed. Only later did the ominous and slightly frightening allusion to online anonymity touch the public consciousness with the icy fingers of the unknown. As Internet usage became more popular, users became concerned that other people could represent themselves online in any manner they chose, without anyone else knowing who they truly were.</p>
<p>This, to make a gross understatement, is no longer the case. Thanks to <a href="https://support.mozilla.org/en-US/kb/enable-and-disable-cookies-website-preferences">tracking cookies</a>, <a href="https://robertheaton.com/2017/10/17/we-see-you-democratizing-de-anonymization/">browser fingerprinting</a>, <a href="https://www.privacypolicies.com/blog/isp-tracking-you/">Internet Service Providers (ISPs) selling our browsing logs to advertisers</a>, and our own inexplicable inclination to put our names and faces on social networks, online anonymity is out like last year&rsquo;s LaCroix flavours. While your next-door neighbor may not know how to find you online (well, except for through that location-based secondhand marketplace app you&rsquo;re using), you can be certain that at least one large advertising company has a series of zeroes and ones somewhere that represent you, the specific details of your market demographic, and all your online habits, including your preferred flavour of LaCroix.</p>
<p>There are ways to add <em>some</em> layers of obscurity, like using a corporate firewall that hides your IP, or <a href="https://www.torproject.org/">using Tor</a>. The underlying mechanism of both these methods is the same. Like being enshrouded in the layers of an onion, we&rsquo;re using one or more <a href="https://en.wikipedia.org/wiki/Proxy_server">proxy servers</a> to shield our slightly sulfuric selves from third-party tracking.</p>
<h2 id="whats-a-proxy-server-anyway">What&rsquo;s a proxy server, anyway</h2>
<p>A proxy, in the traditional English definition, is the &ldquo;authority or power to act for another.&rdquo; (<a href="https://www.merriam-webster.com/dictionary/proxy">Merriam-Webster</a>) A proxy server, in the computing context, is a server that acts on behalf of another server, or a user&rsquo;s machine.</p>
<p>By using a proxy to browse the Internet, for example, a user can defer being personally identifiable. All of the user&rsquo;s Internet traffic appears to come from the proxy server instead of their machine.</p>
<h2 id="proxy-servers-are-for-users">Proxy servers are for users</h2>
<p>There are a few ways that we, as the client, can use a proxy server to conceal our identity when we go online. It&rsquo;s important to know that these methods offer differing levels of anonymity, and that no single method will really provide <em>true</em> anonymity; if others are actively seeking to find you on the Internet, for whatever reason, further steps should be taken to make your activity truly difficult to identify. (Those steps are beyond the scope of this article, but you can get started with the <a href="https://ssd.eff.org/">Electronic Frontier Foundation&rsquo;s (EFF) Surveillance Self-Defense</a> resource.) For the average user, however, here is a small menu of options ranging from least to most anonymous.</p>
<h3 id="use-a-proxy-in-your-web-browser">Use a proxy in your web browser</h3>
<p>Certain web browsers, including Firefox and Safari on Mac, allow us to configure them to send our Internet traffic through a proxy server. The proxy server attempts to <a href="https://en.wikipedia.org/wiki/Anonymizer">anonymize</a> our requests by replacing our originating IP address with the proxy server&rsquo;s own IP. This provides us with some anonymity, as the website we&rsquo;re trying to reach will not see our originating IP address; however, the proxy server that we choose to use will know exactly who originated the request. This method also doesn&rsquo;t necessarily encrypt traffic, block cookies, or stop social media and cross-site trackers from following us around; on the upside, it&rsquo;s the method least likely to prevent websites that use cookies from functioning properly.</p>
<p><img src="browser-proxy.png" alt="A cartoon of a proxy server guarding a browser"></p>
<p>Public proxy servers are out there, and deciding whether or not we should use any one of them is on par with deciding whether we should eat a piece of candy handed to us by a smiling stranger. If your academic institution or company provides a proxy server address, it is (hopefully) a private server with some security in place. My preferred method, if we have a little time and a few monthly dollars to invest in our security, is to set up our own virtual instance with a company such as <a href="https://aws.amazon.com/ec2/">Amazon Web Services</a> or <a href="https://www.digitalocean.com/products/droplets/">Digital Ocean</a> and use this as our proxy server.</p>
<p>To use a proxy through our browser, we can <a href="https://support.mozilla.org/en-US/kb/connection-settings-firefox">edit our Connection Settings in Firefox</a>, or <a href="https://support.apple.com/guide/safari/set-up-a-proxy-server-ibrw1053/mac">set up a proxy server using Safari on Mac</a>.</p>
<p>In regards to choosing a browser, I would happily recommend <a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a> to any Internet user who wants to beef up the security of their browsing experience right out of the box. Mozilla has been a champion of privacy-first since I&rsquo;ve heard of them, and recently made some well-received changes to <a href="https://blog.mozilla.org/blog/2019/06/04/firefox-now-available-with-enhanced-tracking-protection-by-default/">Enhanced Tracking Protection in Firefox Browser</a> that blocks social media trackers, cross-site tracking cookies, fingerprinters, and cryptominers by default.</p>
<h3 id="use-a-vpn-on-your-device">Use a VPN on your device</h3>
<p>In order to take advantage of a proxy server for all our Internet usage instead of just through one browser, we can use a Virtual Private Network (VPN). A VPN is a service, usually paid, that sends our Internet traffic through their servers, thus acting as a proxy. A VPN can be used on our laptop as well as phone and tablet devices, and since it encompasses all our Internet traffic, it doesn&rsquo;t require much extra effort to use other than ensuring our device is connected. Using a VPN is an effective way to keep nosy ISPs from snooping on our requests.</p>
<p><img src="vpn.png" alt="A cartoon depicting a private VPN"></p>
<p>To use a paid, third-party VPN service, we&rsquo;d usually sign up on their website and download their app. It&rsquo;s important to keep in mind that whichever provider we choose, we&rsquo;re entrusting them with our data. VPN providers anonymize our activity from the Internet, but can themselves see all our requests. Providers vary in terms of their privacy policies and the data they choose to log, so a little research may be necessary to determine which, if any, we are comfortable trusting.</p>
<p>We can also roll our own VPN service by using a virtual instance and <a href="https://openvpn.net/">OpenVPN</a>. OpenVPN is an open source VPN protocol, and can be used with a few virtual instance providers, such as <a href="https://openvpn.net/amazon-cloud/">Amazon VPC</a>, <a href="https://openvpn.net/microsoft-azure/">Microsoft Azure</a>, <a href="https://openvpn.net/google-cloud-vpn/">Google Cloud</a>, and <a href="https://openvpn.net/digital-ocean-vpn/">Digital Ocean Droplets</a>. I previously wrote a tutorial on <a href="/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/">setting up your own personal VPN service with AWS</a> using an EC2 instance. I&rsquo;ve been running this solution personally for about a month, and it&rsquo;s cost me almost $4 USD in total, which is a price I&rsquo;m quite comfortable paying for some peace of mind.</p>
<h3 id="use-tor">Use Tor</h3>
<p>Tor takes the anonymity offered by a proxy server and compounds it by forwarding our requests through a <a href="https://en.wikipedia.org/wiki/Relay_network">relay network</a> of other servers, each called a &ldquo;node.&rdquo; Our traffic passes through three nodes on its way to a destination: the <em>guard</em>, <em>middle</em>, and <em>exit</em> nodes. At each step, the request is encrypted and anonymized such that the current node only knows where to send it, and nothing more about what the request contains. This separation of knowledge means that, of the options discussed, Tor provides the most complete version of anonymity. (For a more complete explanation, see <a href="https://robertheaton.com/2019/04/06/how-does-tor-work/">Robert Heaton&rsquo;s article on how Tor works</a>, which is so excellently done that I wish I&rsquo;d written it myself.)</p>
<p><img src="tor.png" alt="Tor onion holding a Free Hugs sign"></p>
<p>That said, this level of anonymity comes with its own cost. Not monetary, as <a href="https://www.torproject.org/download/">Tor Browser</a> is free to download and use. It is, however, slower than using a VPN or simple proxy server through a browser, due to the circuitous route our requests take.</p>
<h2 id="proxy-servers-are-for-servers-too">Proxy servers are for servers too</h2>
<p>We&rsquo;re now familiar with proxy servers in the context of protecting users as they surf the web, but proxies aren&rsquo;t just for clients. Websites and Internet-connected applications can use <a href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy servers</a> for obfuscation too. The &ldquo;reverse&rdquo; part just means that the proxy is acting on behalf of the server, instead of the client.</p>
<p>Why would a web server care about anonymity? Generally, they don&rsquo;t, at least not in the same way some users do. Web servers can benefit from using a proxy for a few different reasons; for example, they typically offer faster service to users by <a href="https://en.wikipedia.org/wiki/Web_cache">caching</a> or <a href="https://en.wikipedia.org/wiki/HTTP_compression">compressing</a> content to optimize delivery. From a cybersecurity perspective, however, a reverse proxy can improve an application&rsquo;s security posture by obfuscating the underlying infrastructure.</p>
<p><img src="syllables.png" alt="A cartoon making fun of the big words I used"></p>
<p>Basically, by placing another web server (the &ldquo;proxy&rdquo;) in front of the web server that directly accesses all the files and assets, we make it more difficult for an attacker to pinpoint our &ldquo;real&rdquo; web server and mess with our stuff. Like when you want to see the store manager and the clerk you&rsquo;re talking to says, &ldquo;I speak for the manager,&rdquo; and you&rsquo;re not really sure there even <em>is</em> a manager, anyway, but you successfully exchange the hot pink My Little Pony they sold you for a <em>fuchsia</em> one, thankyouverymuch, so now you&rsquo;re no longer concerned with who the manager is and whether or not they really exist, and if you passed them on the street you would not be able to stop them and call them out for passing off hot pink as fuchsia, and the manager is just fine with that.</p>
<p>Some common web servers can also act as reverse proxies, often with just a minimal and straightforward configuration change. While the best choice for your particular architecture is unknown to me, I will offer a couple common examples here.</p>
<h3 id="using-nginx-as-a-reverse-proxy">Using NGINX as a reverse proxy</h3>
<p>NGINX uses the <code>proxy_pass</code> directive in its <a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">configuration file</a> (<code>nginx.conf</code> by default) to turn itself into a reverse proxy server. The set up requires the following lines to be placed in the configuration file:</p>
<pre><code class="language-conf" data-lang="conf">location /requested/path/ {
    proxy_pass http://www.example.com/target/path/;
}
</code></pre><p>This specifies that all requests for the path <code>/requested/path/</code> are forwarded to <code>http://www.example.com/target/path/</code>. The target can be a domain name or an IP address, the latter with or without a port.</p>
<p>The full <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">guide to using NGINX as a reverse proxy</a> is part of the NGINX documentation.</p>
<h3 id="using-apache-httpd-as-a-reverse-proxy">Using Apache httpd as a reverse proxy</h3>
<p>Apache httpd similarly requires some straightforward configuration to act as a reverse proxy server. In the <a href="https://httpd.apache.org/docs/current/configuring.html">configuration file</a>, usually <code>httpd.conf</code>, set the following directives:</p>
<pre><code class="language-conf" data-lang="conf">ProxyPass &quot;/requested/path/&quot;  &quot;http://www.example.com/target/path/&quot;
ProxyPassReverse &quot;/requested/path/&quot;  &quot;http://www.example.com/target/path/&quot;
</code></pre><p>The <code>ProxyPass</code> directive ensures that all requests for the path <code>/requested/path/</code> are forwarded to <code>http://www.example.com/target/path/</code>. The <code>ProxyPassReverse</code> directive ensures that the headers sent by the web server are modified to point to the reverse proxy server instead.</p>
<p>The full <a href="https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html">reverse proxy guide for Apache HTTP server</a> is available in their documentation.</p>
<h2 id="proxy-servers-_most-of_-the-way-down">Proxy servers <em>most of</em> the way down</h2>
<p>I concede that my title is a little facetious, as cybersecurity best practices aren&rsquo;t really some eternal infinite-regression mystery (though they may sometimes seem to be). Regardless, I hope this post has helped in your understanding of what proxy servers are, how they contribute to online anonymity for both clients and servers, and that they are an integral building block of cybersecurity practices.</p>
<p>If you&rsquo;d like to learn more about personal best practices for online security, I highly recommend exploring the articles and resources provided by <a href="https://www.eff.org/">EFF</a>. For a guide to securing web sites and applications, the <a href="https://github.com/OWASP/CheatSheetSeries">OWASP Cheat Sheet Series</a> is a fantastic resource.</p>
]]></content></entry><entry><title type="html">Hackers are Googling your plain text passwords: preventing sensitive data exposure</title><link href="https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/"/><id>https://victoria.dev/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</id><author><name>Victoria Drake</name></author><published>2019-09-09T09:10:11-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Last week, I wrote about <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">the importance of properly handling user input</a> in our websites and applications. I alluded to an overarching security lesson that I hope to make explicit today: the security of our software, application, and customer data is built from the ground up, long before the product goes live.</p>
<p>The <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> is a comprehensive guide to web application security risks. It is relied upon by technology professionals, corporations, and those interested in cybersecurity or information security. The most recent publication lists Sensitive Data Exposure as the third most critical web application security risk. Here&rsquo;s how the risk is described:</p>
<blockquote>
<p>Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.</p>
</blockquote>
<p>&ldquo;Sensitive Data Exposure&rdquo; is a sort of catch-all category for leaked data resulting from many sources, ranging from weak cryptographic algorithms to unenforced encryption. The simplest source of this security risk, however, takes far fewer syllables to describe: people.</p>
<p>The phrase &ldquo;an ounce of prevention is worth a pound of cure,&rdquo; applies to medicine as well as secure software development. In the world of the latter, this is referred to as &ldquo;pushing left,&rdquo; a rather unintuitive term for establishing security best practices earlier, rather than later, in the software development life cycle (SDLC). Establishing procedures &ldquo;to the left&rdquo; of the SDLC can help ensure that the people involved in creating a software product are properly taking care of sensitive data from day one.</p>
<p>Unfortunately, a good amount of security testing often seems to occur much farther to the right side of the SDLC; too late for some security issues, such as sensitive data leakage, to be prevented.</p>
<p>I&rsquo;m one of the authors contributing to the upcoming <a href="https://github.com/OWASP/OWASP-Testing-Guide-v5">OWASP Testing Guide</a> and recently expanded a section on search engine discovery reconnaissance, or what the kids these days call &ldquo;Google dorking.&rdquo; This is one method, and arguably the most accessible method, by which a security tester (or black hat hacker) could find exposed sensitive data on the Internet. Here&rsquo;s an excerpt from that section (currently a work in progress on GitHub, to be released in v5):</p>
<blockquote>
<h3 id="search-operators">Search Operators</h3>
<p>A search operator is a special keyword that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of <code>operator:query</code>. Here are some commonly supported search operators:</p>
<ul>
<li><code>site:</code> will limit the search to the provided URL.</li>
<li><code>inurl:</code> will only return results that include the keyword in the URL.</li>
<li><code>intitle:</code> will only return results that have the keyword in the page title.</li>
<li><code>intext:</code> or <code>inbody:</code> will only search for the keyword in the body of pages.</li>
<li><code>filetype:</code> will match only a specific filetype, i.e. png, or php.</li>
</ul>
<p>For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:</p>
<p><code>site:owasp.org</code></p>
<p>&hellip;
Searching with operators can be a very effective discovery reconnaissance technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called <a href="https://en.wikipedia.org/wiki/Google_hacking">Google hacking</a> or Google dorking, is also possible using other search engines, as long as the search operators are supported.</p>
<p>A database of dorks, such as <a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a>, is a useful resource that can help uncover specific information.</p>
</blockquote>
<p>Regularly reviewing search engine results can be a fruitful task for security testers. However, when a search for <code>site:myapp.com passwords</code> turns up no results, it may still be a little too early to break for lunch. Here are a couple other places a security tester might like to look for sensitive data exposed in the wild.</p>
<h2 id="pastebin">Pastebin</h2>
<p>The self-declared &ldquo;#1 paste tool since 2002,&rdquo; <a href="https://pastebin.com">Pastebin</a> allows users to temporarily store any kind of text. It&rsquo;s mostly used for sharing information with others, or retrieving your own &ldquo;paste&rdquo; on another machine, perhaps in another location. Pastebin makes it easy to share large amounts of complicated text, like error logs, source code, configuration files, tokens, api keys&hellip; what&rsquo;s that? Oh, yes, it&rsquo;s public by default.</p>
<p>Here are some screenshots of a little dorking I did for a public bug bounty program.</p>
<figure class="screenshot"><img src="pastebin_apikey.png"
         alt="A screenshot of exposed api key in Google search"/><figcaption>
            <p>API keys in plain view.</p>
        </figcaption>
</figure>

<figure class="screenshot"><img src="pastebin_pass.png"
         alt="A screenshot of exposed username and password in Google search"/><figcaption>
            <p>Log-in details out in the open.</p>
        </figcaption>
</figure>

<p>Thanks in part to the convenience of using Pastebin and similar websites, it would appear that some people fail to think twice before making sensitive data publicly available.</p>
<h3 id="but-why">But why</h3>
<p>Granted, non-technical employees with access to the application may not have an understanding of which items should or should not be freely shared. Someone unfamiliar with what encrypted data is or what it looks like may not realize the difference between an encrypted string and an unencrypted token made up of many random letters and numbers. Even technical staff can miss things, make mistakes, or act carelessly after a hard day at work. It may be easy to call this a training problem and move on; however, none of these rationalizations address the root cause of the issue.</p>
<p>When people turn to outside solutions for an issue they face, it&rsquo;s usually because they haven&rsquo;t been provided with an equally-appealing internal solution, or are unaware that one exists. Employees using pastes to share or move sensitive data do so because they don&rsquo;t have an easier, more convenient, and secure internal solution to use instead.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Everyone involved in the creation and maintenance of a web application should be briefed on a few basic things in regards to sensitive data protection:</p>
<ol>
<li>what constitutes sensitive data,</li>
<li>the difference between plain text and encrypted data, and</li>
<li>how to properly transmit and store sensitive data.</li>
</ol>
<p>When it comes to third-party services, ensure people are aware that some transmission may not be encrypted, or may be publicly searchable. If there is no system currently in place for safely sharing and storing sensitive data internally, this is a good place to start. The security of application data is in the hands of everyone on the team, from administrative staff to C-level executives. Ensure people have the tools they need to work securely.</p>
<h2 id="public-repositories">Public repositories</h2>
<p>Developers are notorious for leaving sensitive information hanging out where it doesn&rsquo;t belong (yes, I&rsquo;ve done it too!). Without a strong push-left approach in place for handling tokens, secrets, and keys, these little gems can end up in full public view on sites like GitHub, GitLab, and Bitbucket (to name a few). <a href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf">A 2019 study</a> found that thousands of new, unique secrets are leaked every day on GitHub alone.</p>
<figure class="screenshot"><img src="github_tok.png"
         alt="A screenshot of a Google search for tokens on GitHub"/>
</figure>

<p>GitHub has implemented measures like <a href="https://github.blog/2018-10-17-behind-the-scenes-of-github-token-scanning/">token scanning</a>, and GitLab 11.9 <a href="https://about.gitlab.com/2019/03/22/gitlab-11-9-released/">introduced secret detection</a>. While these tools aim to reduce the chances that a secret might accidentally be committed, to put it bluntly, it&rsquo;s really not their job. Secret scanning won&rsquo;t stop developers from committing the data in the first place.</p>
<h3 id="but-why-1">But why</h3>
<p>Without an obvious process in place for managing secrets, developers may tend too much towards their innate sense of just-get-it-done-ness. Sometimes this leads to the expedient but irresponsible practice of storing keys as unencrypted variables within the program, perhaps with the intention of it being temporary. Nonetheless, these variables inevitably fall from front of mind and end up in a commit.</p>
<h3 id="mitigation-1">Mitigation</h3>
<p>Having a strong push-left culture means ensuring that sensitive data is properly stored and can be securely retrieved long before anyone is ready to make a commit. Tools and strategies for doing so are readily available for those who seek them. Here are some examples of tools that can support a push-left approach:</p>
<ul>
<li>Use a management tool to store and control access to keys and secrets, such as <a href="https://aws.amazon.com/kms/">Amazon Key Management Service</a> or Microsoft&rsquo;s <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>.</li>
<li>Make use of encrypted environment variables in CI tools, such as <a href="https://www.netlify.com/docs/continuous-deployment/#environment-variables">Netlify&rsquo;s environment variables</a> or <a href="https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables">virtual environments in GitHub Actions</a>.</li>
<li>Craft a robust <code>.gitignore</code> file that everyone on the team can contribute to and use.</li>
</ul>
<p>We also need not rely entirely on the public repository to catch those mistakes that may still slip through. It&rsquo;s possible to set up Git pre-commit hooks that scan for committed secrets using <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a>. There are some open-source programs available for this, such as <a href="https://github.com/thoughtworks/talisman">Talisman from ThoughtWorks</a> and <a href="https://github.com/awslabs/git-secrets">git-secrets from AWS Labs</a>.</p>
<h2 id="pushing-left-to-prevent-sensitive-data-exposure">Pushing left to prevent sensitive data exposure</h2>
<p>A little perspective can go a long way in demonstrating why it&rsquo;s important to begin managing sensitive data even before any sensitive data exists. By establishing security best practices on the left of the SDLC, we give our people the best chance to increase the odds that any future dorking on our software product looks more like this.</p>
<p><img src="no_results.png#screenshot" alt="No results found in Google Search"></p>
<p>Another great resource for checking up on the security of our data is Troy Hunt&rsquo;s <a href="https://haveibeenpwned.com/">Have I Been Pwned</a>, a service that compares your data (such as your email) to data that has been leaked in previous data breaches.</p>
<p>To learn about more ways we can be proactive with our application security, the <a href="https://owasp.org/www-project-proactive-controls/">OWASP Proactive Controls</a> publication is a great resource. There&rsquo;s also more about creating a push-left approach to security in the upcoming <a href="https://github.com/OWASP/OWASP-Testing-Guide-v5">OWASP Testing Guide</a>. If these topics interest you, I encourage you to read, learn, and contribute so more people will make it harder for sensitive data to be found.</p>
]]></content></entry><entry><title type="html">SQL injection and XSS: what white hat hackers know about trusting user input</title><link href="https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/"/><id>https://victoria.dev/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</id><author><name>Victoria Drake</name></author><published>2019-09-02T09:01:23-04:00</published><updated>2021-07-07T13:49:00+00:00</updated><content type="html"><![CDATA[<p>Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: <em>What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?</em> Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &ldquo;Urgent&rdquo; column: how will our product be secured?</p>
<p>If you&rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is <em>you.</em></p>
<p>I&rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &ldquo;white hat&rdquo; hacker, and sometimes just &ldquo;hacker,&rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &ldquo;black hat&rdquo; hacker, also called a &ldquo;cracker,&rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.</p>
<p>When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:</p>
<ul>
<li>The <a href="https://owasp.org/">Open Web Application Security Project</a> guides</li>
<li>The Hacker101 playlist from <a href="https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/">HackerOne&rsquo;s YouTube channel</a></li>
<li><a href="https://leanpub.com/web-hacking-101">Web Hacking 101</a> by Peter Yaworski</li>
<li><a href="https://brutelogic.com.br/blog/">Brute Logic&rsquo;s blog</a></li>
<li>The <a href="https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA">Computerphile</a> YouTube channel</li>
<li>Videos featuring Jason Haddix (<a href="https://github.com/jhaddix/">@jhaddix</a>) and Tom Hudson (<a href="https://github.com/tomnomnom/">@tomnomnom</a>) (two accomplished ethical hackers with different, but both effective, methodologies)</li>
</ul>
<p>You may be familiar with the catchphrase, &ldquo;sanitize your inputs!&rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.</p>
<h2 id="sql-injection-attacks">SQL injection attacks</h2>
<p>If you&rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great <a href="https://www.youtube.com/watch?v=_jKylhJtPmI">explain-like-I&rsquo;m-five video on SQLi</a>. You may already know of this attack from <a href="https://xkcd.com/327/">xkcd&rsquo;s Little Bobby Tables</a>. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).</p>
<figure class="center"><img src="sqli.png"
         alt="A monitor with an SQL Select command that gets all your base"/><figcaption>
            <p>You have no chance to survive make your time.</p>
        </figcaption>
</figure>

<p>You can test your own site to see if you&rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:</p>
<ul>
<li><code>' OR 1='1</code> evaluates to a constant true, and when successful, returns all rows in the table.</li>
<li><code>' AND 0='1</code> evaluates to a constant false, and when successful, returns no rows.</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=ciNHn38EyRc">This video demonstrates the above tests</a>, and does a great job of showing how impactful an SQL injection attack can be.</p>
<p>Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&rsquo;t trust user input.</p>
<h2 id="sql-injection-mitigation">SQL injection mitigation</h2>
<p>In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.</p>
<p>Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapping</a>, or ORM, with its use of <a href="https://docs.djangoproject.com/en/2.2/topics/db/queries/">QuerySets</a>. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.</p>
<p>Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:</p>
<ol>
<li>Prepared statements with variable binding (or <a href="https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html">parameterized queries</a>),</li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures">Stored procedures</a>; and</li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation">Whitelisting</a> or <a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input">escaping</a> user input.</li>
</ol>
<p>If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.</p>
<p>The battle, however, is only half won&hellip;</p>
<h2 id="cross-site-scripting-xss-attacks">Cross Site Scripting (XSS) attacks</h2>
<p>If you&rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Cross Site Scripting</a> attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing. <a href="https://blogs.apache.org/infra/entry/apache_org_04_09_2010">This incident report from Apache in 2010</a> is a good example of how XSS can be chained in a larger attack to take over accounts and machines.</p>
<figure><img src="xss.png"
         alt="An HTML dance party with a little JS cutting in"/><figcaption>
            <p>The annual DOM dance-off receives an unexpected guest);</p>
        </figcaption>
</figure>

<p>XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">Document Object Model</a>) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.</p>
<h3 id="dom-based-xss">DOM-based XSS</h3>
<p><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting">DOM-based XSS</a> occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in phishing.</p>
<p>To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called <code>xss-test.html</code> (or whatever you like) with the following HTML and JavaScript code:</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My XSS Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;greeting&#34;</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
                <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">!==</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>This web page will display the title &ldquo;Hello there!&rdquo; unless it receives a <a href="https://en.wikipedia.org/wiki/Query_string">URL parameter from a query string</a> with a value for <code>name</code>. To see the script work, open the page in a browser with an appended URL parameter, like so:</p>
<p><code>file:///path/to/file/xss-test.html?name=Victoria</code></p>
<p>Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for <code>name</code> and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the <code>name</code> parameter to, say, <code>&lt;img+src+onerror=alert(&quot;pwned&quot;)&gt;</code>?</p>
<p><img src="pwned.png#screenshot" alt="A screenshot of the XSS page example"></p>
<p>This is just one example, largely based on one from <a href="https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/">Brute&rsquo;s post</a>, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.</p>
<h3 id="stored-and-reflected-xss">Stored and reflected XSS</h3>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)">Stored XSS</a> occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &ldquo;About Me&rdquo; section. The script, improperly stored on the site&rsquo;s server, would successfully execute at a later time when another user views the attacker&rsquo;s profile.</p>
<p>One of the most famous examples of this is the <a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)">Samy worm</a> that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.</p>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)">Reflected XSS</a> similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.</p>
<h2 id="xss-attack-mitigation">XSS attack mitigation</h2>
<p>In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.</p>
<h3 id="validating-form-fields">Validating form fields</h3>
<p>Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is <a href="https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes">Django&rsquo;s built-in <code>Field</code> classes</a>, which provide fields that validate to some commonly used types and also specify sane defaults. Django&rsquo;s <code>EmailField</code>, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&rsquo;t imitate the common format of an email address, then Django won&rsquo;t consider the field valid and the form will not be submitted.</p>
<p>If relying on a framework isn&rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including <a href="https://en.wikipedia.org/wiki/Type_conversion">type conversion</a>, for example, ensuring that a number is of type <code>int()</code>; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a>.</p>
<p>Thankfully, we needn&rsquo;t start from scratch. Open source resources are available to help, such as the <a href="https://owasp.org/www-community/OWASP_Validation_Regex_Repository">OWASP Validation Regex Repository</a>, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find <a href="https://github.com/search?q=validation+library">plenty of these on GitHub</a>. Additionally, the <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet">XSS Filter Evasion Cheat Sheet</a> has a couple suggestions for test payloads we can use to test our existing applications.</p>
<p>While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.</p>
<h3 id="avoiding-direct-injection">Avoiding direct injection</h3>
<p>Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:</p>
<ul>
<li>How does data flow through our application?</li>
<li>What does a user expect to happen when they interact with this input?</li>
<li>Where on our page does data appear? Does it become embedded in a string or an attribute?</li>
</ul>
<p>Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of <a href="https://www.hacker101.com/">Hacker101</a>. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.</p>
<ul>
<li><code>&quot;&gt;&lt;h1&gt;test&lt;/h1&gt;</code></li>
<li><code>'+alert(1)+'</code></li>
<li><code>&quot;onmouserover=&quot;alert(1)</code></li>
<li><code>http://&quot;onmouseover=&quot;alert(1)</code></li>
</ul>
<p>As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using <code>innerText</code> instead of <code>innerHTML</code> in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.</p>
<h2 id="pay-attention-to-your-inputs">Pay attention to your inputs</h2>
<p>Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&rsquo;s like installing deadbolts on all the doors, but leaving a window open!</p>
<p>By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&rsquo;s flow, follow the data, and pay attention to our inputs.</p>
]]></content></entry></feed>